import requests
import time
import json
import os
import re
from enum import Enum
from datetime import datetime, timedelta
import traceback
import calendar

TEXTS = {
    'ru': {
        # –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
        'welcome': "üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!* –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –∞—Ä–µ–Ω–¥–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –•—É–¥–∂–∞–Ω–¥–µ!",
        'guest': "–ì–æ—Å—Ç—å",
        'choose_your_role': "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        'start_btn_client': "üë§ –Ø –í–æ–¥–∏—Ç–µ–ª—å",
        'start_btn_owner': "üöó –Ø –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫",
        'go_to_main_menu': "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
        'role_selection_made': "‚úÖ *–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {role_name}*",
        'role_client': "–ö–ª–∏–µ–Ω—Ç",
        'role_owner': "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫",
        'help_intro': "‚ÑπÔ∏è *–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*",
        'register_cmd': "*/register* - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ.",
        'owner_register_cmd': "*/owner_register* - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –¥–ª—è —Å–¥–∞—á–∏ –∞–≤—Ç–æ –≤ —Ç–∞–∫—Å–∏.",
        'rent_cmd': "*/rent* - –í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –∞—Ä–µ–Ω–¥—ã.",
        'listcars_cmd': "*/listcars* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ —Ü–µ–Ω—ã.",
        'myrentals_cmd': "*/myrentals* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∞—Ä–µ–Ω–¥—É.",
        'profile_cmd': "*/profile* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
        'edit_profile_cmd': "*/editprofile* - –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.",
        'message_cmd': "*/message <—Ç–µ–∫—Å—Ç>* - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        'contact_cmd': "*/contact* - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
        'faq_cmd': "*/faq* - –û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
        'cancel_cmd': "*/cancel* - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.",
        'lang_cmd': "*/language* - –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫.",
        'admin_help_cmd': "\n\n*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:* /adminhelp",
        'owner_help_intro': "\n\n*–ö–æ–º–∞–Ω–¥—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:*",
        'owner_payouts_cmd': "*/payouts* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –∞–≤—Ç–æ.",
        'owner_drivers_cmd': "*/drivers* - –£–∑–Ω–∞—Ç—å, –∫—Ç–æ —Å–µ–π—á–∞—Å –Ω–∞ –≤–∞—à–µ–π –º–∞—à–∏–Ω–µ.",
        'owner_service_cmd': "*/service* - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.",
        'owner_calendar_cmd': "*/calendar* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—à–∏–Ω—ã.",
        'owner_contract_cmd': "*/contract* - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é –¥–æ–≥–æ–≤–æ—Ä–∞.",
        'unknown_command': "ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
        'no_active_operation': "ü§∑ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω–∞.",
        'choose_language': "üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üáπüáØ –ó–∞–±–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        'language_set': "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ *–†—É—Å—Å–∫–∏–π*.",
        'must_be_owner': "‚ùóÔ∏è–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.",

        # –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        'menu_rent': "üöô –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
        'menu_list_cars': "üìã –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π",
        'menu_my_rentals': "üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏",
        'menu_profile': "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
        'menu_contact': "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        'menu_help': "‚ÑπÔ∏è –ü–æ–º–æ—â—å",
        'menu_search': "üîç –ü–æ–∏—Å–∫", 
        'menu_register_client': "‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –í–æ–¥–∏—Ç–µ–ª—è",   
        'menu_register_owner': "‚úçÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞", 
        'menu_chat_manager': "üí¨ –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
        'menu_language': "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",

        'enter_chat_mode': "üí¨ –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –í—Å–µ –≤–∞—à–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω—ã. \n\n–î–ª—è –≤—ã—Ö–æ–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /endchat.", 
        'exit_chat_mode': "üí¨ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞.", 
        'end_chat_button': "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", 
        'admin_btn_reply': "‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å",
        'admin_prompt_reply': "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {user_id}).\n\n_(–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel)_",
        'admin_reply_sent_successfully': "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}.",
        'admin_enter_chat_session': "üí¨ *–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name}.*\n\n–í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –µ–º—É. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        'admin_exit_chat_session': "üí¨ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name}.",
        'admin_end_chat_button': "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç —Å {user_name}",
        'admin_user_ended_chat': "üî¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.",

        # –°–ª–æ–≤–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        'day': '–î–µ–Ω—å',
        'week': '–ù–µ–¥–µ–ª—è',
        'month': '–ú–µ—Å—è—Ü',
        'yes': '–î–∞',
        'no': '–ù–µ—Ç',
        'ice_car': '–î–í–°',
        'electric_car': '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å',

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        'already_registered': "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç–∏–≤–µ–Ω. –î–ª—è –∞—Ä–µ–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rent.",
        'registration_pending': "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        'registration_approved': "‚úÖ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
        'registration_rejected': "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
        'user_approved_by_admin': "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}.",
        'user_rejected_by_admin': "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}.",
        'user_already_processed': "‚ùóÔ∏è–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.",
        'cant_rent_pending': "‚è≥ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –ø–æ–∫–∞ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.",
        'start_registration': "‚úçÔ∏è *–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª–∏–µ–Ω—Ç–∞.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):",
        'ask_phone': 'üìû *–í–≤–µ–¥–∏—Ç–µ 9 —Ü–∏—Ñ—Ä –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 927777777). –ü—Ä–µ—Ñ–∏–∫—Å +992 –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:*',
        'invalid_phone': '‚ùóÔ∏è*–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 9 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 927777777):*',
        'ask_city': 'üìç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:*',
        'select_city_from_list': '‚ùóÔ∏è*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.*',
        'ask_address': 'üè† *–û—Ç–ª–∏—á–Ω–æ, –≥–æ—Ä–æ–¥ {city} –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è (—É–ª–∏—Ü–∞, –¥–æ–º):*',
        'ask_age': 'üéÇ *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 02.04.2002):*',
        'invalid_age': '‚ùóÔ∏è*–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç.*',
        'ask_driving_experience': 'Ïß¨ *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∞–∂ –≤–æ–∂–¥–µ–Ω–∏—è (–≤ –≥–æ–¥–∞—Ö):*',
        'invalid_driving_experience': '‚ùóÔ∏è*–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞–∂ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (–æ—Ç 0 –¥–æ 60).*',
        'ask_license': 'üí≥ *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (—Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä):*',
        'invalid_license': '‚ùóÔ∏è*–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ AA1234567 (2 –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ 7 —Ü–∏—Ñ—Ä).*',
        'ask_license_category': 'üìã *–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, B):*',
        'ask_preferred_car_type': 'üöó *–ö–∞–∫–æ–π —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã?*',
        'ask_taxi_experience': 'üöï *–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Ç–∞–∫—Å–∏ (–Ø–Ω–¥–µ–∫—Å, Uber, –ú–∞–∫—Å–∏–º, –∏ —Ç.–¥.)?*',
        'ask_driver_id': 'üÜî *–ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø—ã—Ç, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID –≤–æ–¥–∏—Ç–µ–ª—è –≤ –æ–¥–Ω–æ–π –∏–∑ —Å–ª—É–∂–±. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç":*',
        'ask_deposit': 'üí∞ *–ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –≤–Ω–æ—Å–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç/–∑–∞–ª–æ–≥?*',
        'ask_passport_photo': "üì∏ *–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ —à–∞–≥–∞–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.*\n\n–®–∞–≥ 1/4: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ *–ø–∞—Å–ø–æ—Ä—Ç–∞* (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞).",
        'ask_passport_back_photo': "üì∏ –®–∞–≥ 2/4: –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ *–ø–∞—Å–ø–æ—Ä—Ç–∞* (–æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).",
        'ask_license_front_photo': "üì∏ –®–∞–≥ 3/4: –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ *–≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è* (–ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).",
        'ask_license_back_photo': "üì∏ –®–∞–≥ 4/4: –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ - —Ñ–æ—Ç–æ *–≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è* (–æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).",
        'registration_complete': "üéâ *–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å: /rent",
        'cancel_button': "‚ùå –û—Ç–º–µ–Ω–∞",
        'back_button': "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        'operation_cancelled': "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
        'owner_start_registration': "‚úçÔ∏è *–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –∞–≤—Ç–æ –¥–ª—è —Ç–∞–∫—Å–∏.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–∫–∞–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞):",
        'owner_ask_owner_name': "üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–µ—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫, –∏–Ω–∞—á–µ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∂–µ –§–ò–û).",
        'owner_ask_car_brand': "üöó –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Toyota Camry).",
        'owner_ask_car_plate': "üî¢ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
        'invalid_plate_format_tj': "‚ùóÔ∏è*–û—à–∏–±–∫–∞.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è *–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ) –±—É–∫–≤—ã*. –ù–∞–ø—Ä–∏–º–µ—Ä: `1001AB02` (3 –∏–ª–∏ 4 —Ü–∏—Ñ—Ä—ã, 2 –±—É–∫–≤—ã, 2 —Ü–∏—Ñ—Ä—ã).",
        'owner_ask_car_vin': "üîç –í–≤–µ–¥–∏—Ç–µ VIN-–∫–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
        'owner_ask_car_year': "üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
        'invalid_year': '‚ùóÔ∏è*–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2021).*',
        'owner_ask_car_mileage': "üõ£Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤ –∫–º).",
        'invalid_mileage': '‚ùóÔ∏è*–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75000).*',
        'owner_ask_car_transmission': "‚öôÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á (–ê–≤—Ç–æ–º–∞—Ç / –ú–µ—Ö–∞–Ω–∏–∫–∞).",
        'owner_ask_car_insurance': "üõ°Ô∏è –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –û–°–ê–ì–û / –ö–ê–°–ö–û?",
        'owner_ask_gps_camera': "üõ∞Ô∏è –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –∞–≤—Ç–æ GPS-—Ç—Ä–µ–∫–µ—Ä –∏ –∫–∞–º–µ—Ä—É –æ—Ç –Ω–∞—à–µ–≥–æ –ø–∞—Ä–∫–∞?",
        'owner_ask_car_color': "üé® –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ —Ç–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç—É.",
        'owner_ask_car_type': "‚õΩÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–î–í–° / –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å / –ì–∏–±—Ä–∏–¥).",
        'owner_ask_car_photos': "üì∏ *–®–∞–≥ 1/3: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ.*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–π. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª*.",
        'finish_photo_upload_btn': "‚úÖ –ì–æ—Ç–æ–≤–æ",
        'owner_photo_received': "‚úÖ –§–æ—Ç–æ {count} –∏–∑ 5 –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª*.",
        'max_photos_reached': "‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (5) —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...",
        'owner_ask_desired_price': "üí∞ *–®–∞–≥ 2/3: –ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞.*\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É *–∂–µ–ª–∞–µ–º—É—é* —Å—É–º–º—É –∞—Ä–µ–Ω–¥—ã –≤ *–¥–µ–Ω—å* (–≤ —Å–æ–º–æ–Ω–∏). –ù–∞–ø—Ä–∏–º–µ—Ä: `250`\n\n_(–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –±—É–¥–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ —Å –≤–∞–º–∏ –∏ —É–∫–∞–∑–∞–Ω–∞ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ.)_",
        'invalid_price': '‚ùóÔ∏è*–û—à–∏–±–∫–∞.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250).',
        'ask_docs_after_price': "üéâ *–û—Ç–ª–∏—á–Ω–æ!* –ê–Ω–∫–µ—Ç–∞ –∏ —Ñ–æ—Ç–æ –∞–≤—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\n\n*–®–∞–≥ 3/3: –î–æ–∫—É–º–µ–Ω—Ç—ã.*\n\n–¢–µ–ø–µ—Ä—å, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –ø–æ —à–∞–≥–∞–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.",
        'ask_tech_passport_photo': "üì∏ –®–∞–≥ 1/4: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ *—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞* –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).",
        'ask_tech_passport_back_photo': "üì∏ –®–∞–≥ 2/4: –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ *—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞* (–æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).",
        'ask_owner_passport_photo': "üì∏ –®–∞–≥ 3/4: –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ *–ø–∞—Å–ø–æ—Ä—Ç–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞* –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).",
        'ask_owner_passport_back_photo': "üì∏ –®–∞–≥ 4/4: –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ - —Ñ–æ—Ç–æ *–ø–∞—Å–ø–æ—Ä—Ç–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞* (–æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞).",
        
        'photo_received_proceed': "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...",
        'not_a_photo_error': "‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é*, –∞ –Ω–µ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç.",
        'registration_complete': "üéâ *–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!*\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ –≤—Å–µ–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        
        # –ö–æ–º–∞–Ω–¥—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
        'payouts_info': "üìä *–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –∞–≤—Ç–æ:*\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–¥–µ—Å—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        'drivers_info_assigned': "üë§ *–í–æ–¥–∏—Ç–µ–ª—å –Ω–∞ –≤–∞—à–µ–π –º–∞—à–∏–Ω–µ*\n\n–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å `{car_brand}` (–≥–æ—Å. –Ω–æ–º–µ—Ä: `{car_plate}`) —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—å: *–ê–ª–∏–µ–≤ –ê–ª–∏—à–µ—Ä*.\n–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: `+992 92 123 45 67`.",
        'drivers_info_free': "üë§ *–í–æ–¥–∏—Ç–µ–ª—å –Ω–∞ –≤–∞—à–µ–π –º–∞—à–∏–Ω–µ*\n\n–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å `{car_brand}` (–≥–æ—Å. –Ω–æ–º–µ—Ä: `{car_plate}`) –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–≤–æ–±–æ–¥–µ–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–æ—è–Ω–∫–µ –ø–∞—Ä–∫–∞.",
        'service_request_prompt': "‚öôÔ∏è *–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –¢–û –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ù—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –º–∞—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—Ä–º–æ–∑–∞'.\n\n_(–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel)_",
        'service_request_sent': "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.",
        'calendar_info': "üìÜ *–ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—à–∏–Ω—ã*\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
        'contract_info': "üìù *–î–æ–≥–æ–≤–æ—Ä —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º*\n\n*1. –ü–†–ï–î–ú–ï–¢ –î–û–ì–û–í–û–†–ê*\n1.1. –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –ø–µ—Ä–µ–¥–∞–µ—Ç, –∞ –ö–æ–º–ø–∞–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å (–¥–∞–ª–µ–µ - '–ê–≤—Ç–æ') –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–µ—Ä–≤–∏—Å–µ —Ç–∞–∫—Å–∏.\n\n*2. –û–ë–Ø–ó–ê–ù–ù–û–°–¢–ò –°–¢–û–†–û–ù*\n2.1. –ö–æ–º–ø–∞–Ω–∏—è –æ–±—è–∑—É–µ—Ç—Å—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–ª–∞—á–∏–≤–∞—Ç—å –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É –¥–æ—Ö–æ–¥ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ê–≤—Ç–æ –∑–∞ –≤—ã—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ...\n\n_(–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞. –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ñ–∏—Å–µ.)_",

        # –ê—Ä–µ–Ω–¥–∞
        'must_register_first': '‚ùå *–î–ª—è –∞—Ä–µ–Ω–¥—ã —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /register*',
        'you_are_blocked': '‚ùå *–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*',
        'no_cars_available': "‚ùóÔ∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –∞—Ä–µ–Ω–¥—ã.",
        'choose_car_for_rent': "üöô *–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å:*",
        'select_car_from_list': '‚ùóÔ∏è*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.*',
        'car_details_price': "üí∞ *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:*",
        'price_day': "‚Ä¢ –î–µ–Ω—å: *{price} —Å–æ–º–æ–Ω–∏*",
        'price_week': "‚Ä¢ –ù–µ–¥–µ–ª—è: *{price} —Å–æ–º–æ–Ω–∏*",
        'price_month': "‚Ä¢ –ú–µ—Å—è—Ü: *{price} —Å–æ–º–æ–Ω–∏*",
        'car_specs': "üîß *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*",
        'car_year': "‚Ä¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year}",
        'car_fuel': "‚Ä¢ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {fuel_type}",
        'car_engine': "‚Ä¢ –î–≤–∏–≥–∞—Ç–µ–ª—å: {engine}",
        'car_transmission': "‚Ä¢ –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á: {transmission}",
        'car_seats': "‚Ä¢ –ú–µ—Å—Ç–∞: {seats}",
        'choose_rent_period': '‚è≥ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã:*',
        'select_period_from_list': '‚ùóÔ∏è*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:*',
        'rental_request_accepted': "‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{id} –ø—Ä–∏–Ω—è—Ç–∞.*\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥–æ–π /myrentals.",
        'rental_status_changed': "–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ ‚Ññ{id} –Ω–∞ *{car}* –∏–∑–º–µ–Ω–µ–Ω:\n\n*{emoji} {status}*",
        'status_approved_details': "\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        'status_rejected_details': "\n–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ /contact.",

        # –ü—Ä–æ—Ñ–∏–ª—å –∏ –∑–∞—è–≤–∫–∏
        'profile_title': "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*",
        'profile_role': "‚ñ™Ô∏è *–í–∞—à–∞ —Ä–æ–ª—å:* {role}",
        'profile_name': "‚ñ™Ô∏è *–§–ò–û:* {name}",
        'profile_phone': "‚ñ™Ô∏è *–¢–µ–ª–µ—Ñ–æ–Ω:* `{phone}`",
        'profile_license': "‚ñ™Ô∏è *–í/–£:* `{license}`",
        'profile_city': '‚ñ™Ô∏è *–ì–æ—Ä–æ–¥:* {city}',
        'profile_address': '‚ñ™Ô∏è *–ê–¥—Ä–µ—Å:* {address}',
        'profile_age': "‚ñ™Ô∏è *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* {dob}", 
        'profile_driving_experience': "‚ñ™Ô∏è *–°—Ç–∞–∂:* {experience} –ª–µ—Ç",
        'profile_license_category': "‚ñ™Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è –í/–£:* {category}",
        'profile_preferred_car': "‚ñ™Ô∏è *–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∞–≤—Ç–æ:* {car_type}",
        'profile_taxi_experience': "‚ñ™Ô∏è *–û–ø—ã—Ç –≤ —Ç–∞–∫—Å–∏:* {experience}",
        'profile_driver_id': "‚ñ™Ô∏è *ID –í–æ–¥–∏—Ç–µ–ª—è:* {driver_id}",
        'profile_deposit': "‚ñ™Ô∏è *–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ª–æ–≥—É:* {deposit}",
        'profile_status': "‚ñ™Ô∏è *–°—Ç–∞—Ç—É—Å:* {status}",
        'not_registered': "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. /register",
        'your_rentals_title': "üìã *–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É:*",
        'rental_list_item': "‚Ä¢ *–ó–∞—è–≤–∫–∞ ‚Ññ{id}* ({car}) - –°—Ç–∞—Ç—É—Å: *{status}* (–¥–∞—Ç–∞: {date})",
        'no_rentals_yet': "–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.",
        

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        'edit_profile_btn': "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        'choose_field_to_edit': "‚úèÔ∏è *–ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?*",
        'prompt_new_value': "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_name}':*",
        'profile_updated_successfully': "‚úÖ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!*",
        'invalid_value': "‚ùóÔ∏è*–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        'field_name': "–§–ò–û",
        'field_phone': "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        'field_city': "–ì–æ—Ä–æ–¥",
        'field_age': "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
        'field_driving_experience': "–°—Ç–∞–∂ –≤–æ–∂–¥–µ–Ω–∏—è",
        'field_license': "–ù–æ–º–µ—Ä –í/–£",
        'field_address': "–¢–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å", 
        'field_registrator_name': "–§–ò–û –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        'field_owner_name': "–§–ò–û –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞",

        # –î—Ä—É–≥–æ–µ
        'loading_car_list': "‚è≥ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...*",
        'full_car_list_end': "üèÅ *–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.*",
        'message_to_admin_usage': "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/message <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>`",
        'no_admins_online': "‚ùóÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
        'message_sent_to_admin': "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        'contact_info_title': "üìû *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*",
        'contact_info_details': "*–¢–µ–ª–µ—Ñ–æ–Ω:* +992927997371\n*Email:* [job@ioyandasoz.com](mailto:job@ioyandasoz.com)\n*–¢–µ–ª–µ–≥—Ä–∞–º–º:* [https://t.me/Academy_iO](https://t.me/Academy_iO)\n*–ê–¥—Ä–µ—Å:* —É–ª. –ò—Å–º–æ–∏–ª–∏ –°–æ–º–æ–Ω–∏ 262, –•—É–¥–∂–∞–Ω–¥\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ *'üí¨ –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'* –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /chat.",
        'faq_title': "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*",
        'faq_content': "*1. –ö–∞–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?*\n–î–ª—è –∞—Ä–µ–Ω–¥—ã —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register, –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –ø–æ–º–æ—â—å—é /rent. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n\n*2. –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã?*\n–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Å–ø–æ—Ä—Ç.\n\n*3. –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?*\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é /message <—Ç–µ–∫—Å—Ç> –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä–∞–º –∏–∑ /contact.",
        'admin_reply_prefix': "üì• *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{text}",

        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã
        'admin_broadcast_confirm': "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ *{count}* –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n`{text}`\n\n–ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        'admin_broadcast_start': "‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
        'admin_broadcast_finish': "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        'admin_broadcast_cancelled': "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        'admin_user_not_found': "‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        'admin_user_deleted': "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{name}* (`{id}`) —É–¥–∞–ª–µ–Ω.",
        'admin_user_profile_deleted_notification': "‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        'admin_status_changed_notification': "‚úÖ –°—Ç–∞—Ç—É—Å –¥–ª—è {name} ({id}) –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *{status}*.",
        'admin_user_status_changed_notification': "‚ö†Ô∏è –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞ *{status}*.",
        'admin_reply_sent': "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {name} (`{id}`).",
        'admin_reply_failed': "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.",
        'admin_add_staff_usage': "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/addstaff <ID> <role>`\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: manager, mechanic, accountant",
        'admin_staff_added': "‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} (ID: {id}) –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ {role}.",
        'admin_staff_exists': "‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º —Å —Ä–æ–ª—å—é {role}.",
        'admin_staff_removed': "‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} (ID: {id}) —É–¥–∞–ª–µ–Ω.",
        'admin_staff_not_found': "‚ùóÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        'staff_help_manager': "\n\n*–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞:*\n"
                                "/approverental <ID> - –û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É\n"
                                "/rejectrental <ID> - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É\n"
                                "/listpending - –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫\n\n"
                                "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:*\n"
                                "/listusers - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                "/userinfo <ID|@user> - –ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
                                "/block <ID|@user> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
                                "/unblock <ID|@user> - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
                                "/deleteuser <ID|@user> - –£–¥–∞–ª–∏—Ç—å\n"
                                "/reply <ID|@user> <—Ç–µ–∫—Å—Ç> - –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                                "/broadcast <—Ç–µ–∫—Å—Ç> - –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º\n\n"
                                "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–∞—Ä–∫–æ–º:*\n"
                                "/addcar | /editcar | /deletecar\n"
                                "/listallrentals - –í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É\n\n"
                                "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º:*\n"
                                "/addstaff <ID> <—Ä–æ–ª—å> - –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
                                "/removestaff <ID> - –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
                                "/liststaff - –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n"
                                "*–§–∏–Ω–∞–Ω—Å—ã –∏ –¢–û:*\n"
                                "/payout <ID> <—Å—É–º–º–∞> - –£–≤–µ–¥–æ–º–∏—Ç—å –æ –≤—ã–ø–ª–∞—Ç–µ\n"
                                "/servicedone <ID> - –£–≤–µ–¥–æ–º–∏—Ç—å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¢–û",
        'staff_help_mechanic': "\n\n*–ö–æ–º–∞–Ω–¥—ã –º–µ—Ö–∞–Ω–∏–∫–∞:*\n"
                               "/servicecomplete <ID> - –û—Ç–º–µ—Ç–∏—Ç—å –¢–û –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º\n"
                               "/listmaintenance - –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –¢–û\n\n"
                               "*/dailycheck* - –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ –Ω–∞ —Ä–µ–π—Å\n"
                               "*/acceptfromowner* - –ü—Ä–∏–µ–º–∫–∞ –∞–≤—Ç–æ —É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ (—á–µ–∫-–ª–∏—Å—Ç)\n"
                               "*/givetodriver* - –í—ã–¥–∞—á–∞/–ü—Ä–∏–µ–º–∫–∞ –∞–≤—Ç–æ —É –≤–æ–¥–∏—Ç–µ–ª—è\n"
                               "*/edithandover* - –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º–∫–∏/–≤—ã–¥–∞—á–∏",
        'staff_help_accountant': "\n\n*–ö–æ–º–∞–Ω–¥—ã –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞:*\n/addpayment <ID> <—Å—É–º–º–∞> - –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂\n/generatereport - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç",
        'mechanic_dailycheck_cmd': "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ –Ω–∞ —Ä–µ–π—Å",
        'mechanic_acceptfromowner_cmd': "–ü—Ä–∏–µ–º–∫–∞ –∞–≤—Ç–æ —É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ (—á–µ–∫-–ª–∏—Å—Ç)",
        'mechanic_givetodriver_cmd': "–í—ã–¥–∞—á–∞/–ü—Ä–∏–µ–º–∫–∞ –∞–≤—Ç–æ —É –≤–æ–¥–∏—Ç–µ–ª—è",
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –í–æ–¥–∏—Ç–µ–ª—è
        'driver_rent_payment_due': "‚ùóÔ∏è *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –∑–∞ –∞—Ä–µ–Ω–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è `{car_brand}`.",
        'driver_maintenance_due_dvs': "üîß *–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ*\n\n–ù–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ `{car_brand}` (`{car_plate}`) –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–∞–º–µ–Ω—É –º–∞—Å–ª–∞ –≤ –¥–≤–∏–≥–∞—Ç–µ–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
        'driver_maintenance_due_electro': "üîß *–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ*\n\n–ù–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ `{car_brand}` (`{car_plate}`) –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–∞–º–µ–Ω—É –º–∞—Å–ª–∞ –≤ —Ä–µ–¥—É–∫—Ç–æ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
        'driver_inspection_due': "üìã *–¢–µ—Ö–æ—Å–º–æ—Ç—Ä*\n\n–°—Ä–æ–∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è `{car_brand}` (`{car_plate}`) –∏—Å—Ç–µ–∫–∞–µ—Ç `{date}`. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
        'driver_license_due': "üìÑ *–õ–∏—Ü–µ–Ω–∑–∏—è*\n\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ —Ç–∞–∫—Å–æ–º–æ—Ç–æ—Ä–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è `{car_brand}` (`{car_plate}`) –∏—Å—Ç–µ–∫–∞–µ—Ç `{date}`.",
        'driver_car_is_free': "üöô *–°–≤–æ–±–æ–¥–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å*\n\n–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Å, —á—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å `{car_brand}` —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rent –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
        'owner_driver_assigned': "üë§ *–ù–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å*\n\n–ù–∞ –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å `{car_brand}` (`{car_plate}`) –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å: {driver_name} (—Ç–µ–ª: `{driver_phone}`).",
        'owner_maintenance_completed': "‚úÖ *–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\n\n–†–∞–±–æ—Ç—ã –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è `{car_brand}` (`{car_plate}`) –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.",
        'owner_license_due': "üìÑ *–õ–∏—Ü–µ–Ω–∑–∏—è*\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ —Ç–∞–∫—Å–æ–º–æ—Ç–æ—Ä–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è `{car_brand}` (`{car_plate}`) –∏—Å—Ç–µ–∫–∞–µ—Ç `{date}`.",
        'owner_payout_received': "üí∞ *–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤*\n\n–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –∞—Ä–µ–Ω–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è `{car_brand}` –≤ —Ä–∞–∑–º–µ—Ä–µ *{amount} —Å–æ–º–æ–Ω–∏*.",
        'owner_inspection_due': "üìã *–¢–µ—Ö–æ—Å–º–æ—Ç—Ä*\n\n–í–Ω–∏–º–∞–Ω–∏–µ! –°—Ä–æ–∫ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è `{car_brand}` (`{car_plate}`) –∏—Å—Ç–µ–∫–∞–µ—Ç `{date}`.",
        
        'choose_rent_type': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ä–µ–Ω–¥—ã:',
        'short_term': '–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π',
        'long_term': '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π',
        'from_6_months': '–î–æ 6 –º–µ—Å—è—Ü–µ–≤',
        'up_to_1_year': '–û—Ç 6 –º–µ—Å—è—Ü–µ–≤ –¥–æ 1 –≥–æ–¥–∞',
        'choose_number_of_days': "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞—Ä–µ–Ω–¥—ã:",
        'invalid_vin': "‚ùóÔ∏è*–û—à–∏–±–∫–∞.* VIN-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ä–æ–≤–Ω–æ –∏–∑ 17 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –∫—Ä–æ–º–µ I, O, Q). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",      
        'edit_as_client_btn': "‚úçÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –í–æ–¥–∏—Ç–µ–ª—å",
        'edit_as_owner_btn': "üöó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫",
        'not_a_client_error': "‚ùóÔ∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.",
        'not_a_owner_error': "‚ùóÔ∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /owner_register.",
        'consent_prompt': "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é¬ª, —è –≤—ã—Ä–∞–∂–∞—é —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ.",
        'consent_confirm_btn': "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é",
        
        # --- –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ" ---
        'admin_btn_report_error': "‚úâÔ∏è –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ",
        'admin_prompt_custom_error': "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {target_id}).\n\n_(–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–º—É –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel)_",
        'admin_custom_error_sent': "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}.",
        'admin_select_error_reason': "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        'error_reason_photo': "–ù–µ—á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        'error_reason_mismatch': "–î–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∫–µ—Ç–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
        'error_reason_other': "–î—Ä—É–≥–æ–µ (—Å–≤—è–∑–∞—Ç—å—Å—è –ª–∏—á–Ω–æ)",
        'admin_btn_cancel_error': "–û—Ç–º–µ–Ω–∞",
        'admin_error_reported': "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
        'user_error_notification_prefix': "‚ùóÔ∏è *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é*",
        'error_message_photo': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–∏–ª–∏—Å—å –Ω–µ—á–µ—Ç–∫–∏–º–∏ –∏–ª–∏ —Ä–∞–∑–º—ã—Ç—ã–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–µ, —á–µ—Ç–∫–∏–µ —Å–Ω–∏–º–∫–∏ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /message, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É.",
        'error_message_mismatch': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –∑–∞–º–µ—Ç–∏–ª–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–≤–µ–ª–∏ –≤ –∞–Ω–∫–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –§–ò–û –∏–ª–∏ –Ω–æ–º–µ—Ä –í/–£), –∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ /message, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.",
        'error_message_other': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–∑–Ω–∏–∫–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π. –ö–æ–Ω—Ç–∞–∫—Ç—ã: /contact",
        'registration_rejected_client': "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—á–µ—Ç—ã –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register.",
        'registration_rejected_owner': "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—á–µ—Ç—ã –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /owner_register.",
        'registration_rejected_owner': "...",
        'city_selected': "‚úÖ –í—ã–±—Ä–∞–Ω–æ: {city_name}",
        'category_selected': "‚úÖ *–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}*", 
        'choice_selected': "‚úÖ –í—ã–±—Ä–∞–Ω–æ.",
        'cancel_hint': "\n\n_(–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel)_",
        'already_registered_as_driver': "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –í–æ–¥–∏—Ç–µ–ª—å.",
        'transmission_auto': "–ê–≤—Ç–æ–º–∞—Ç", 
        'transmission_manual': "–ú–µ—Ö–∞–Ω–∏–∫–∞", 
        'transmission_selected': "‚úÖ *–í—ã–±—Ä–∞–Ω–æ: {choice_text}*",
        'main_menu_prompt': "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'i_am_the_owner_btn': "üë§ –Ø –∏ –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫",
        

    
    },   
    'tj': {
        # –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        'menu_rent': "üöô –ú–æ—à–∏–Ω—Ä–æ –±–∞ –∏“∑–æ—Ä–∞ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω",
        'menu_list_cars': "üìã –†”Ø–π—Ö–∞—Ç–∏ –º–æ—à–∏–Ω“≥–æ",
        'menu_my_rentals': "üìÑ –î–∞—Ä—Ö–æ—Å—Ç“≥–æ–∏ –º–∞–Ω",
        'menu_profile': "üë§ –ü—Ä–æ—Ñ–∏–ª–∏ –º–∞–Ω",
        'menu_contact': "üìû –¢–∞–º–æ—Å",
        'menu_help': "‚ÑπÔ∏è –Å—Ä”£",
        'menu_search': "üîç “∂—É—Å—Ç—É“∑”Ø", 
        'menu_register_client': "‚úçÔ∏è –ë–∞“õ–∞–π–¥–≥–∏—Ä–∏–∏ –†–æ–Ω–∞–Ω–¥–∞",     
        'menu_register_owner': "‚úçÔ∏è –ë–∞“õ–∞–π–¥–≥–∏—Ä–∏–∏ –°–æ“≥–∏–±–º—É–ª–∫",  
        'menu_chat_manager': "üí¨ –ß–∞—Ç –±–æ –º–µ–Ω–µ“∑–µ—Ä",
        'menu_language': "üåê –ò–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞–±–æ–Ω",   

        'enter_chat_mode': "üí¨ –®—É–º–æ –±–∞ —Ä–µ–∂–∏–º–∏ —á–∞—Ç –±–æ –º–µ–Ω–µ“∑–µ—Ä –≤–æ—Ä–∏–¥ —à—É–¥–µ–¥. “≤–∞–º–∞–∏ –ø–∞—ë–º“≥–æ–∏ –º–∏–Ω–±–∞—ä–¥–∞–∏ —à—É–º–æ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ –º–µ—à–∞–≤–∞–Ω–¥. \n\n–ë–∞—Ä–æ–∏ –±–∞—Ä–æ–º–∞–¥–∞–Ω, —Ç—É–≥–º–∞–∏ –ø–æ—ë–Ω—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥ —ë —Ñ–∞—Ä–º–æ–Ω–∏ /endchat-—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.", 
        'exit_chat_mode': "üí¨ –®—É–º–æ –∞–∑ —Ä–µ–∂–∏–º–∏ —á–∞—Ç –±–∞—Ä–æ–º–∞–¥–µ–¥.", 
        'end_chat_button': "‚ùå “ö–∞—Ç—ä–∏ —á–∞—Ç", 
        'admin_btn_reply': "‚úçÔ∏è “∂–∞–≤–æ–± –¥–æ–¥–∞–Ω",
        'admin_prompt_reply': "‚úçÔ∏è “∂–∞–≤–æ–±–∏ —Ö—É–¥—Ä–æ –±–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞–∏ {user_name} (ID: {user_id}) –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.\n\n_(–ë–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω /cancel –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥)_",
        'admin_reply_sent_successfully': "‚úÖ “∂–∞–≤–æ–±–∏ —à—É–º–æ –±–∞ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞–∏ {user_name} –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.",
        'admin_enter_chat_session': "üí¨ *–®—É–º–æ –±–∞ —Ä–µ–∂–∏–º–∏ —á–∞—Ç –±–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞–∏ {user_name} –≤–æ—Ä–∏–¥ —à—É–¥–µ–¥.*\n\n“≤–∞–º–∞–∏ –ø–∞—ë–º“≥–æ–∏ —à—É–º–æ –∞–∫–Ω—É–Ω –±–∞ ”Ø —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ –º–µ—à–∞–≤–∞–Ω–¥. –ë–∞—Ä–æ–∏ “õ–∞—Ç—ä –∫–∞—Ä–¥–∞–Ω–∏ —á–∞—Ç, —Ç—É–≥–º–∞–∏ –ø–æ—ë–Ω—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥ —ë /cancel-—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.",
        'admin_exit_chat_session': "üí¨ –®—É–º–æ —á–∞—Ç—Ä–æ –±–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞–∏ {user_name} –±–∞ –∞–Ω“∑–æ–º —Ä–∞—Å–æ–Ω–¥–µ–¥.",
        'admin_end_chat_button': "‚ùå “ö–∞—Ç—ä–∏ —á–∞—Ç –±–æ {user_name}",
        'admin_user_ended_chat': "üî¥ –ò—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞ {user_name} (ID: {user_id}) —á–∞—Ç—Ä–æ –±–∞ –∞–Ω“∑–æ–º —Ä–∞—Å–æ–Ω–¥.",
        ## << –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ##
        
        'welcome': "üëã *–°–∞–ª–æ–º, {name}!* –ë–∞ –±–æ—Ç–∏ –∏“∑–æ—Ä–∞–∏ –º–æ—à–∏–Ω“≥–æ –¥–∞—Ä –•—É“∑–∞–Ω–¥ —Ö—É—à –æ–º–∞–¥–µ–¥!",
        'guest': "–ú–µ“≥–º–æ–Ω",
        'choose_your_role': "–ë–∞—Ä–æ–∏ –æ“ì–æ–∑, –ª—É—Ç—Ñ–∞–Ω –Ω–∞“õ—à–∏ —Ö—É–¥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        'start_btn_client': "üë§ –ú–∞–Ω –†–æ–Ω–∞–Ω–¥–∞",
        'start_btn_owner': "üöó –ú–∞–Ω –°–æ“≥–∏–±–º—É–ª–∫",
        'go_to_main_menu': "üè† –ú–µ–Ω—é–∏ –∞—Å–æ—Å”£",
        'role_selection_made': "‚úÖ *–ù–∞“õ—à –∏–Ω—Ç–∏—Ö–æ–± —à—É–¥: {role_name}*",
        'role_client': "–ú—É—à—Ç–∞—Ä”£",
        'role_owner': "–°–æ“≥–∏–±–º—É–ª–∫",
        'help_intro': "‚ÑπÔ∏è *–î–∞—Å—Ç—É—Ä –æ–∏–¥–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –±–æ—Ç*",
        'register_cmd': "*/register* - –ë–∞“õ–∞–π–¥–≥–∏—Ä–∏–∏ “≥–∞–º—á—É–Ω –º—É—à—Ç–∞—Ä”£ –±–∞—Ä–æ–∏ –∏“∑–æ—Ä–∞–∏ –º–æ—à–∏–Ω.",
        'owner_register_cmd': "*/owner_register* - –ë–∞“õ–∞–π–¥–≥–∏—Ä”£ “≥–∞–º—á—É–Ω —Å–æ“≥–∏–±–∏ –º–æ—à–∏–Ω –±–∞—Ä–æ–∏ —Å—É–ø–æ—Ä–∏–¥–∞–Ω –±–∞ —Ç–∞–∫—Å”£.",
        'rent_cmd': "*/rent* - –ò–Ω—Ç–∏—Ö–æ–±–∏ –º–æ—à–∏–Ω –±–∞—Ä–æ–∏ –∏“∑–æ—Ä–∞.",
        'listcars_cmd': "*/listcars* - –î–∏–¥–∞–Ω–∏ —Ä—É–π—Ö–∞—Ç–∏ –º–æ—à–∏–Ω“≥–æ –≤–∞ –Ω–∞—Ä—Ö“≥–æ.",
        'myrentals_cmd': "*/myrentals* - –î–∏–¥–∞–Ω–∏ —Å—Ç–∞—Ç—É—Å–∏ –¥–∞—Ä—Ö–æ—Å—Ç“≥–æ–∏ –∏“∑–æ—Ä–∞–∏ —Ö—É–¥.",
        'profile_cmd': "*/profile* - –î–∏–¥–∞–Ω–∏ –ø—Ä–æ—Ñ–∏–ª–∏ —Ö—É–¥.",
        'edit_profile_cmd': "*/editprofile* - –¢–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∏ —Ö—É–¥.",
        'message_cmd': "*/message <–º–∞—Ç–Ω>* - –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º –±–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
        'contact_cmd': "*/contact* - –ù–∞–º–æ–∏—à–∏ –º–∞—ä–ª—É–º–æ—Ç –±–∞—Ä–æ–∏ —Ç–∞–º–æ—Å.",
        'faq_cmd': "*/faq* - “∂–∞–≤–æ–± –±–∞ —Å–∞–≤–æ–ª“≥–æ–∏ –∑—É–¥-–∑—É–¥ –¥–æ–¥–∞—à–∞–≤–∞–Ω–¥–∞.",
        'cancel_cmd': "*/cancel* - –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –∞–º–∞–ª–∏—ë—Ç–∏ “∑–æ—Ä”£.",
        'lang_cmd': "*/language* - –¢–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω–∏ –∑–∞–±–æ–Ω.",
        'admin_help_cmd': "\n\n*–§–∞—Ä–º–æ–Ω“≥–æ–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* /adminhelp",
        'owner_help_intro': "\n\n*–§–∞—Ä–º–æ–Ω“≥–æ–∏ —Å–æ“≥–∏–±–∏ –º–æ—à–∏–Ω:*",
        'owner_payouts_cmd': "*/payouts* - –î–∏–¥–∞–Ω–∏ “≥–∏—Å–æ–±–±–∞—Ä–æ–±–∞—Ä–∫—É–Ω–∏“≥–æ –±–∞—Ä–æ–∏ –º–æ—à–∏–Ω–∏ —à—É–º–æ.",
        'owner_drivers_cmd': "*/drivers* - –§–∞“≥–º–∏–¥–∞–Ω–∏ –æ–Ω –∫–∏ “≥–æ–ª–æ –∫”£ –¥–∞—Ä –º–æ—à–∏–Ω–∏ —à—É–º–æ—Å—Ç.",
        'owner_service_cmd': "*/service* - –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –¥–∞—Ä—Ö–æ—Å—Ç –±–∞—Ä–æ–∏ —Ö–∏–¥–º–∞—Ç—Ä–∞—Å–æ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫”£.",
        'owner_calendar_cmd': "*/calendar* - –î–∏–¥–∞–Ω–∏ “∑–∞–¥–≤–∞–ª–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ –º–æ—à–∏–Ω.",
        'owner_contract_cmd': "*/contract* - –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –Ω—É—Å—Ö–∞–∏ —à–∞—Ä—Ç–Ω–æ–º–∞.",
        'unknown_command': "ü§∑ –§–∞—Ä–º–æ–Ω–∏ –Ω–æ–º–∞—ä–ª—É–º. –ë–∞—Ä–æ–∏ –¥–∏–¥–∞–Ω–∏ —Ä”Ø–π—Ö–∞—Ç–∏ —Ñ–∞—Ä–º–æ–Ω“≥–æ /help -—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",
        'operation_cancelled': "‚úÖ –ê–º–∞–ª–∏—ë—Ç –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.",
        'no_active_operation': "ü§∑ –ê–º–∞–ª–∏—ë—Ç–∏ —Ñ–∞—ä–æ–ª –±–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω –≤—É“∑—É–¥ –Ω–∞–¥–æ—Ä–∞–¥.",
        'choose_language': "üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üáπüáØ –ó–∞–±–æ–Ω—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        'language_set': "‚úÖ –ó–∞–±–æ–Ω –±–∞ *–¢–æ“∑–∏–∫”£* –≥—É–∑–æ—à—Ç–∞ —à—É–¥.",
        'must_be_owner': "‚ùóÔ∏è–ò–Ω —Ñ–∞—Ä–º–æ–Ω —Ç–∞–Ω“≥–æ –±–∞—Ä–æ–∏ —Å–æ“≥–∏–±–æ–Ω–∏ –º–æ—à–∏–Ω“≥–æ–∏ –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞—à—É–¥–∞ –¥–∞—Å—Ç—Ä–∞—Å –∞—Å—Ç.",

        # –°–ª–æ–≤–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        'day': '–†”Ø–∑',
        'week': '“≤–∞—Ñ—Ç–∞',
        'month': '–ú–æ“≥',
        'yes': '–ë–∞–ª–µ',
        'no': '–ù–µ',
        'ice_car': '–°–ë–î (–î–í–°)',
        'electric_car': '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª',
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        'already_registered': "‚úÖ –®—É–º–æ –∞–ª–ª–∞–∫–∞–π –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ —à—É–¥–∞–µ–¥ –≤–∞ –ø—Ä–æ—Ñ–∏–ª–∏ —à—É–º–æ —Ñ–∞—ä–æ–ª –∞—Å—Ç. –ë–∞—Ä–æ–∏ –∏“∑–æ—Ä–∞ /rent -—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",
        'registration_pending': "‚è≥ –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–∞—Ä–æ–∏ –±–∞“õ–∞–π–¥–≥–∏—Ä”£ –∞–ª–ª–∞–∫–∞–π —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥–∞–∞—Å—Ç –≤–∞ –¥–∞—Ä “≥–æ–ª–∏ –±–∞—Ä—Ä–∞—Å”£ “õ–∞—Ä–æ—Ä –¥–æ—Ä–∞–¥. –õ—É—Ç—Ñ–∞–Ω, —Ç–∞—Å–¥–∏“õ–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Ä–æ –∏–Ω—Ç–∏–∑–æ—Ä —à–∞–≤–µ–¥.",
        'cant_rent_pending': "‚è≥ –ë–∞“õ–∞–π–¥–≥–∏—Ä–∏–∏ —à—É–º–æ “≥–∞–Ω”Ø–∑ –∞–∑ “∑–æ–Ω–∏–±–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–∞—Å–¥–∏“õ –Ω–∞—à—É–¥–∞–∞—Å—Ç. –¢–æ —Ç–∞—Å–¥–∏“õ —à—É–¥–∞–Ω–∏ –¥–∞—Ä—Ö–æ—Å—Ç–∞—Ç–æ–Ω, —à—É–º–æ –º–æ—à–∏–Ω—Ä–æ –±–∞ –∏“∑–æ—Ä–∞ –≥–∏—Ä–∏—Ñ—Ç–∞ –Ω–∞–º–µ—Ç–∞–≤–æ–Ω–µ–¥. –õ—É—Ç—Ñ–∞–Ω, –∏–Ω—Ç–∏–∑–æ—Ä —à–∞–≤–µ–¥.",
        'registration_approved': "‚úÖ –ë–∞“õ–∞–π–¥–≥–∏—Ä–∏–∏ —à—É–º–æ —Ç–∞—Å–¥–∏“õ –∫–∞—Ä–¥–∞ —à—É–¥! –ê–∫–Ω—É–Ω —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∞–∑ “≥–∞–º–∞–∏ –≤–∞–∑–∏—Ñ–∞“≥–æ–∏ –±–æ—Ç –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",
        'registration_rejected': "‚ùå –ú—É—Ç–∞–∞—Å—Å–∏—Ñ–æ–Ω–∞, –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–∞—Ä–æ–∏ –±–∞“õ–∞–π–¥–≥–∏—Ä”£ —Ä–∞–¥ –∫–∞—Ä–¥–∞ —à—É–¥. –ë–∞—Ä–æ–∏ —Ç–∞—Ñ—Å–∏–ª–æ—Ç–∏ –±–µ—à—Ç–∞—Ä –±–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ç–∞–º–æ—Å –≥–∏—Ä–µ–¥.",
        'user_approved_by_admin': "‚úÖ –ò—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞ –∞–∑ “∑–æ–Ω–∏–±–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} —Ç–∞—Å–¥–∏“õ –∫–∞—Ä–¥–∞ —à—É–¥.",
        'user_rejected_by_admin': "‚ùå –ò—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞ –∞–∑ “∑–æ–Ω–∏–±–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} —Ä–∞–¥ –∫–∞—Ä–¥–∞ —à—É–¥.",
        'user_already_processed': "‚ùóÔ∏è–ò–Ω –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞ –∞–ª–ª–∞–∫–∞–π –∫–æ—Ä–∫–∞—Ä–¥ —à—É–¥–∞–∞—Å—Ç.",
        'start_registration': "‚úçÔ∏è *–û“ì–æ–∑–∏ –±–∞“õ–∞–π–¥–≥–∏—Ä”£ “≥–∞–º—á—É–Ω –º—É—à—Ç–∞—Ä”£.* –õ—É—Ç—Ñ–∞–Ω –Ω–æ–º–∏ –ø—É—Ä—Ä–∞–∏ —Ö—É–¥—Ä–æ (–§–ò–û) –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        'ask_phone': 'üìû *9 —Ä–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 927777777). –ü—Ä–µ—Ñ–∏–∫—Å–∏ +992 –±–∞ —Ç–∞–≤—Ä–∏ —Ö—É–¥–∫–æ—Ä –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–∞ –º–µ—à–∞–≤–∞–¥:*',
        'invalid_phone': '‚ùóÔ∏è*–•–∞—Ç–æ–≥”£. –õ—É—Ç—Ñ–∞–Ω, 9 —Ä–∞“õ–∞–º—Ä–æ –¥—É—Ä—É—Å—Ç –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 927777777):*',
        'ask_city': 'üìç *–®–∞“≥—Ä–∏ —Ö—É–¥—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:*',
        'select_city_from_list': '‚ùóÔ∏è*–õ—É—Ç—Ñ–∞–Ω, —à–∞“≥—Ä—Ä–æ –±–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –∞–∑ —Ç—É–≥–º–∞“≥–æ–∏ –∑–µ—Ä –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥.*',
        'ask_address': 'üè† *–û–ª”£, —à–∞“≥—Ä–∏ {city} –∏–Ω—Ç–∏—Ö–æ–± —à—É–¥. –ê–∫–Ω—É–Ω —Å—É—Ä–æ“ì–∞–∏ –¥–∞“õ–∏“õ–∏ –∏—Å—Ç–∏“õ–æ–º–∞—Ç–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–∫”Ø—á–∞, —Ö–æ–Ω–∞):*',
        'ask_age': 'üéÇ *–°–∞–Ω–∞–∏ —Ç–∞–≤–∞–ª–ª—É–¥–∏ —Ö—É–¥—Ä–æ –¥–∞—Ä —Ñ–æ—Ä–º–∞—Ç–∏ –†–†.–ú–ú.–°–°–°–° –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 02.04.2002):*',
        'invalid_age': '‚ùóÔ∏è*–§–æ—Ä–º–∞—Ç–∏ —Å–∞–Ω–∞ –Ω–æ–¥—É—Ä—É—Å—Ç —ë —Å–∏–Ω–Ω—É —Å–æ–ª–∏ –Ω–æ–º—É–≤–æ—Ñ–∏“õ. –õ—É—Ç—Ñ–∞–Ω, —Å–∞–Ω–∞—Ä–æ –¥–∞—Ä —Ñ–æ—Ä–º–∞—Ç–∏ –†–†.–ú–ú.–°–°–°–° –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥. –®—É–º–æ –±–æ—è–¥ –Ω–∞ –∫–∞–º—Ç–∞—Ä –∞–∑ 18-—Å–æ–ª–∞ –±–æ—à–µ–¥.*',
        'ask_driving_experience': 'Ïß¨ *–°–æ–±–∏“õ–∞–∏ —Ä–æ–Ω–∞–Ω–¥–∞–≥–∏–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–±–æ —Å–æ–ª):*',
        'invalid_driving_experience': '‚ùóÔ∏è*–•–∞—Ç–æ–≥”£. –õ—É—Ç—Ñ–∞–Ω, —Å–æ–±–∏“õ–∞–∏ –≤–æ“õ–µ–∏–∏ —Ö—É–¥—Ä–æ –¥–∞—Ä —à–∞–∫–ª–∏ —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–∞–∑ 0 —Ç–æ 60).*',
        'ask_license': 'üí≥ *–†–∞“õ–∞–º–∏ —à–∞“≥–æ–¥–∞—Ç–Ω–æ–º–∞–∏ —Ä–æ–Ω–∞–Ω–¥–∞–≥–∏—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (—Å–µ—Ä–∏—è –≤–∞ —Ä–∞“õ–∞–º):*',
        'invalid_license': '‚ùóÔ∏è*–•–∞—Ç–æ–≥”£. –†–∞“õ–∞–º—Ä–æ –¥–∞—Ä —Ñ–æ—Ä–º–∞—Ç–∏ AA1234567 –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (2 “≥–∞—Ä—Ñ–∏ –∞–Ω–≥–ª–∏—Å”£/–ª–æ—Ç–∏–Ω”£ –≤–∞ 7 —Ä–∞“õ–∞–º).*',
        'ask_license_category': 'üìã *–ö–∞—Ç–µ–≥–æ—Ä–∏—è–∏ —à–∞“≥–æ–¥–∞—Ç–Ω–æ–º–∞–∏ —Ä–æ–Ω–∞–Ω–¥–∞–≥–∏–∏ —Ö—É–¥—Ä–æ –Ω–∏—à–æ–Ω –¥–∏“≥–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, B):*',
        'ask_preferred_car_type': 'üöó *–ö–∞–¥–æ–º –Ω–∞–º—É–¥–∏ –º–æ—à–∏–Ω—Ä–æ –±–∞—Ä–æ–∏ –∫–æ—Ä –±–∞—Ä—Ç–∞—Ä”£ –º–µ–¥–∏“≥–µ–¥?*',
        'ask_taxi_experience': 'üöï *–û—ë —à—É–º–æ —Å–æ–±–∏“õ–∞–∏ –∫–æ—Ä –¥–∞—Ä —Ç–∞–∫—Å”£ –¥–æ—Ä–µ–¥ (–Ø–Ω–¥–µ–∫—Å, Uber, –ú–∞–∫—Å–∏–º –≤–∞ “ì.)?*',
        'ask_driver_id': 'üÜî *–ê–≥–∞—Ä —Å–æ–±–∏“õ–∞ –¥–æ—à—Ç–∞ –±–æ—à–µ–¥, ID-–∏ —Ä–æ–Ω–∞–Ω–¥–∞–≥–∏–∏ —Ö—É–¥—Ä–æ –¥–∞—Ä —è–∫–µ –∞–∑ —Ö–∞–¥–∞–º–æ—Ç –Ω–∏—à–æ–Ω –¥–∏“≥–µ–¥. –ê–≥–∞—Ä –Ω–µ - "–Ω–µ" –Ω–∞–≤–∏—Å–µ–¥:*',
        'ask_deposit': 'üí∞ *–û—ë —à—É–º–æ –æ–º–æ–¥–∞–µ–¥, –∫–∏ –¥–µ–ø–æ–∑–∏—Ç/–≥–∞—Ä–∞–≤ –≥—É–∑–æ—Ä–µ–¥?*', 
        'ask_passport_photo': "üì∏ *–û–ª”£! –ê–∫–Ω—É–Ω “≥—É“∑“∑–∞—Ç“≥–æ—Ä–æ –º–∞—Ä“≥–∏–ª–∞ –±–∞ –º–∞—Ä“≥–∏–ª–∞ –±–æ—Ä –∫—É–Ω–µ–¥.*\n\n“ö–∞–¥–∞–º–∏ 1/4: –ê–∫—Å–∏ *—à–∏–Ω–æ—Å–Ω–æ–º–∞–∏* —Ö—É–¥—Ä–æ –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥ (—Å–∞“≥–∏—Ñ–∞–∏ –∞—Å–æ—Å”£).",
        'ask_passport_back_photo': "üì∏ “ö–∞–¥–∞–º–∏ 2/4: –ê–∫–Ω—É–Ω –∞–∫—Å–∏ *—à–∏–Ω–æ—Å–Ω–æ–º–∞—Ä–æ* (—Ç–∞—Ä–∞—Ñ–∏ “õ–∞—Ñ–æ) –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥.",
        'ask_license_front_photo': "üì∏ “ö–∞–¥–∞–º–∏ 3/4: –ê–∫–Ω—É–Ω –∞–∫—Å–∏ *—à–∞“≥–æ–¥–∞—Ç–Ω–æ–º–∞–∏ —Ä–æ–Ω–∞–Ω–¥–∞–≥”£*-—Ä–æ –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥ (—Ç–∞—Ä–∞—Ñ–∏ –ø–µ—à).",
        'ask_license_back_photo': "üì∏ “ö–∞–¥–∞–º–∏ 4/4: –í–∞ –æ—Ö–∏—Ä–æ–Ω - –∞–∫—Å–∏ *—à–∞“≥–æ–¥–∞—Ç–Ω–æ–º–∞–∏ —Ä–æ–Ω–∞–Ω–¥–∞–≥”£* (—Ç–∞—Ä–∞—Ñ–∏ “õ–∞—Ñ–æ).",
        'registration_photo_received': '‚úÖ *–ê–∫—Å “õ–∞–±—É–ª –∫–∞—Ä–¥–∞ —à—É–¥. –ë–∞“õ–∞–π–¥–≥–∏—Ä”£ –∞–Ω“∑–æ–º –º–µ—ë–±–∞–¥...*',
        'registration_complete': "üéâ *–®—É–º–æ –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ —à—É–¥–µ–¥!*\n–î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–∞—Ä–æ–∏ –±–∞—Ä—Ä–∞—Å”£ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥. –ú–æ –±–∞ –Ω–∞–∑–¥–∏–∫”£ –±–æ —à—É–º–æ –¥–∞—Ä —Ç–∞–º–æ—Å —Ö–æ“≥–µ–º —à—É–¥.\n–ê–∫–Ω—É–Ω –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –º–æ—à–∏–Ω—Ä–æ –±–∞ –∏“∑–æ—Ä–∞ –≥–∏—Ä–µ–¥: /rent",

        # –ë–∞“õ–∞–π–¥–≥–∏—Ä–∏–∏ —Å–æ“≥–∏–±–º—É–ª–∫
        'owner_start_registration': "‚úçÔ∏è *–û“ì–æ–∑–∏ –±–∞“õ–∞–π–¥–≥–∏—Ä”£ “≥–∞–º—á—É–Ω —Å–æ“≥–∏–±–∏ –º–æ—à–∏–Ω –±–∞—Ä–æ–∏ —Ç–∞–∫—Å”£.*\n\n–õ—É—Ç—Ñ–∞–Ω, –Ω–æ–º—É –Ω–∞—Å–∞–±–∏ —Ö—É–¥—Ä–æ (“≥–∞–º—á—É–Ω –±–∞“õ–∞–π–¥–≥–∏—Ä–∞–Ω–¥–∞) –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:",
        'owner_ask_owner_name': "üë§ –ù–æ–º—É –Ω–∞—Å–∞–±–∏ —Å–æ“≥–∏–±–∏ –º–æ—à–∏–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–∞–≥–∞—Ä —à–∞—Ö—Å–∏ –¥–∏–≥–∞—Ä –±–æ—à–∞–¥, –¥–∞—Ä –∞–∫—Å–∏ “≥–æ–ª –Ω–æ–º—É –Ω–∞—Å–∞–±–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥).",
        'owner_ask_car_brand': "üöó –ú–∞—Ä–∫–∞ –≤–∞ –º–æ–¥–µ–ª–∏ –º–æ—à–∏–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, Toyota Camry).",
        'owner_ask_car_plate': "üî¢ –†–∞“õ–∞–º–∏ –¥–∞–≤–ª–∞—Ç–∏–∏ –º–æ—à–∏–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.",
        'invalid_plate_format_tj': "‚ùóÔ∏è*–•–∞—Ç–æ–≥”£.* –õ—É—Ç—Ñ–∞–Ω, —Ä–∞“õ–∞–º—Ä–æ –±–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –∞–∑ *“≥–∞—Ä—Ñ“≥–æ–∏ –∞–Ω–≥–ª–∏—Å”£ (–ª–æ—Ç–∏–Ω”£)* –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥. –ú–∞—Å–∞–ª–∞–Ω: `1001AB02` (3 —ë 4 —Ä–∞“õ–∞–º, 2 “≥–∞—Ä—Ñ, 2 —Ä–∞“õ–∞–º).",
        'owner_ask_car_vin': "üîç VIN-–∫–æ–¥–∏ –º–æ—à–∏–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.",
        'owner_ask_car_year': "üìÖ –°–æ–ª–∏ –±–∞—Ä–æ—Ä–∏—à–∏ –º–æ—à–∏–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.",
        'invalid_year': '‚ùóÔ∏è*–•–∞—Ç–æ–≥”£. –õ—É—Ç—Ñ–∞–Ω, —Å–æ–ª–∏ –±–∞—Ä–æ—Ä–∏—à–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –¥–∞—Ä —à–∞–∫–ª–∏ —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 2021).*',
        'owner_ask_car_mileage': "üõ£Ô∏è –ú–∞—Å–æ—Ñ–∞–∏ “≥–æ–∑–∏—Ä–∞–∏ –º–æ—à–∏–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–±–æ –∫–º).",
        'invalid_mileage': '‚ùóÔ∏è*–•–∞—Ç–æ–≥”£. –õ—É—Ç—Ñ–∞–Ω, –º–∞—Å–æ—Ñ–∞–∏ —Ç–∞–π—à—É–¥–∞—Ä–æ –¥–∞—Ä —à–∞–∫–ª–∏ —Ä–∞“õ–∞–º–∏ –±—É—Ç—É–Ω –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 75000).*',
        'owner_ask_car_transmission': "‚öôÔ∏è –ù–∞–≤—ä–∏ “õ—É—Ç—Ç–∏–∏ —Ñ–∏—à–∞–Ω–≥“≥–æ—Ä–æ –Ω–∏—à–æ–Ω –¥–∏“≥–µ–¥ (–ê–≤—Ç–æ–º–∞—Ç / –ú–µ—Ö–∞–Ω–∏–∫–∞).",
        'owner_ask_car_insurance': "üõ°Ô∏è –û—ë —à—É–º–æ —Å—É“ì—É—Ä—Ç–∞–∏ –û–°–ê–ì–û / –ö–ê–°–ö–û –¥–æ—Ä–µ–¥?",
        'owner_ask_gps_camera': "üõ∞Ô∏è –û—ë —à—É–º–æ –æ–º–æ–¥–∞–µ–¥, –∫–∏ –¥–∞—Ä –º–æ—à–∏–Ω GPS-—Ç—Ä–µ–∫–µ—Ä –≤–∞ –∫–∞–º–µ—Ä–∞—Ä–æ –∞–∑ –ø–∞—Ä–∫–∏ –º–æ –Ω–∞—Å–± –∫—É–Ω–µ–¥?",
        'owner_ask_car_color': "üé® –†–∞–Ω–≥–∏ –º–æ—à–∏–Ω—Ä–æ –∞–∑ —Ä—É–∏ –≤–∞—Ä–∞–∫–∞–∏ —Ç–µ—Ö–Ω–∏–∫”£ –¥–æ—Ö–∏–ª –∫—É–Ω–µ–¥ .",
        'owner_ask_car_type': "‚õΩÔ∏è –ù–∞–≤—ä–∏ –º–æ—à–∏–Ω—Ä–æ –Ω–∏—à–æ–Ω –¥–∏“≥–µ–¥ (–°–ë–î / –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª / –ì–∏–±—Ä–∏–¥).",

        'owner_ask_car_photos': "üì∏ *“ö–∞–¥–∞–º–∏ 1/3: –ê–∫—Å“≥–æ–∏ –º–æ—à–∏–Ω.*\n\n–¢–æ 5 –¥–æ–Ω–∞ –∞–∫—Å–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Ö—É–¥—Ä–æ –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥. –Ø–∫-–¥–æ–Ω–∞–≥”£ —Ñ–∏—Ä–∏—Å—Ç–µ–¥. –ü–∞—Å –∞–∑ –∞–Ω“∑–æ–º, —Ç—É–≥–º–∞–∏ *¬´‚úÖ –¢–∞–π—ë—Ä¬ª*-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.",
        'finish_photo_upload_btn': "‚úÖ –¢–∞–π—ë—Ä",
        'owner_photo_received': "‚úÖ –ê–∫—Å–∏ {count} –∞–∑ 5 “õ–∞–±—É–ª —à—É–¥. –ê–∫—Å–∏ –Ω–∞–≤–±–∞—Ç–∏—Ä–æ —Ñ–∏—Ä–∏—Å—Ç–µ–¥ —ë *¬´‚úÖ –¢–∞–π—ë—Ä¬ª*-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥.",
        'max_photos_reached': "‚úÖ –ú–∏“õ–¥–æ—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª–∏–∏ –∞–∫—Å“≥–æ (5) –±–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥. –ë–∞ “õ–∞–¥–∞–º–∏ –æ—è–Ω–¥–∞ –º–µ–≥—É–∑–∞—Ä–µ–º...",
        'owner_ask_desired_price': "üí∞ *“ö–∞–¥–∞–º–∏ 2/3: –ù–∞—Ä—Ö–∏ –¥–∏–ª—Ö–æ“≥.*\n\n–ú–∞–±–ª–∞“ì–∏ *—Ö–æ“≥–∏—à–º–∞–Ω–¥–æ–Ω–∞–∏* –∏“∑–æ—Ä–∞–∏ *—è–∫ —Ä”Ø–∑–∞—Ä–æ* –Ω–∏—à–æ–Ω –¥–∏“≥–µ–¥ (–±–æ —Å–æ–º–æ–Ω”£). –ú–∞—Å–∞–ª–∞–Ω: `250`\n\n_(–ú–∞–±–ª–∞“ì–∏ –Ω–∏“≥–æ”£ –±–æ —à—É–º–æ –º—É–≤–æ—Ñ–∏“õ–∞ –∫–∞—Ä–¥–∞ —à—É–¥–∞, –¥–∞—Ä —à–∞—Ä—Ç–Ω–æ–º–∞ –¥–∞—Ä“∑ –º–µ–≥–∞—Ä–¥–∞–¥.)_",
        'invalid_price': '‚ùóÔ∏è*–•–∞—Ç–æ–≥”£.* –õ—É—Ç—Ñ–∞–Ω, –º–∞–±–ª–∞“ì—Ä–æ –¥–∞—Ä —à–∞–∫–ª–∏ —Ä–∞“õ–∞–º–∏ –±—É—Ç—É–Ω –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, 250).',
        'ask_docs_after_price': "üéâ *–û–ª”£!* –ü—É—Ä—Å–∏—à–Ω–æ–º–∞ –≤–∞ –∞–∫—Å“≥–æ–∏ –º–æ—à–∏–Ω –ø—É—Ä –∫–∞—Ä–¥–∞ —à—É–¥–∞–Ω–¥.\n\n*“ö–∞–¥–∞–º–∏ 3/3: “≤—É“∑“∑–∞—Ç“≥–æ.*\n\n–ê–∫–Ω—É–Ω, –º–∏—Å–ª–∏ –ø–µ—à—Ç–∞—Ä–∞, “≥—É“∑“∑–∞—Ç“≥–æ—Ä–æ –º–∞—Ä“≥–∏–ª–∞ –±–∞ –º–∞—Ä“≥–∏–ª–∞ –±–æ—Ä –∫—É–Ω–µ–¥.",


        'ask_tech_passport_photo': "üì∏ “ö–∞–¥–∞–º–∏ 1/4: –ê–∫—Å–∏ *–ø–∞—Å–ø–æ—Ä—Ç–∏ —Ç–µ—Ö–Ω–∏–∫–∏–∏* –º–æ—à–∏–Ω—Ä–æ (—Ç–∞—Ä–∞—Ñ–∏ –ø–µ—à) –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥.",
        'ask_tech_passport_back_photo': "üì∏ “ö–∞–¥–∞–º–∏ 2/4: –ê–∫–Ω—É–Ω –∞–∫—Å–∏ *–ø–∞—Å–ø–æ—Ä—Ç–∏ —Ç–µ—Ö–Ω–∏–∫–∏–∏* –º–æ—à–∏–Ω—Ä–æ (—Ç–∞—Ä–∞—Ñ–∏ “õ–∞—Ñ–æ) –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥.",
        'ask_owner_passport_photo': "üì∏ “ö–∞–¥–∞–º–∏ 3/4: –ê–∫–Ω—É–Ω –∞–∫—Å–∏ *—à–∏–Ω–æ—Å–Ω–æ–º–∞–∏ —Å–æ“≥–∏–±–º—É–ª–∫*-—Ä–æ (—Ç–∞—Ä–∞—Ñ–∏ –ø–µ—à) –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥.",
        'ask_owner_passport_back_photo': "üì∏ “ö–∞–¥–∞–º–∏ 4/4: –í–∞ –æ—Ö–∏—Ä–æ–Ω - –∞–∫—Å–∏ *—à–∏–Ω–æ—Å–Ω–æ–º–∞–∏ —Å–æ“≥–∏–±–º—É–ª–∫*-—Ä–æ (—Ç–∞—Ä–∞—Ñ–∏ “õ–∞—Ñ–æ) –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥.",

        'photo_received_proceed': "‚úÖ –ê–∫—Å “õ–∞–±—É–ª —à—É–¥. –ë–∞ “õ–∞–¥–∞–º–∏ –æ—è–Ω–¥–∞ –º–µ–≥—É–∑–∞—Ä–µ–º...",
        'not_a_photo_error': "‚ùóÔ∏è–õ—É—Ç—Ñ–∞–Ω, –º–∞“≥–∑ *–∞–∫—Å* –∏—Ä—Å–æ–ª –∫—É–Ω–µ–¥, –Ω–∞ —Ñ–∞–π–ª —ë –º–∞—Ç–Ω.",
        'registration_complete': "üéâ *–®—É–º–æ –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ —à—É–¥–µ–¥!*\n–î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ –±–æ “≥–∞–º–∞–∏ “≥—É“∑“∑–∞—Ç“≥–æ –±–∞—Ä–æ–∏ –±–∞—Ä—Ä–∞—Å”£ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥. –ú–æ –±–∞ –Ω–∞–∑–¥–∏–∫”£ –±–æ —à—É–º–æ –¥–∞—Ä —Ç–∞–º–æ—Å —Ö–æ“≥–µ–º —à—É–¥.",
        'cancel_button': "‚ùå –ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω",
        'back_button': "‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç",
        'operation_cancelled': "‚úÖ –ê–º–∞–ª–∏—ë—Ç –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥.",
        
        # --- –ù–û–í–´–ô –†–ê–ó–î–ï–õ –î–õ–Ø –ú–ï–•–ê–ù–ò–ö–ê ---
        'staff_help_manager': "\n\n*–§–∞—Ä–º–æ–Ω“≥–æ–∏ –º–µ–Ω–µ“∑–µ—Ä:*\n/approverental <ID> - –¢–∞—Å–¥–∏“õ–∏ –¥–∞—Ä—Ö–æ—Å—Ç\n/rejectrental <ID> - –†–∞–¥ –∫–∞—Ä–¥–∞–Ω–∏ –¥–∞—Ä—Ö–æ—Å—Ç\n/listpending - –†”Ø–π—Ö–∞—Ç–∏ –¥–∞—Ä—Ö–æ—Å—Ç“≥–æ–∏ –¥–∞—Ä –∏–Ω—Ç–∏–∑–æ—Ä”£ –±—É–¥–∞",
        'staff_help_mechanic': "\n\n*–§–∞—Ä–º–æ–Ω“≥–æ–∏ –º–µ—Ö–∞–Ω–∏–∫:*\n"
                               "/servicecomplete <ID> - –ò“∑—Ä–æ—à—É–¥–∞ “õ–∞–π–¥ –∫–∞—Ä–¥–∞–Ω–∏ –•–¢ (–¢–û)\n"
                               "/listmaintenance - –†”Ø–π—Ö–∞—Ç–∏ –¥–∞—Ä—Ö–æ—Å—Ç“≥–æ –±–∞—Ä–æ–∏ –•–¢ (–¢–û)\n\n"
                               "*/dailycheck* - –°–∞–Ω“∑–∏—à–∏ “≥–∞—Ä—Ä”Ø–∑–∞–∏ –º–æ—à–∏–Ω\n"
                               "*/acceptfromowner* - “ö–∞–±—É–ª–∏ –º–æ—à–∏–Ω –∞–∑ —Å–æ“≥–∏–±–º—É–ª–∫ (—á–µ–∫-–ª–∏—Å—Ç)\n"
                               "*/givetodriver* - –î–æ–¥–∞–Ω/“ö–∞–±—É–ª –∫–∞—Ä–¥–∞–Ω–∏ –º–æ—à–∏–Ω –∞–∑ —Ä–æ–Ω–∞–Ω–¥–∞\n"
                               "*/edithandover* - –¢–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ “õ–∞–±—É–ª/—Å—É–ø–æ—Ä",
        'staff_help_accountant': "\n\n*–§–∞—Ä–º–æ–Ω“≥–æ–∏ –º—É“≥–æ—Å–∏–±:*\n/addpayment <ID> <–º–∞–±–ª–∞“ì> - –ò–ª–æ–≤–∞ –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—Ä–¥–æ—Ö—Ç\n/generatereport - –≠“∑–æ–¥–∏ “≥–∏—Å–æ–±–æ—Ç",
        'mechanic_dailycheck_cmd': "–°–∞–Ω“∑–∏—à–∏ “≥–∞—Ä—Ä”Ø–∑–∞–∏ –º–æ—à–∏–Ω",
        'mechanic_acceptfromowner_cmd': "“ö–∞–±—É–ª–∏ –º–æ—à–∏–Ω –∞–∑ —Å–æ“≥–∏–±–º—É–ª–∫ (—á–µ–∫-–ª–∏—Å—Ç)",
        'mechanic_givetodriver_cmd': "–î–æ–¥–∞–Ω/“ö–∞–±—É–ª –∫–∞—Ä–¥–∞–Ω–∏ –º–æ—à–∏–Ω –∞–∑ —Ä–æ–Ω–∞–Ω–¥–∞",


        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        'edit_profile_btn': "‚úèÔ∏è –¢–∞“≥—Ä–∏—Ä–∏ –ø—Ä–æ—Ñ–∏–ª",
        'choose_field_to_edit': "‚úèÔ∏è *–ö–∞–¥–æ–º –º–∞—ä–ª—É–º–æ—Ç—Ä–æ —Ç–∞“ì–π–∏—Ä –¥–æ–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?*",
        'prompt_new_value': "‚úçÔ∏è *–ú–∞—ä–ª—É–º–æ—Ç–∏ –Ω–∞–≤—Ä–æ –±–∞—Ä–æ–∏ '{field_name}' –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:*",
        'profile_updated_successfully': "‚úÖ *–ü—Ä–æ—Ñ–∏–ª–∏ —à—É–º–æ –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –Ω–∞–≤—Å–æ–∑”£ —à—É–¥!*",
        'invalid_value': "‚ùóÔ∏è*–ú–∞—ä–ª—É–º–æ—Ç–∏ –Ω–æ–¥—É—Ä—É—Å—Ç.* –õ—É—Ç—Ñ–∞–Ω, –±–æ—Ä–∏ –¥–∏–≥–∞—Ä –∫”Ø—à–∏—à –∫—É–Ω–µ–¥.",
        'field_name': "–ù–æ–º—É –Ω–∞—Å–∞–±",
        'field_phone': "–†–∞“õ–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω",
        'profile_city': '‚ñ™Ô∏è *–®–∞“≥—Ä:* {city}',
        'profile_address': '‚ñ™Ô∏è *–°—É—Ä–æ“ì–∞:* {address}',
        'profile_age': '‚ñ™Ô∏è *–°–∞–Ω–∞–∏ —Ç–∞–≤–∞–ª–ª—É–¥:* {dob}',
        'field_age': "–°–∞–Ω–∞–∏ —Ç–∞–≤–∞–ª–ª—É–¥",
        'field_driving_experience': "–°–æ–±–∏“õ–∞–∏ —Ä–æ–Ω–∞–Ω–¥–∞–≥”£",
        'field_license': "–†–∞“õ–∞–º–∏ —à–∞“≥–æ–¥–∞—Ç–Ω–æ–º–∞",
        'field_address': "–°—É—Ä–æ“ì–∞–∏ –¥–∞“õ–∏“õ", 
        'field_registrator_name': "–ù–æ–º—É –Ω–∞—Å–∞–±–∏ –ë–∞“õ–∞–π–¥–≥–∏—Ä–∞–Ω–¥–∞",
        'field_owner_name': "–ù–æ–º—É –Ω–∞—Å–∞–±–∏ –°–æ“≥–∏–±–º—É–ª–∫",

        # –û–≥–æ“≥–∏–Ω–æ–º–∞“≥–æ –±–∞—Ä–æ–∏ –†–æ–Ω–∞–Ω–¥–∞
        'driver_rent_payment_due': "‚ùóÔ∏è *–•–æ—Ç–∏—Ä—Ä–∞—Å–æ–Ω”£ –±–∞—Ä–æ–∏ –ø–∞—Ä–¥–æ—Ö—Ç*\n\n–õ—É—Ç—Ñ–∞–Ω, –ø–∞—Ä–¥–æ—Ö—Ç–∏ –∏“∑–æ—Ä–∞–∏ –º–æ—à–∏–Ω–∏ `{car_brand}`-—Ä–æ —Ñ–∞—Ä–æ–º”Ø—à –Ω–∞–∫—É–Ω–µ–¥.",
        'driver_maintenance_due_dvs': "üîß *–•–∏–∑–º–∞—Ç—Ä–∞—Å–æ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫”£*\n\n–î–∞—Ä –º–æ—à–∏–Ω–∏ `{car_brand}` (`{car_plate}`) –∏–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω–∏ —Ä–∞–≤“ì–∞–Ω–∏ –º—É“≥–∞—Ä—Ä–∏–∫ –∑–∞—Ä—É—Ä –∞—Å—Ç. –õ—É—Ç—Ñ–∞–Ω, –±–æ –º–µ–Ω–µ“∑–µ—Ä —Ç–∞–º–æ—Å –≥–∏—Ä–µ–¥.",
        'driver_maintenance_due_electro': "üîß *–•–∏–∑–º–∞—Ç—Ä–∞—Å–æ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫”£*\n\n–î–∞—Ä —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ `{car_brand}` (`{car_plate}`) –∏–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω–∏ —Ä–∞–≤“ì–∞–Ω–∏ —Ä–µ–¥—É–∫—Ç–æ—Ä –∑–∞—Ä—É—Ä –∞—Å—Ç. –õ—É—Ç—Ñ–∞–Ω, –±–æ –º–µ–Ω–µ“∑–µ—Ä —Ç–∞–º–æ—Å –≥–∏—Ä–µ–¥.",
        'driver_inspection_due': "üìã *–ê–∑–Ω–∞–∑–∞—Ä–≥—É–∑–∞—Ä–æ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫”£*\n\n–ú”Ø“≥–ª–∞—Ç–∏ –∞–∑–Ω–∞–∑–∞—Ä–≥—É–∑–∞—Ä–æ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏–∏ –¥–∞–≤–ª–∞—Ç–∏–∏ –º–æ—à–∏–Ω–∏ `{car_brand}` (`{car_plate}`) `{date}` –±–∞ –æ—Ö–∏—Ä –º–µ—Ä–∞—Å–∞–¥. –õ—É—Ç—Ñ–∞–Ω, –±–æ –º–µ–Ω–µ“∑–µ—Ä —Ç–∞–º–æ—Å –≥–∏—Ä–µ–¥.",
        'driver_license_due': "üìÑ *–ò“∑–æ–∑–∞—Ç–Ω–æ–º–∞*\n\n–ú”Ø“≥–ª–∞—Ç–∏ —ç—ä—Ç–∏–±–æ—Ä–∏ –∏“∑–æ–∑–∞—Ç–Ω–æ–º–∞ –±–∞—Ä–æ–∏ —Ñ–∞—ä–æ–ª–∏—è—Ç–∏ —Ç–∞–∫—Å”£ –±–∞—Ä–æ–∏ –º–æ—à–∏–Ω–∏ `{car_brand}` (`{car_plate}`) `{date}` –±–∞ –æ—Ö–∏—Ä –º–µ—Ä–∞—Å–∞–¥.",
        'driver_car_is_free': "üöô *–ú–æ—à–∏–Ω–∏ –æ–∑–æ–¥*\n\n–ë–∞ —à—É–º–æ —Ö–∞–±–∞—Ä –º–µ–¥–∏“≥–µ–º, –∫–∏ –º–æ—à–∏–Ω–∏ `{car_brand}` “≥–æ–ª–æ –±–∞—Ä–æ–∏ –∏“∑–æ—Ä–∞ –¥–∞—Å—Ç—Ä–∞—Å –∞—Å—Ç. –ë–∞—Ä–æ–∏ –±–∞–Ω–¥ –∫–∞—Ä–¥–∞–Ω /rent -—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",

        # –û–≥–æ“≥–∏–Ω–æ–º–∞“≥–æ –±–∞—Ä–æ–∏ –°–æ“≥–∏–±–º—É–ª–∫
        'owner_driver_assigned': "üë§ *–†–æ–Ω–∞–Ω–¥–∞ —Ç–∞—ä–∏–Ω —à—É–¥*\n\n–ë–∞ –º–æ—à–∏–Ω–∏ —à—É–º–æ `{car_brand}` (`{car_plate}`) —Ä–æ–Ω–∞–Ω–¥–∞–∏ –Ω–∞–≤ —Ç–∞—ä–∏–Ω —à—É–¥: {driver_name} (—Ç–µ–ª: `{driver_phone}`).",
        'owner_maintenance_completed': "‚úÖ *–•–∏–∑–º–∞—Ç—Ä–∞—Å–æ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫”£ –∞–Ω“∑–æ–º —ë—Ñ—Ç*\n\n–ö–æ—Ä“≥–æ–∏ —Ö–∏–∑–º–∞—Ç—Ä–∞—Å–æ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏–∏ –º–æ—à–∏–Ω–∏ —à—É–º–æ `{car_brand}` (`{car_plate}`) –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∞–Ω“∑–æ–º —ë—Ñ—Ç–∞–Ω–¥.",
        'owner_license_due': "üìÑ *–ò“∑–æ–∑–∞—Ç–Ω–æ–º–∞*\n\n–î–∏“õ“õ–∞—Ç! –ú”Ø“≥–ª–∞—Ç–∏ —ç—ä—Ç–∏–±–æ—Ä–∏ –∏“∑–æ–∑–∞—Ç–Ω–æ–º–∞ –±–∞—Ä–æ–∏ —Ñ–∞—ä–æ–ª–∏—è—Ç–∏ —Ç–∞–∫—Å”£ –±–∞—Ä–æ–∏ –º–æ—à–∏–Ω–∏ —à—É–º–æ `{car_brand}` (`{car_plate}`) `{date}` –±–∞ –æ—Ö–∏—Ä –º–µ—Ä–∞—Å–∞–¥.",
        'owner_payout_received': "üí∞ *–ú–∞–±–ª–∞“ì –≤–æ—Ä–∏–¥ —à—É–¥*\n\n–ë–∞ “≥–∏—Å–æ–±–∏ —à—É–º–æ –±–∞—Ä–æ–∏ –∏“∑–æ—Ä–∞–∏ –º–æ—à–∏–Ω–∏ `{car_brand}` –º–∞–±–ª–∞“ì–∏ *{amount} —Å–æ–º–æ–Ω”£* –≤–æ—Ä–∏–¥ –∫–∞—Ä–¥–∞ —à—É–¥.",
        'owner_inspection_due': "üìã *–ê–∑–Ω–∞–∑–∞—Ä–≥—É–∑–∞—Ä–æ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫”£*\n\n–î–∏“õ“õ–∞—Ç! –ú”Ø“≥–ª–∞—Ç–∏ –∞–∑–Ω–∞–∑–∞—Ä–≥—É–∑–∞—Ä–æ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏–∫–∏–∏ –¥–∞–≤–ª–∞—Ç–∏–∏ –º–æ—à–∏–Ω–∏ —à—É–º–æ `{car_brand}` (`{car_plate}`) `{date}` –±–∞ –æ—Ö–∏—Ä –º–µ—Ä–∞—Å–∞–¥.",
        
        'choose_rent_type': '–õ—É—Ç—Ñ–∞–Ω, –Ω–∞–º—É–¥–∏ –∏“∑–æ—Ä–∞—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:',
        'short_term': '–ö”Ø—Ç–æ“≥–º—É–¥–¥–∞—Ç',
        'long_term': '–î–∞—Ä–æ–∑–º—É–¥–¥–∞—Ç',
        'from_6_months': '–ê–∑ 6 –º–æ“≥',
        'up_to_1_year': '–¢–æ 1 —Å–æ–ª',
        'choose_number_of_days': "üî¢ –ú–∏“õ–¥–æ—Ä–∏ —Ä”Ø–∑“≥–æ–∏ –∏“∑–æ—Ä–∞—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", 
        'invalid_vin': "‚ùóÔ∏è*–•–∞—Ç–æ–≥”£.* VIN-–∫–æ–¥ –±–æ—è–¥ –∞–∑ 17 –∞–ª–æ–º–∞—Ç –∏–±–æ—Ä–∞—Ç –±–æ—à–∞–¥ (“≥–∞—Ä—Ñ“≥–æ–∏ –ª–æ—Ç–∏–Ω”£ –≤–∞ —Ä–∞“õ–∞–º“≥–æ, –±–∞ “ì–∞–π—Ä –∞–∑ I, O, Q). –õ—É—Ç—Ñ–∞–Ω, —Å–∞–Ω“∑–∏–¥–∞, –¥—É–±–æ—Ä–∞ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.",
        'edit_as_client_btn': "‚úçÔ∏è “≤–∞–º—á—É–Ω –†–æ–Ω–∞–Ω–¥–∞ —Ç–∞“≥—Ä–∏—Ä –∫–∞—Ä–¥–∞–Ω",
        'edit_as_owner_btn': "üöó “≤–∞–º—á—É–Ω –°–æ“≥–∏–±–º—É–ª–∫ —Ç–∞“≥—Ä–∏—Ä –∫–∞—Ä–¥–∞–Ω",
        'not_a_client_error': "‚ùóÔ∏è –®—É–º–æ “≥–∞–º—á—É–Ω —Ä–æ–Ω–∞–Ω–¥–∞ –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ –Ω–∞—à—É–¥–∞–µ–¥. –ë–∞—Ä–æ–∏ –±–∞“õ–∞–π–¥–≥–∏—Ä”£ /register -—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",
        'not_a_owner_error': "‚ùóÔ∏è –®—É–º–æ “≥–∞–º—á—É–Ω —Å–æ“≥–∏–±–º—É–ª–∫ –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ –Ω–∞—à—É–¥–∞–µ–¥. –ë–∞—Ä–æ–∏ –±–∞“õ–∞–π–¥–≥–∏—Ä”£ /owner_register -—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.",
        'consent_prompt': "–ë–æ –ø–∞—Ö—à –Ω–∞–º—É–¥–∞–Ω–∏ —Ç—É–≥–º–∞–∏ ¬´–¢–∞—Å–¥–∏“õ –º–µ–∫—É–Ω–∞–º¬ª, –º–∞–Ω —Ä–æ–∑–∏–≥–∏–∏ —Ö—É–¥—Ä–æ –±–∞—Ä–æ–∏ –∫–æ—Ä–∫–∞—Ä–¥–∏ –º–∞—ä–ª—É–º–æ—Ç–∏ —à–∞—Ö—Å”£ –≤–∞ –≥–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ –ø–∞—ë–º–∞–∫“≥–æ (SMS) –∞–∑ —à–∏—Ä–∫–∞—Ç–∏ –º–æ –∏–∑“≥–æ—Ä –º–µ–Ω–∞–º–æ—è–º.\n\n–õ—É—Ç—Ñ–∞–Ω, —Ä–æ–∑–∏–≥–∏–∏ —Ö—É–¥—Ä–æ —Ç–∞—Å–¥–∏“õ –∫—É–Ω–µ–¥.",
        'consent_confirm_btn': "‚úÖ –¢–∞—Å–¥–∏“õ –º–µ–∫—É–Ω–∞–º",
        
        # --- "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ" (TJ) ---
        'admin_btn_report_error': "‚úâÔ∏è –î–∞—Ä –±–æ—Ä–∞–∏ —Ö–∞—Ç–æ–≥”£ —Ö–∞–±–∞—Ä –¥–æ–¥–∞–Ω",
        'admin_prompt_custom_error': "‚úçÔ∏è –ú–∞—Ç–Ω–∏ –ø–∞—ë–º—Ä–æ –±–∞—Ä–æ–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞ (ID: {target_id}) –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.\n\n_(–ü–∞—ë–º–∏ —à—É–º–æ –∞–∑ –Ω–æ–º–∏ –±–æ—Ç –±–∞ ”Ø —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ –º–µ—à–∞–≤–∞–¥. –ë–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω /cancel –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥)_",
        'admin_custom_error_sent': "‚úÖ –ü–∞—ë–º –±–∞ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞–∏ {target_id} —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.",
        'admin_select_error_reason': "–°–∞–±–∞–±—Ä–æ –±–∞—Ä–æ–∏ –æ–≥–æ“≥ –∫–∞—Ä–¥–∞–Ω–∏ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        'error_reason_photo': "–ê–∫—Å“≥–æ–∏ –Ω–æ—Ä–∞–≤—à–∞–Ω–∏ “≥—É“∑“∑–∞—Ç“≥–æ",
        'error_reason_mismatch': "–ú–∞—ä–ª—É–º–æ—Ç –¥–∞—Ä —Å–∞–≤–æ–ª–Ω–æ–º–∞ –≤–∞ “≥—É“∑“∑–∞—Ç“≥–æ –º—É–≤–æ—Ñ–∏“õ –Ω–µ—Å—Ç",
        'error_reason_other': "–î–∏–≥–∞—Ä (—à–∞—Ö—Å–∞–Ω —Ç–∞–º–æ—Å –≥–∏—Ä–∏—Ñ—Ç–∞–Ω)",
        'admin_btn_cancel_error': "–ë–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω",
        'admin_error_reported': "‚úÖ –û–≥–æ“≥”£ –¥–∞—Ä –±–æ—Ä–∞–∏ —Ö–∞—Ç–æ–≥”£ –±–∞ –∏—Å—Ç–∏—Ñ–æ–¥–∞–±–∞—Ä–∞–Ω–¥–∞ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.",
        'user_error_notification_prefix': "‚ùóÔ∏è *–û–≥–æ“≥”£ –æ–∏–¥–∏ –¥–∞—Ä—Ö–æ—Å—Ç–∏ –±–∞“õ–∞–π–¥–≥–∏—Ä–∏–∏ —à—É–º–æ*",
        'error_message_photo': "–°–∞–ª–æ–º! –ú–æ –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ—Ä–æ –±–∞—Ä—Ä–∞—Å”£ –∫–∞—Ä–¥–µ–º. –ú—É—Ç–∞–∞—Å—Å–∏—Ñ–æ–Ω–∞, –∞–∫—Å“≥–æ–∏ “≥—É“∑“∑–∞—Ç“≥–æ–∏ —à—É–º–æ –Ω–æ—Ä–∞–≤—à–∞–Ω —ë —Ö–∏—Ä–∞ –±–∞—Ä–æ–º–∞–¥–∞–Ω–¥. –õ—É—Ç—Ñ–∞–Ω, –¥–∞—Ä —Ä–∞–≤—à–∞–Ω–∏–∏ —Ö—É–± –∞–∫—Å“≥–æ–∏ –Ω–∞–≤ –≤–∞ —Ä–∞–≤—à–∞–Ω –≥–∏—Ä–∏—Ñ—Ç–∞, –±–æ –º–æ —Ç–∞–≤–∞—Å—Å—É—Ç–∏ /message –¥—É–±–æ—Ä–∞ –¥–∞—Ä —Ç–∞–º–æ—Å —à–∞–≤–µ–¥, —Ç–æ –º–æ –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ—Ä–æ –Ω–∞–≤ –∫—É–Ω–µ–º.",
        'error_message_mismatch': "–°–∞–ª–æ–º! –ú–æ –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ—Ä–æ –±–∞—Ä—Ä–∞—Å”£ –∫–∞—Ä–¥–µ–º –≤–∞ –Ω–æ–º—É–≤–æ—Ñ–∏“õ–∞—Ç–∏—Ä–æ –±–∞–π–Ω–∏ –º–∞—ä–ª—É–º–æ—Ç–µ, –∫–∏ —à—É–º–æ –¥–∞—Ä —Å–∞–≤–æ–ª–Ω–æ–º–∞ –≤–æ—Ä–∏–¥ –∫–∞—Ä–¥–µ–¥ (–º–∞—Å–∞–ª–∞–Ω, –ù–ù–ù —ë —Ä–∞“õ–∞–º–∏ —à–∞“≥–æ–¥–∞—Ç–Ω–æ–º–∞–∏ —Ä–æ–Ω–∞–Ω–¥–∞–≥”£) –≤–∞ –º–∞—ä–ª—É–º–æ—Ç–∏ –¥–∞—Ä –∞–∫—Å“≥–æ–∏ “≥—É“∑“∑–∞—Ç“≥–æ –±—É–¥–∞ –º—É—à–æ“≥–∏–¥–∞ –∫–∞—Ä–¥–µ–º. –õ—É—Ç—Ñ–∞–Ω, –º–∞—ä–ª—É–º–æ—Ç—Ä–æ —Å–∞–Ω“∑–µ–¥ –≤–∞ –±–æ –º–æ —Ç–∞–≤–∞—Å—Å—É—Ç–∏ /message –¥–∞—Ä —Ç–∞–º–æ—Å —à–∞–≤–µ–¥, —Ç–æ –º–æ —Å–∞–≤–æ–ª–Ω–æ–º–∞–∏ —à—É–º–æ—Ä–æ –∏—Å–ª–æ“≥ –∫—É–Ω–µ–º.",
        'error_message_other': "–°–∞–ª–æ–º! –û–∏–¥ –±–∞ –¥–∞—Ä—Ö–æ—Å—Ç–∏ –±–∞“õ–∞–π–¥–≥–∏—Ä–∏–∏ —à—É–º–æ —è–∫—á–∞–Ω–¥ —Å–∞–≤–æ–ª“≥–æ –ø–∞–π–¥–æ —à—É–¥–∞–Ω–¥. –õ—É—Ç—Ñ–∞–Ω, –±–∞—Ä–æ–∏ –∞–Ω–∏“õ –∫–∞—Ä–¥–∞–Ω–∏ —Ç–∞—Ñ—Å–∏–ª–æ—Ç –±–æ –º–µ–Ω–µ“∑–µ—Ä–∏ –º–æ —Ç–∞–º–æ—Å –≥–∏—Ä–µ–¥. –ú–∞—ä–ª—É–º–æ—Ç –±–∞—Ä–æ–∏ —Ç–∞–º–æ—Å: /contact",
        'registration_rejected_client': "‚ùå –ú—É—Ç–∞–∞—Å—Å–∏—Ñ–æ–Ω–∞, –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ —Ä–∞–¥ –∫–∞—Ä–¥–∞ —à—É–¥. –õ—É—Ç—Ñ–∞–Ω, –∫–∞–º–±—É–¥–∏“≥–æ—Ä–æ –∏—Å–ª–æ“≥ –∫—É–Ω–µ–¥ –≤–∞ –∞–∑ –Ω–∞–≤ –±–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ —Ñ–∞—Ä–º–æ–Ω–∏ /register –∞–∑ “õ–∞–π–¥ –≥—É–∑–∞—Ä–µ–¥.",
        'registration_rejected_owner': "‚ùå –ú—É—Ç–∞–∞—Å—Å–∏—Ñ–æ–Ω–∞, –¥–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ —Ä–∞–¥ –∫–∞—Ä–¥–∞ —à—É–¥. –õ—É—Ç—Ñ–∞–Ω, –∫–∞–º–±—É–¥–∏“≥–æ—Ä–æ –∏—Å–ª–æ“≥ –∫—É–Ω–µ–¥ –≤–∞ –∞–∑ –Ω–∞–≤ “≥–∞–º—á—É–Ω —Å–æ“≥–∏–±–º—É–ª–∫ –±–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞–∏ —Ñ–∞—Ä–º–æ–Ω–∏ /owner_register –∞–∑ “õ–∞–π–¥ –≥—É–∑–∞—Ä–µ–¥.",
        'registration_rejected_owner': "...",
        'city_selected': "‚úÖ –ò–Ω—Ç–∏—Ö–æ–± —à—É–¥: {city_name}", 
        'category_selected': "‚úÖ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–Ω—Ç–∏—Ö–æ–± —à—É–¥: {category}*", 
        'choice_selected': "‚úÖ –ò–Ω—Ç–∏—Ö–æ–± —à—É–¥.",
        'cancel_hint': "\n\n_(–ë–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω /cancel-—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥)_",
        'already_registered_as_driver': "‚úÖ –®—É–º–æ –∞–ª–ª–∞–∫–∞–π “≥–∞–º—á—É–Ω –†–æ–Ω–∞–Ω–¥–∞ –±–∞ “õ–∞–π–¥ –≥–∏—Ä–∏—Ñ—Ç–∞ —à—É–¥–∞–µ–¥.",
        'transmission_auto': "–ê–≤—Ç–æ–º–∞—Ç", 
        'transmission_manual': "–ú–µ—Ö–∞–Ω–∏–∫–∞", 
        'transmission_selected': "‚úÖ *–ò–Ω—Ç–∏—Ö–æ–± —à—É–¥: {choice_text}*", 
        'main_menu_prompt': "üëá –ê–º–∞–ª—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        'i_am_the_owner_btn': "üë§ –ú–∞–Ω —Ö—É–¥–∞–º —Å–æ“≥–∏–±–º—É–ª–∫ “≥–∞—Å—Ç–∞–º",
   
    }
}


# --- –ì–õ–ê–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = os.environ.get('BOT_TOKEN') or '7820114439:AAFDaaUnkmCfJy7KFr4A1lO2PUXcX1HyH8k'
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
MAIN_ADMIN_CHAT_ID = '5573234528'

# --- –§–ê–ô–õ–´ –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
BASE_URL = f'https://api.telegram.org/bot{TOKEN}'
USERS_FILE = 'users.json'
ADMIN_FILE = 'admin.json'
RENTALS_FILE = 'rentals.json'
CARS_FILE = 'cars.json'
OWNER_CARS_FILE = 'owner_cars.json'
STAFF_FILE = 'staff.json'


# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
CITIES = [
    {'key': 'khujand',   'ru': '–•—É–¥–∂–∞–Ω–¥',      'tj': '–•—É“∑–∞–Ω–¥'},
    {'key': 'ghafurov',  'ru': '–ë. –ì–∞—Ñ—É—Ä–æ–≤',   'tj': '–ë. “í–∞—Ñ—É—Ä–æ–≤'},
    {'key': 'guliston',  'ru': '–ì—É–ª–∏—Å—Ç–∞–Ω',     'tj': '–ì—É–ª–∏—Å—Ç–æ–Ω'},
    {'key': 'istaravshan','ru': '–ò—Å—Ç–∞—Ä–∞–≤—à–∞–Ω',   'tj': '–ò—Å—Ç–∞—Ä–∞–≤—à–∞–Ω'},
    {'key': 'zafarobod', 'ru': '–ó–∞—Ñ–∞—Ä–∞–±–∞–¥',    'tj': '–ó–∞—Ñ–∞—Ä–æ–±–æ–¥'},
    {'key': 'asht',      'ru': '–ê—à—Ç',          'tj': '–ê—à—Ç'},
    {'key': 'rasulov',   'ru': '–î–∂. –†–∞—Å—É–ª–æ–≤',  'tj': '“∂. –†–∞—Å—É–ª–æ–≤'},
    {'key': 'konibodom', 'ru': '–ö–∞–Ω–∏–±–∞–¥–∞–º',    'tj': '–ö–æ–Ω–∏–±–æ–¥–æ–º'},
    {'key': 'spitamen',  'ru': '–°–ø–∏—Ç–∞–º–µ–Ω',     'tj': '–°–ø–∏—Ç–∞–º–µ–Ω'},
    {'key': 'istiqlol',  'ru': '–ò—Å—Ç–∏–∫–ª–æ–ª',     'tj': '–ò—Å—Ç–∏“õ–ª–æ–ª'},
    {'key': 'buston',    'ru': '–ë—É—Å—Ç–æ–Ω',       'tj': '–ë—É—Å—Ç–æ–Ω'},
    {'key': 'shahriston','ru': '–®–∞—Ö—Ä–∏—Å—Ç–∞–Ω',    'tj': '–®–∞“≥—Ä–∏—Å—Ç–æ–Ω'},
    {'key': 'devashtich','ru': '–î–µ–≤–∞—à—Ç–∏—á',     'tj': '–î–µ–≤–∞—à—Ç–∏—á'},
    {'key': 'ayni',      'ru': '–ê–π–Ω–∏',         'tj': '–ê–π–Ω”£'},
]

# –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—à–∏–Ω
INITIAL_CARS_DATA = {
    # --- Hyundai ---
    "Hyundai Avante": {
        "description": "–ù–∞–¥—ë–∂–Ω—ã–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Å–µ–¥–∞–Ω, –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–æ–π –µ–∑–¥—ã –ø–æ –•—É–¥–∂–∞–Ω–¥—É.",
        "local_image_paths": ["images/hyundai_avante.webp", "images/hyundai_avante.webp", "images/hyundai_avante.webp"],
        "prices": [250, 1500, 5000], "year": 2020, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "1.6L", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Hyundai Sonata": {
        "description": "–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-—Å–µ–¥–∞–Ω —Å —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –±–æ–≥–∞—Ç—ã–º –æ—Å–Ω–∞—â–µ–Ω–∏–µ–º.",
        "local_image_paths": ["images/HyundaiSonata.jpg", "images/HyundaiSonata.jpg", "images/HyundaiSonata.jpg"],
        "prices": [380, 2300, 7500], "year": 2021, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.5L", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Hyundai Elantra": {
        "description": "–°—Ç–∏–ª—å–Ω—ã–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Å–µ–¥–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è –≥–æ—Ä–æ–¥–∞, —Ç–∞–∫ –∏ –¥–ª—è —Ç—Ä–∞—Å—Å—ã.",
        "local_image_paths": ["images/HyundaiElantra.jpg", "images/HyundaiElantra.jpg", "images/HyundaiElantra.jpg"],
        "prices": [300, 1800, 6000], "year": 2022, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "1.6L", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    # --- BYD ---
    "BYD Song Plus": {
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä —Å –±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º —Ö–æ–¥–∞. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.",
        "local_image_paths": ["images/BYDSongPlus.webp", "images/BYDSongPlus.webp", "images/BYDSongPlus.webp"],
        "prices": [380, 2280, 7600], "year": 2022, "fuel_type": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "engine": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä 135 –∫–í—Ç", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "BYD Dolphin": {
        "description": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ —é—Ä–∫–∏–π –≥–æ—Ä–æ–¥—Å–∫–æ–π —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.",
        "local_image_paths": ["images/BYDDolphin.jpg", "images/BYDDolphin.jpg", "images/BYDDolphin.jpg"],
        "prices": [320, 1900, 6500], "year": 2023, "fuel_type": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "engine": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä 70 –∫–í—Ç", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    # --- Toyota ---
    "Toyota Camry": {
        "description": "–ö–ª–∞—Å—Å–∏–∫–∞ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞. –ü–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π, —Ç–∞–∫ –∏ –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö –ø–æ–µ–∑–¥–æ–∫.",
        "local_image_paths": ["images/Toyota-Camry.jpg", "images/Toyota-Camry.jpg", "images/Toyota-Camry.jpg"],
        "prices": [360, 2160, 7200], "year": 2021, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.5L", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Toyota Corolla": {
        "description": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏. –ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Å–µ–¥–∞–Ω –Ω–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∂–∏–∑–Ω–∏.",
        "local_image_paths": ["images/toyotaCorolla.webp", "images/toyotaCorolla.webp", "images/toyotaCorolla.webp"],
        "prices": [320, 1950, 6800], "year": 2020, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "1.8L", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Toyota Land Cruiser Prado": {
        "description": "–ú–æ—â–Ω—ã–π –∏ –ø—Ä–æ—Ö–æ–¥–∏–º—ã–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –¥–ª—è –ª—é–±—ã—Ö –¥–æ—Ä–æ–≥. –°–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ –∫–æ–º—Ñ–æ—Ä—Ç –∏ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
        "local_image_paths": ["images/ToyotaPrado.jpg", "images/ToyotaPrado.jpg", "images/ToyotaPrado.jpg"],
        "prices": [700, 4500, 15000], "year": 2019, "fuel_type": "–î–∏–∑–µ–ª—å", "engine": "2.8L", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 7
    },
    # --- Opel ---
    "Opel Zafira": {
        "description": "–ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –º–∏–Ω–∏–≤—ç–Ω, –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–µ–º–µ–π–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –∏–ª–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø.",
        "local_image_paths": ["images/opel.jpg", "images/opel.jpg", "images/opel.jpg"],
        "prices": [280, 1680, 5600], "year": 2019, "fuel_type": "–î–∏–∑–µ–ª—å", "engine": "2.0L", "transmission": "–ú–µ—Ö–∞–Ω–∏–∫–∞", "seats": 7
    },
     "Opel Astra": {
        "description": "–ù–µ–º–µ—Ü–∫–∏–π —Ö—ç—Ç—á–±–µ–∫ —Å —Ç–æ—á–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –ø–æ–¥–≤–µ—Å–∫–æ–π. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –µ–∑–¥—ã.",
        "local_image_paths": ["images/OpeAstra.jpg", "images/OpeAstra.jpg", "images/OpeAstra.jpg"],
        "prices": [300, 1750, 5800], "year": 2019, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "1.4L Turbo", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    # --- Mercedes-Benz ---
    "Mercedes-Benz E-Class": {
        "description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å–µ–¥–∞–Ω –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –∏ –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤. –°–æ—á–µ—Ç–∞–Ω–∏–µ —Å—Ç–∏–ª—è, –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ –Ω–µ–º–µ—Ü–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.",
        "local_image_paths": ["images/MercedesE-Class.webp", "images/MercedesE-Class.webp", "images/MercedesE-Class.webp"],
        "prices": [500, 3200, 11000], "year": 2021, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.0L Turbo", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Mercedes-Benz C-Class": {
        "description": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–µ–¥–∞–Ω, —Å–æ—á–µ—Ç–∞—é—â–∏–π –≤ —Å–µ–±–µ —Ä–æ—Å–∫–æ—à—å —Å—Ç–∞—Ä—à–∏—Ö –º–æ–¥–µ–ª–µ–π –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.",
        "local_image_paths": ["images/MercedesC-Class.jpg","images/MercedesC-Class.jpg","images/MercedesC-Class.jpg"],
        "prices": [450, 2900, 10000], "year": 2022, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.0L Turbo", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Mercedes-Benz GLC": {
        "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏ —Ä–æ—Å–∫–æ—à–Ω—ã–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∫–∞–∫ –≤ –≥–æ—Ä–æ–¥–µ, —Ç–∞–∫ –∏ –∑–∞ –µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞–º–∏.",
        "local_image_paths": ["images/Mercedes-BenzGLC.png", "images/Mercedes-BenzGLC.png", "images/Mercedes-BenzGLC.png"],
        "prices": [650, 4200, 14000], "year": 2021, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.0L Turbo", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    # --- BMW ---
     "BMW 5 Series": {
        "description": "–î–∏–Ω–∞–º–∏—á–Ω—ã–π –∏ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–π —Å–µ–¥–∞–Ω...",
        "local_image_paths": ["images/BMW5Series.jpg", "images/BMW5Series.jpg", "images/BMW5Series.jpg"],
        "telegram_file_ids": [],
        "prices": [550, 3500, 12000],
        "year": 2020,
        "fuel_type": "–ë–µ–Ω–∑–∏–Ω",
        "engine": "2.0L TwinPower Turbo",
        "transmission": "–ê–≤—Ç–æ–º–∞—Ç",
        "seats": 5
    },
    "BMW 3 Series": {
        "description": "–≠—Ç–∞–ª–æ–Ω —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç–∏ –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –¥—É—Ö–∞ –≤ –∫–ª–∞—Å—Å–µ —Å–µ–¥–∞–Ω–æ–≤. –ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç –≤–æ–¥–∏—Ç—å.",
        "local_image_paths": ["images/BMW3Series.jpg", "images/BMW3Series.jpg", "images/BMW3Series.jpg"],
        "prices": [480, 3100, 10500], "year": 2021, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.0L TwinPower Turbo", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "BMW X5": {
        "description": "–ë–æ–ª—å—à–æ–π –∏ –º–æ—â–Ω—ã–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—á–µ—Ç–∞–µ—Ç –≤ —Å–µ–±–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä BMW –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å SUV.",
        "local_image_paths": ["images/bmw5.jpg", "images/bmw5.jpg", "images/bmw5.jpg"],
        "prices": [800, 5000, 17000], "year": 2020, "fuel_type": "–î–∏–∑–µ–ª—å", "engine": "3.0L", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    # --- –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ (Aion, Weltmeister) ---
    "Aion S": {
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ—Å–µ–¥–∞–Ω —Å –±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º —Ö–æ–¥–∞. –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –∏ —Ç–∏—Ö–∏–π, –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –≥–æ—Ä–æ–¥–∞.",
        "local_image_paths": ["images/AionS.jpg", "images/AionS.jpg", "images/AionS.jpg"],
        "prices": [400, 2400, 8000], "year": 2023, "fuel_type": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "engine": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä 150 –∫–í—Ç", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Aion Y": {
        "description": "–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω—ã–π –∏ –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –∫–æ–º–ø–∞–∫—Ç–≤—ç–Ω –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—Ç—è–≥–µ. –ù–µ–æ–±—ã—á–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –æ–≥—Ä–æ–º–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ—Å—Ç–æ—Ä.",
        "local_image_paths": ["images/AionY.jpg", "images/AionY.jpg", "images/AionY.jpg"],
        "prices": [420, 2500, 8500], "year": 2023, "fuel_type": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "engine": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä 135 –∫–í—Ç", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Weltmeister W6": {
        "description": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä —Å –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–º —Å–∞–ª–æ–Ω–æ–º –∏ –±–æ–≥–∞—Ç—ã–º –æ—Å–Ω–∞—â–µ–Ω–∏–µ–º. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–µ–º–µ–π–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.",
        "local_image_paths": ["images/WeltmeisterW6.jpeg", "images/WeltmeisterW6.jpeg", "images/WeltmeisterW6.jpeg"],
        "prices": [450, 2700, 9000], "year": 2022, "fuel_type": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "engine": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä 160 –∫–í—Ç", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Weltmeister EX5": {
        "description": "–ù–∞–¥–µ–∂–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä —Å —Ö–æ—Ä–æ—à–∏–º –∑–∞–ø–∞—Å–æ–º —Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Å–µ–º—å–∏.",
        "local_image_paths": ["images/WeltmeisterEX5.jpg", "images/WeltmeisterEX5.jpg", "images/WeltmeisterEX5.jpg"],
        "prices": [430, 2600, 8800], "year": 2021, "fuel_type": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "engine": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä 160 –∫–í—Ç", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    # --- Kia ---
    "Kia K5": {
        "description": "–°—Ç–∏–ª—å–Ω—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ–¥–∞–Ω —Å —è—Ä–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º —Å–∞–ª–æ–Ω–æ–º. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫.",
        "local_image_paths": ["images/KiaK5.jpg", "images/KiaK5.jpg", "images/KiaK5.jpg"],
        "prices": [350, 2100, 7000], "year": 2022, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.0L", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Kia Sportage": {
        "description": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä —Å–æ —Å–º–µ–ª—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –≥–æ—Ä–æ–¥–∞ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.",
        "local_image_paths": ["images/KiaSportage.jpg", "images/KiaSportage.jpg", "images/KiaSportage.jpg"],
        "prices": [400, 2400, 8000], "year": 2022, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.0L", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Kia Rio": {
        "description": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–µ–¥–∞–Ω, –æ–¥–∏–Ω –∏–∑ –ª–∏–¥–µ—Ä–æ–≤ –≤ —Å–≤–æ–µ–º –∫–ª–∞—Å—Å–µ. –ù–∏–∑–∫–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞—è —Ü–µ–Ω–∞ –∞—Ä–µ–Ω–¥—ã.",
        "local_image_paths": ["images/KiaRio.webp", "images/KiaRio.webp", "images/KiaRio.webp"],
        "prices": [280, 1600, 5500], "year": 2021, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "1.6L", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    # --- Lexus ---
    "Lexus RX 350": {
        "description": "–ù–∞–¥–µ–∂–Ω—ã–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π –ø—Ä–µ–º–∏—É–º-–∫—Ä–æ—Å—Å–æ–≤–µ—Ä. –ü–ª–∞–≤–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ –∏ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–µ–ª–∞—é—Ç –∫–∞–∂–¥—É—é –ø–æ–µ–∑–¥–∫—É –ø—Ä–∏—è—Ç–Ω–æ–π.",
        "local_image_paths": ["images/LexusRX350.jpg", "images/LexusRX350.jpg", "images/LexusRX350.jpg"],
        "prices": [600, 3800, 13000], "year": 2020, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "3.5L V6", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Lexus ES 350": {
        "description": "–†–æ—Å–∫–æ—à–Ω—ã–π —Å–µ–¥–∞–Ω, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω—ã–º –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∏ –ø–ª–∞–≤–Ω–æ—Å—Ç—å—é —Ö–æ–¥–∞. –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö –ø–æ–µ–∑–¥–æ–∫.",
        "local_image_paths": ["images/LexusES350.webp", "images/LexusES350.webp", "images/LexusES350.webp"],
        "prices": [580, 3700, 12500], "year": 2021, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "3.5L V6", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    # --- Volkswagen ---
    "Volkswagen Passat": {
        "description": "–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∏ –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π –Ω–µ–º–µ—Ü–∫–∏–π —Å–µ–¥–∞–Ω. –û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫–æ–º—Ñ–æ—Ä—Ç–æ–º, —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å—é –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å—é.",
        "local_image_paths": ["images/VolkswagenPassat.jpg", "images/VolkswagenPassat.jpg", "images/VolkswagenPassat.jpg"],
        "prices": [340, 2000, 6800], "year": 2019, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "1.8L TSI", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Volkswagen Jetta": {
        "description": "–ù–∞–¥–µ–∂–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Å–µ–¥–∞–Ω —Å –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–º —Å–∞–ª–æ–Ω–æ–º –∏ –±–æ–ª—å—à–∏–º –±–∞–≥–∞–∂–Ω–∏–∫–æ–º. –ù–µ–º–µ—Ü–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ü–µ–Ω–µ.",
        "local_image_paths": ["images/VolkswagenJetta.avif", "images/VolkswagenJetta.avif", "images/VolkswagenJetta.avif"],
        "prices": [320, 1900, 6500], "year": 2020, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "1.4L TSI", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Volkswagen Tiguan": {
        "description": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä. –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∫–æ–º—Ñ–æ—Ä—Ç–∞, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç–∏.",
        "local_image_paths": ["images/VolkswagenTiguan.webp", "images/VolkswagenTiguan.webp", "images/VolkswagenTiguan.webp"],
        "prices": [450, 2800, 9500], "year": 2020, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.0L TSI", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    # --- Audi ---
    "Audi A6": {
        "description": "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-—Å–µ–¥–∞–Ω —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏ –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–º. –ü–æ–¥—á–µ—Ä–∫–Ω–µ—Ç –≤–∞—à —Å—Ç–∞—Ç—É—Å –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç –∫–æ–º—Ñ–æ—Ä—Ç.",
        "local_image_paths": ["images/AudiA6.webp", "images/AudiA6.webp", "images/AudiA6.webp"],
        "prices": [520, 3300, 11500], "year": 2020, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.0L TFSI", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Audi A4": {
        "description": "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å–µ–¥–∞–Ω —Å –≤—ã–≤–µ—Ä–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º, –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–º –∏ –æ—Ç–ª–∏—á–Ω–æ–π —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å—é.",
        "local_image_paths": ["images/AudiA4.avif", "images/AudiA4.avif", "images/AudiA4.avif"],
        "prices": [490, 3150, 10800], "year": 2021, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.0L TFSI", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    "Audi Q5": {
        "description": "–°—Ç–∏–ª—å–Ω—ã–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞. –ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–∑–º–µ—Ä–æ–º, –º–æ—â–Ω–æ—Å—Ç—å—é –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏.",
        "local_image_paths": ["images/AudiQ5.jpg", "images/AudiQ5.jpg", "images/AudiQ5.jpg"],
        "prices": [680, 4300, 14500], "year": 2020, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "2.0L TFSI", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
    # --- Daewoo ---
    "Daewoo Gentra": {
        "description": "–ü—Ä–æ—Å—Ç–æ–π, –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –æ—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ–¥–∞–Ω. –ò–¥–µ–∞–ª—å–Ω—ã–π '—Ä–∞–±–æ—á–∏–π' –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –Ω–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–π –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.",
        "local_image_paths": ["images/DaewooGentra.webp", "images/DaewooGentra.webp", "images/DaewooGentra.webp"],
        "prices": [200, 1200, 4000], "year": 2018, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "1.5L", "transmission": "–ú–µ—Ö–∞–Ω–∏–∫–∞", "seats": 5
    },
    "Daewoo Nexia R3": {
        "description": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ —Å–µ–¥–∞–Ω–∞. –ü—Ä–æ—Å—Ç–æ–π, –Ω–µ–¥–æ—Ä–æ–≥–æ–π –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã.",
        "local_image_paths": ["images/DaewooNexiaR3.jpg", "images/DaewooNexiaR3.jpg", "images/DaewooNexiaR3.jpg"],
        "prices": [220, 1300, 4200], "year": 2019, "fuel_type": "–ë–µ–Ω–∑–∏–Ω", "engine": "1.5L", "transmission": "–ê–≤—Ç–æ–º–∞—Ç", "seats": 5
    },
}

class State(Enum):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    AWAITING_NAME = 1
    AWAITING_PHONE = 2
    AWAITING_CITY = 3
    AWAITING_AGE = 4
    AWAITING_DRIVING_EXPERIENCE = 5
    AWAITING_LICENSE = 6
    AWAITING_LICENSE_CATEGORY = 7
    AWAITING_PREFERRED_CAR_TYPE = 8
    AWAITING_TAXI_EXPERIENCE = 9
    AWAITING_DRIVER_ID = 10
    AWAITING_DEPOSIT = 11
    AWAITING_PASSPORT_PHOTO = 12

    AWAITING_RENT_CAR = 13
    AWAITING_RENT_PERIOD = 14
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
    AWAITING_BROADCAST_CONFIRMATION = 15
    AWAITING_NEW_CAR_NAME = 16
    AWAITING_NEW_CAR_DESCRIPTION = 17
    AWAITING_NEW_CAR_PHOTO = 18
    AWAITING_NEW_CAR_PRICES = 19
    AWAITING_EDIT_CAR_SELECT = 20
    AWAITING_EDIT_CAR_FIELD = 21
    AWAITING_EDIT_CAR_VALUE = 22

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
    AWAITING_OWNER_REGISTRATOR_NAME = 30
    AWAITING_OWNER_NAME = 31
    AWAITING_OWNER_PHONE = 32
    AWAITING_OWNER_CAR_BRAND = 33
    AWAITING_OWNER_CAR_PLATE = 34
    AWAITING_OWNER_CAR_VIN = 35
    AWAITING_OWNER_CAR_YEAR = 36
    AWAITING_OWNER_CAR_MILEAGE = 37
    AWAITING_OWNER_CAR_TRANSMISSION = 38
    AWAITING_OWNER_CAR_INSURANCE = 39
    AWAITING_OWNER_GPS_CAMERA = 40
    AWAITING_OWNER_CAR_COLOR = 41
    AWAITING_OWNER_CAR_TYPE = 42
    AWAITING_SERVICE_REQUEST = 43

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    AWAITING_PROFILE_EDIT_CHOICE = 44
    AWAITING_PROFILE_EDIT_VALUE = 45
    AWAITING_ADDRESS = 46
    AWAITING_PROFILE_EDIT_CITY = 47

    AWAITING_LICENSE_FRONT_PHOTO = 50
    AWAITING_LICENSE_BACK_PHOTO = 51

    #—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
    AWAITING_TECH_PASSPORT_PHOTO = 52
    AWAITING_OWNER_PASSPORT_PHOTO = 53
    
    AWAITING_CONSENT = 54 
    AWAITING_PASSPORT_BACK_PHOTO = 55 #—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–∞
    
    # --- –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –°–û–ë–°–¢–í–ï–ù–ù–ò–ö–ê ---
    AWAITING_TECH_PASSPORT_BACK_PHOTO = 56
    AWAITING_OWNER_PASSPORT_BACK_PHOTO = 57
    AWAITING_RENT_TYPE = 58
    
    # --- –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –ß–ï–ö-–õ–ò–°–¢–û–í ---
    AWAITING_CHECKLIST_INPUT = 59
    
    AWAITING_OWNER_CAR_PHOTOS = 60
    AWAITING_OWNER_DESIRED_PRICE = 61
    
    AWAITING_CUSTOM_ERROR_MESSAGE = 62 
    IN_CHAT_WITH_MANAGER = 63
    ADMIN_IN_CHAT_WITH_USER = 64
    
    
def load_from_json(filename):
    if not os.path.exists(filename): return {}
    try:
        with open(filename, 'r', encoding='utf-8') as f: return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è {filename}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
        return {}

def save_to_json(data, filename):
    try:
        with open(filename, 'w', encoding='utf-8') as f: json.dump(data, f, ensure_ascii=False, indent=4)
    except IOError as e: print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {filename}: {e}")

def send_request(method, payload, files=None):
    url = f'{BASE_URL}/{method}'
    try:
        if files:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            response = requests.post(url, data=payload, files=files, timeout=60)
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º 20 —Å–µ–∫—É–Ω–¥
            response = requests.post(url, json=payload, timeout=20)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å JSON –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        json_response = response.json()
        if not json_response.get('ok'):
             print(f"Telegram API Error ({method}): {json_response.get('description')}")
        return json_response

    except requests.exceptions.RequestException as e:
        print(f"Network/HTTP Error ({method}): {e}")
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ —Ç–µ–ª–æ
        if e.response is not None:
            try:
                return e.response.json()
            except json.JSONDecodeError:
                pass
        return None

def send_message(chat_id, text, reply_markup=None, parse_mode='Markdown', disable_web_page_preview=False):
    payload = {'chat_id': chat_id, 'text': text, 'parse_mode': parse_mode, 'disable_web_page_preview': disable_web_page_preview}
    if reply_markup: payload['reply_markup'] = reply_markup
    return send_request('sendMessage', payload)

def send_photo(chat_id, photo, caption, reply_markup=None, parse_mode='Markdown'):
    payload = {'chat_id': chat_id, 'caption': caption, 'parse_mode': parse_mode}
    if reply_markup:
        payload['reply_markup'] = json.dumps(reply_markup)

    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 3 —Ä–∞–∑ –≤ —Å–ª—É—á–∞–µ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏
    for attempt in range(3):
        files = None
        photo_file = None
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
            if os.path.exists(str(photo)):
                photo_file = open(photo, 'rb')
                files = {'photo': photo_file}
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                response = send_request('sendPhoto', payload, files=files)
            # –ï—Å–ª–∏ —ç—Ç–æ file_id
            else:
                payload['photo'] = photo
                response = send_request('sendPhoto', payload)

            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            if response and response.get('ok'):
                return response
            
            # –ï—Å–ª–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –∏ –∂–¥–µ–º –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—à–∏–±–∫–∞: {response}")
            time.sleep(2) # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            time.sleep(2) # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã

        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
            if photo_file:
                photo_file.close()

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ —á–∞—Ç {chat_id} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫.")
    # –ö–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    return send_message(chat_id, caption, parse_mode=parse_mode, reply_markup=reply_markup)


def send_video(chat_id, video_file_id, caption=None, parse_mode='Markdown'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –ø–æ –µ–≥–æ file_id."""
    payload = {
        'chat_id': chat_id,
        'video': video_file_id,
        'caption': caption,
        'parse_mode': parse_mode
    }
    return send_request('sendVideo', payload)

def send_voice(chat_id, voice_file_id, caption=None, parse_mode='Markdown'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –µ–≥–æ file_id."""
    payload = {'chat_id': chat_id, 'voice': voice_file_id, 'caption': caption, 'parse_mode': parse_mode}
    return send_request('sendVoice', payload)

def send_document(chat_id, document_file_id, caption=None, parse_mode='Markdown'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –µ–≥–æ file_id."""
    payload = {'chat_id': chat_id, 'document': document_file_id, 'caption': caption, 'parse_mode': parse_mode}
    return send_request('sendDocument', payload)

def send_animation(chat_id, animation_file_id, caption=None, parse_mode='Markdown'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GIF (–∞–Ω–∏–º–∞—Ü–∏—é) –ø–æ –µ–≥–æ file_id."""
    payload = {'chat_id': chat_id, 'animation': animation_file_id, 'caption': caption, 'parse_mode': parse_mode}
    return send_request('sendAnimation', payload)

def send_sticker(chat_id, sticker_file_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä –ø–æ –µ–≥–æ file_id."""
    payload = {'chat_id': chat_id, 'sticker': sticker_file_id}
    return send_request('sendSticker', payload)


import json 
def send_media_group(chat_id, photo_paths, caption=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–∞–∫ –æ–¥–∏–Ω –º–µ–¥–∏–∞-–∞–ª—å–±–æ–º —Å 3 –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 3 —Ä–∞–∑
    for attempt in range(3):
        media_payload = []
        files_to_upload = {}
        photo_paths_to_send = photo_paths[:10] # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram

        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ JSON-–ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            for i, path in enumerate(photo_paths_to_send):
                if not path or not os.path.exists(path):
                    print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {path}")
                    continue
                
                attachment_name = f'photo{i}'
                media_item = {'type': 'photo', 'media': f'attach://{attachment_name}'}

                if not media_payload and caption: # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ
                    media_item['caption'] = caption
                    media_item['parse_mode'] = 'Markdown'
                
                media_payload.append(media_item)
                files_to_upload[attachment_name] = open(path, 'rb')

            if not files_to_upload:
                print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã.")
                if caption: send_message(chat_id, caption)
                return None

            payload = {'chat_id': str(chat_id), 'media': json.dumps(media_payload)}
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            response = send_request('sendMediaGroup', payload, files=files_to_upload)

            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            if response and response.get('ok'):
                return response
            
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—à–∏–±–∫–∞: {response}")
            time.sleep(2) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
            time.sleep(2)

        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
            for f in files_to_upload.values():
                f.close()

    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –≤ —á–∞—Ç {chat_id} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫.")
    if caption:
        return send_message(chat_id, caption)
    return None

def send_media_group_mixed(chat_id, media_items, caption=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–º–µ—à–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∏ file_id, –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö file_id –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞.
    """
    for attempt in range(3): # –î–æ–±–∞–≤–ª—è–µ–º 3 –ø–æ–ø—ã—Ç–∫–∏
        media_payload = []
        files_to_upload = {}
        
        try:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram - –Ω–µ –±–æ–ª—å—à–µ 10 –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø–µ
            items_to_send = media_items[:10]

            for i, item in enumerate(items_to_send):
                if not item: continue

                media_spec = {'type': 'photo'}
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –≥–æ—Ç–æ–≤–∏–º –µ–≥–æ –∫ –∑–∞–≥—Ä—É–∑–∫–µ
                if isinstance(item, str) and os.path.exists(item):
                    attachment_name = f'photo{i}'
                    media_spec['media'] = f'attach://{attachment_name}'
                    files_to_upload[attachment_name] = open(item, 'rb')
                # –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ file_id
                else:
                    media_spec['media'] = item

                if i == 0 and caption:
                    media_spec['caption'] = caption
                    media_spec['parse_mode'] = 'Markdown'

                media_payload.append(media_spec)

            if not media_payload:
                print("–í –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                if caption: send_message(chat_id, caption)
                return None

            payload = {'chat_id': str(chat_id), 'media': json.dumps(media_payload)}
            response = send_request('sendMediaGroup', payload, files=files_to_upload)

            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º file_id
            if response and response.get('ok'):
                sent_messages = response.get('result', [])
                file_ids = [msg.get('photo', [{}])[-1].get('file_id') for msg in sent_messages if msg.get('photo')]
                return file_ids
            
            print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å. –û—à–∏–±–∫–∞: {response}")
            time.sleep(2)

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
            time.sleep(2)
        finally:
            for f in files_to_upload.values():
                f.close()
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å
    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –≤ —á–∞—Ç {chat_id} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫.")
    if caption:
        return send_message(chat_id, caption)
    return None


def edit_message_text(chat_id, message_id, text, reply_markup=None, parse_mode='Markdown'):
    payload = {'chat_id': chat_id, 'message_id': message_id, 'text': text, 'parse_mode': parse_mode}
    if reply_markup: payload['reply_markup'] = reply_markup
    return send_request('editMessageText', payload)

def delete_message(chat_id, message_id):
    payload = {'chat_id': chat_id, 'message_id': message_id}
    return send_request('deleteMessage', payload)

def create_keyboard(buttons, one_time=True, inline=False):
    if inline:
        processed_buttons = []
        for row in buttons:
            processed_row = []
            for btn in row:
                if isinstance(btn, dict):
                    processed_row.append(btn)
                else:
                    processed_row.append({'text': btn, 'callback_data': btn})
            processed_buttons.append(processed_row)
        return {'inline_keyboard': processed_buttons}

    return {'keyboard': buttons, 'one_time_keyboard': one_time, 'resize_keyboard': True}


def get_main_menu_keyboard(chat_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    buttons = [
        [get_text('menu_rent', chat_id)],
        [get_text('menu_register_client', chat_id), get_text('menu_register_owner', chat_id)],
        [get_text('menu_list_cars', chat_id), get_text('menu_my_rentals', chat_id)],
        # --- –°–¢–†–û–ö–ê –ù–ò–ñ–ï –ò–ó–ú–ï–ù–ï–ù–ê ---
        [get_text('menu_profile', chat_id), get_text('menu_language', chat_id)],
        [get_text('menu_chat_manager', chat_id), get_text('menu_contact', chat_id)],
        [get_text('menu_help', chat_id)]
    ]
    return create_keyboard(buttons, one_time=False)

def get_cancel_keyboard(chat_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã."""
    return create_keyboard(
        [[get_text('cancel_button', chat_id)]],
        one_time=False,
        inline=False
    )

def get_admins():
    admins_data = load_from_json(ADMIN_FILE)
    return [str(chat_id) for chat_id in admins_data.values()]

def get_staff():
    staff_data = load_from_json(STAFF_FILE)
    return staff_data

def find_user_by_identifier(identifier):
    users = load_from_json(USERS_FILE)
    if identifier.isdigit() and identifier in users: return identifier, users[identifier]
    clean_username = identifier.lstrip('@')
    for chat_id, user_data in users.items():
        if user_data.get('username', '').lower() == clean_username.lower(): return chat_id, user_data
    return None, None

def get_available_cars(): return load_from_json(CARS_FILE)

def get_user_lang(chat_id):
    users = load_from_json(USERS_FILE)
    return users.get(str(chat_id), {}).get('lang', 'ru')

def get_text(key, chat_id, **kwargs):
    lang = get_user_lang(str(chat_id))
    text_template = TEXTS.get(lang, TEXTS['ru']).get(key)
    if text_template is None:
        text_template = TEXTS['ru'].get(key, f"_{key}_ not found")
    return text_template.format(**kwargs)

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram Markdown."""
    if not isinstance(text, str):
        text = str(text)
    escape_chars = r'_*`['
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text


class NotificationManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—è–º –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º.
    """
    def send_rental_payment_due(self, driver_chat_id, car_info):
        message = get_text('driver_rent_payment_due', driver_chat_id, car_brand=car_info.get('car_brand', 'N/A'))
        send_message(driver_chat_id, message)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—é {driver_chat_id}")

    def send_maintenance_due(self, driver_chat_id, car_info):
        is_electro = car_info.get('car_type', '').lower() == '—ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å'
        key = 'driver_maintenance_due_electro' if is_electro else 'driver_maintenance_due_dvs'
        message = get_text(key, driver_chat_id, 
                           car_brand=car_info.get('car_brand', 'N/A'),
                           car_plate=car_info.get('car_plate', 'N/A'))
        send_message(driver_chat_id, message)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¢–û –≤–æ–¥–∏—Ç–µ–ª—é {driver_chat_id}")
        
    def send_inspection_due(self, chat_id, car_info, role='driver'):
        key = 'driver_inspection_due' if role == 'driver' else 'owner_inspection_due'
        expiry_date = car_info.get('inspection_expiry_date', '??.??.????')
        message = get_text(key, chat_id,
                           car_brand=car_info.get('car_brand', 'N/A'),
                           car_plate=car_info.get('car_plate', 'N/A'),
                           date=expiry_date)
        send_message(chat_id, message)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–æ—Å–º–æ—Ç—Ä–µ {role} {chat_id}")

    def send_license_due(self, chat_id, car_info, role='driver'):
        key = 'driver_license_due' if role == 'driver' else 'owner_license_due'
        expiry_date = car_info.get('license_expiry_date', '??.??.????')
        message = get_text(key, chat_id,
                           car_brand=car_info.get('car_brand', 'N/A'),
                           car_plate=car_info.get('car_plate', 'N/A'),
                           date=expiry_date)
        send_message(chat_id, message)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏ {role} {chat_id}")
        
    def notify_all_drivers_about_free_car(self, car_info):
        all_users = load_from_json(USERS_FILE)
        driver_ids = [uid for uid, udata in all_users.items() if udata.get('role') == 'client' and udata.get('status') == 'active']
        
        for driver_id in driver_ids:
            message = get_text('driver_car_is_free', driver_id, car_brand=car_info.get('car_brand', 'N/A'))
            send_message(driver_id, message)
            time.sleep(0.1)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–≤–æ–±–æ–¥–Ω–æ–π –º–∞—à–∏–Ω–µ {car_info.get('car_brand')} {len(driver_ids)} –≤–æ–¥–∏—Ç–µ–ª—è–º.")

    def notify_owner_of_driver_assignment(self, owner_chat_id, driver_info, car_info):
        message = get_text('owner_driver_assigned', owner_chat_id,
                           car_brand=car_info.get('car_brand', 'N/A'),
                           car_plate=car_info.get('car_plate', 'N/A'),
                           driver_name=driver_info.get('name', 'N/A'),
                           driver_phone=driver_info.get('phone', 'N/A'))
        send_message(owner_chat_id, message)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É {owner_chat_id}")

    def notify_owner_of_maintenance_completion(self, owner_chat_id, car_info):
        message = get_text('owner_maintenance_completed', owner_chat_id,
                           car_brand=car_info.get('car_brand', 'N/A'),
                           car_plate=car_info.get('car_plate', 'N/A'))
        send_message(owner_chat_id, message)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¢–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É {owner_chat_id}")

    def notify_owner_of_payout(self, owner_chat_id, car_info, amount):
        message = get_text('owner_payout_received', owner_chat_id,
                           car_brand=car_info.get('car_brand', 'N/A'),
                           amount=amount)
        send_message(owner_chat_id, message)
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ {amount} —Å–æ–º–æ–Ω–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É {owner_chat_id}")

def daily_scheduler_check():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω—É–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    print(f"\n[{datetime.now()}] --- –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ---")
    notifications = NotificationManager()
    owner_cars = load_from_json(OWNER_CARS_FILE)
    
    today = datetime.now().date()
    
    for owner_id, car_data in owner_cars.items():
        if 'inspection_expiry_date' in car_data:
            try:
                expiry_date = datetime.strptime(car_data['inspection_expiry_date'], '%Y-%m-%d').date()
                days_left = (expiry_date - today).days
                if days_left in [15, 3]:
                    notifications.send_inspection_due(owner_id, car_data, role='owner')
                    if car_data.get('current_driver_id'):
                        notifications.send_inspection_due(car_data['current_driver_id'], car_data, role='driver')
            except (ValueError, TypeError):
                pass 

        if 'license_expiry_date' in car_data:
            try:
                expiry_date = datetime.strptime(car_data['license_expiry_date'], '%Y-%m-%d').date()
                days_left = (expiry_date - today).days
                if days_left in [30, 7, 3]:
                    notifications.send_license_due(owner_id, car_data, role='owner')
                    if car_data.get('current_driver_id'):
                        notifications.send_license_due(car_data['current_driver_id'], car_data, role='driver')
            except (ValueError, TypeError):
                pass
    
    print(f"[{datetime.now()}] --- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---\n")


class CarRentalBot:
    
    def get_back_cancel_keyboard(self, chat_id):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ù–∞–∑–∞–¥' –∏ '–û—Ç–º–µ–Ω–∞'."""
        return create_keyboard(
            [
                [get_text('back_button', chat_id), get_text('cancel_button', chat_id)]
            ],
            one_time=False,
            inline=False
        )

    def _go_back(self, chat_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        data = self.user_data.get(chat_id, {})
        previous_states = data.get('state_history', [])

        if not previous_states:
            self.user_states.pop(chat_id, None)
            self.user_data.pop(chat_id, None)
            send_message(chat_id, get_text('operation_cancelled', chat_id),
                         reply_markup=get_main_menu_keyboard(chat_id))
            return

        previous_states.pop()
        if not previous_states:
            self.user_states.pop(chat_id, None)
            self.user_data.pop(chat_id, None)
            send_message(chat_id, get_text('operation_cancelled', chat_id),
                         reply_markup=get_main_menu_keyboard(chat_id))
            return

        prev_state_name = previous_states[-1]
        self.user_states[chat_id] = State[prev_state_name]

        state_actions = {
            State.AWAITING_NAME: (get_text('start_registration', chat_id), get_cancel_keyboard(chat_id)),
            State.AWAITING_PHONE: (get_text('ask_phone', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_CITY: (get_text('ask_city', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_ADDRESS: (get_text('ask_address', chat_id, city=data.get('city', '')), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_AGE: (get_text('ask_age', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_DRIVING_EXPERIENCE: (get_text('ask_driving_experience', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_LICENSE: (get_text('ask_license', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_DRIVER_ID: (get_text('ask_driver_id', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_PASSPORT_PHOTO: (get_text('ask_passport_photo', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_OWNER_REGISTRATOR_NAME: (get_text('owner_start_registration', chat_id), get_cancel_keyboard(chat_id)),
            State.AWAITING_OWNER_NAME: (get_text('owner_ask_owner_name', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_OWNER_PHONE: (get_text('ask_phone', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_OWNER_CAR_BRAND: (get_text('owner_ask_car_brand', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_OWNER_CAR_PLATE: (get_text('owner_ask_car_plate', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_OWNER_CAR_VIN: (get_text('owner_ask_car_vin', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_OWNER_CAR_YEAR: (get_text('owner_ask_car_year', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_OWNER_CAR_MILEAGE: (get_text('owner_ask_car_mileage', chat_id), self.get_back_cancel_keyboard(chat_id)),
            State.AWAITING_OWNER_CAR_COLOR: (get_text('owner_ask_car_color', chat_id), self.get_back_cancel_keyboard(chat_id)),
        }
        
        action = state_actions.get(State[prev_state_name])
        if action:
            send_message(chat_id, action[0], reply_markup=action[1])
        else:
            self.user_states.pop(chat_id, None)
            self.user_data.pop(chat_id, None)
            send_message(chat_id, get_text('operation_cancelled', chat_id),
                         reply_markup=get_main_menu_keyboard(chat_id))

    def _set_next_state(self, chat_id, next_state):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é."""
        self.user_states[chat_id] = next_state
        data = self.user_data.get(chat_id, {})
        if 'state_history' not in data:
            data['state_history'] = []
        
        data['state_history'].append(next_state.name)
        self.user_data[chat_id] = data
    
    def __init__(self):
        self.user_states = {}
        self.user_data = {}
        self.notifications = NotificationManager()
        self._initialize_files()
        
    def _get_user_display_name(self, user_info):
        """–ù–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–µ–µ –∏–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."""
        if not user_info:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        if 'client_profile' in user_info and user_info['client_profile'].get('name'):
            return user_info['client_profile']['name']
            
        if 'owner_profile' in user_info and user_info['owner_profile'].get('owner_name'):
            return user_info['owner_profile']['owner_name']
        if 'owner_profile' in user_info and user_info['owner_profile'].get('registrator_name'):
            return user_info['owner_profile']['registrator_name']

        if user_info.get('name'):
            return user_info['name']
            
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" 

    def _initialize_files(self):
        if not os.path.exists(ADMIN_FILE):
            save_to_json({'main_admin': MAIN_ADMIN_CHAT_ID}, ADMIN_FILE)
        if not os.path.exists(STAFF_FILE):
            save_to_json({}, STAFF_FILE)
        if not os.path.exists(CARS_FILE) or not load_from_json(CARS_FILE):
            if not os.path.exists('images'): os.makedirs('images')
            for car_name, car_info in INITIAL_CARS_DATA.items():
                image_paths = car_info.get('local_image_paths', [])

                for image_path in image_paths:
                    if not image_path:
                        continue

                    img_dir = os.path.dirname(image_path)
                    
                    if img_dir and not os.path.exists(img_dir):
                        os.makedirs(img_dir)

                    if not os.path.exists(image_path):
                        try:
                            with open(image_path, 'w') as f:
                                f.write(f"Placeholder for {car_name}")
                        except IOError as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫—É {image_path}: {e}")
            
            save_to_json(INITIAL_CARS_DATA, CARS_FILE)
        for filename in [USERS_FILE, RENTALS_FILE, OWNER_CARS_FILE]:
            if not os.path.exists(filename): save_to_json({}, filename)

    def process_update(self, update):
        if 'inline_query' in update:
            self._handle_inline_query(update['inline_query'])
            return

        if 'callback_query' in update: 
            self._process_callback_query(update['callback_query'])
            return
            
        if 'message' not in update: return
        
        message = update['message']
        chat_id = str(message['chat']['id'])
        user = message['from']
        
        text = message.get('text', '').strip()
        state = self.user_states.get(chat_id)

        # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã
        command_button_texts = [
            get_text('menu_rent', chat_id),
            get_text('menu_list_cars', chat_id),
            get_text('menu_my_rentals', chat_id),
            get_text('menu_profile', chat_id),
            get_text('menu_contact', chat_id),
            get_text('menu_help', chat_id),
            get_text('menu_register_client', chat_id),
            get_text('menu_register_owner', chat_id),
            get_text('menu_chat_manager', chat_id),
            #get_text('end_chat_button', chat_id),
            get_text('cancel_button', chat_id)
        ]
        
        # –ü–†–û–í–ï–†–ö–ê: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –ò–õ–ò –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        is_command_or_button = text.startswith('/') or text in command_button_texts
        if is_command_or_button:
            # –ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ–º–∞–Ω–¥–∞, —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å.
            if state:
                # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---
                data = self.user_data.get(chat_id, {})
                edit_menu_message_id = data.get('edit_menu_message_id')

                # –ü–†–û–í–ï–†–Ø–ï–ú: –µ—Å–ª–∏ –º—ã –±—ã–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏ —É –Ω–∞—Å –µ—Å—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
                if state in [State.AWAITING_PROFILE_EDIT_CHOICE, State.AWAITING_PROFILE_EDIT_VALUE] and edit_menu_message_id:
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ —Å–∞–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    edit_message_text(
                        chat_id=chat_id,
                        message_id=edit_menu_message_id,
                        text=get_text('choose_field_to_edit', chat_id) + f"\n\n*{get_text('operation_cancelled', chat_id)}*",
                        reply_markup=None  # –≠—Ç–æ —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    )
                else:
                    # –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è) —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–º–µ–Ω—ã
                    is_cancel_command = (text == get_text('cancel_button', chat_id)) or text == '/cancel'
                    if not is_cancel_command:
                        send_message(chat_id, get_text('operation_cancelled', chat_id))

                # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô ---
                
            # –í—ã–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É)
            self._handle_commands(chat_id, text, user)
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        if state:
            self._handle_stateful_message(message)
            return
        
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ—Ç, –∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        self._handle_commands(chat_id, text, user)
        
    def _handle_inline_query(self, inline_query):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.
        """
        query_id = inline_query['id']
        query_text = inline_query.get('query', '').lower().strip()
        
        available_cars = get_available_cars()
        results = []
        
        if not query_text:
            cars_to_show = list(available_cars.items())[:5]
        else:
            search_words = query_text.split()
            cars_to_show = [
                (name, details) for name, details in available_cars.items()
                if all(word in name.lower() for word in search_words)
            ]

        for i, (name, details) in enumerate(cars_to_show):
            description = (f"–ì–æ–¥: {details.get('year', 'N/A')}, "
                           f"–¢–æ–ø–ª–∏–≤–æ: {details.get('fuel_type', 'N/A')}, "
                           f"–¶–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å: {details.get('prices', [0])[0]} —Å–æ–º–æ–Ω–∏")
            
            message_text = f"/rentcar {name}" 

            result_item = {
                'type': 'article',
                'id': str(i),
                'title': name,
                'description': description,
                'input_message_content': {
                    'message_text': f"/selectcar {name}"
                },

            }
            results.append(result_item)

        send_request('answerInlineQuery', {'inline_query_id': query_id, 'results': results, 'cache_time': 5})

    def _handle_client_photo_step(self, chat_id, file_id, current_state):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –∫–ª–∏–µ–Ω—Ç–∞."""
        data = self.user_data[chat_id]
        
        if current_state == State.AWAITING_PASSPORT_PHOTO:
            data['passport_photo_id'] = file_id
            self.user_states[chat_id] = State.AWAITING_PASSPORT_BACK_PHOTO 
            send_message(chat_id, get_text('ask_passport_back_photo', chat_id), reply_markup=get_cancel_keyboard(chat_id))
        
        elif current_state == State.AWAITING_PASSPORT_BACK_PHOTO:
            data['passport_back_photo_id'] = file_id
            self.user_states[chat_id] = State.AWAITING_LICENSE_FRONT_PHOTO 
            send_message(chat_id, get_text('ask_license_front_photo', chat_id), reply_markup=get_cancel_keyboard(chat_id))

        elif current_state == State.AWAITING_LICENSE_FRONT_PHOTO:
            data['license_front_photo_id'] = file_id
            self.user_states[chat_id] = State.AWAITING_LICENSE_BACK_PHOTO
            send_message(chat_id, get_text('ask_license_back_photo', chat_id), reply_markup=get_cancel_keyboard(chat_id))

        elif current_state == State.AWAITING_LICENSE_BACK_PHOTO:
            data['license_back_photo_id'] = file_id
            self._finalize_client_registration(chat_id)
            
            
    def _handle_owner_car_photo_upload(self, chat_id, file_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞."""
        data = self.user_data.get(chat_id, {})
    
        if 'car_photo_ids' not in data:
            data['car_photo_ids'] = []
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 —Ñ–æ—Ç–æ)
        if len(data['car_photo_ids']) < 5:
            data['car_photo_ids'].append(file_id)
            photo_count = len(data['car_photo_ids'])
    
            if photo_count == 5:
                self.user_states[chat_id] = State.AWAITING_OWNER_DESIRED_PRICE
                send_message(chat_id, get_text('max_photos_reached', chat_id), reply_markup={'remove_keyboard': True})
                send_message(chat_id, get_text('owner_ask_desired_price', chat_id))
            else:
                send_message(chat_id, get_text('owner_photo_received', chat_id, count=photo_count))
        else:
             send_message(chat_id, get_text('max_photos_reached', chat_id), reply_markup={'remove_keyboard': True})
    

    def _handle_owner_photo_step(self, chat_id, file_id, current_state):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞."""
        data = self.user_data[chat_id]

        if current_state == State.AWAITING_TECH_PASSPORT_PHOTO:
            data['tech_passport_photo_id'] = file_id
            self.user_states[chat_id] = State.AWAITING_TECH_PASSPORT_BACK_PHOTO
            send_message(chat_id, get_text('ask_tech_passport_back_photo', chat_id), reply_markup=get_cancel_keyboard(chat_id))

        elif current_state == State.AWAITING_TECH_PASSPORT_BACK_PHOTO:
            data['tech_passport_back_photo_id'] = file_id
            self.user_states[chat_id] = State.AWAITING_OWNER_PASSPORT_PHOTO
            send_message(chat_id, get_text('ask_owner_passport_photo', chat_id), reply_markup=get_cancel_keyboard(chat_id))

        elif current_state == State.AWAITING_OWNER_PASSPORT_PHOTO:
            data['owner_passport_photo_id'] = file_id
            self.user_states[chat_id] = State.AWAITING_OWNER_PASSPORT_BACK_PHOTO
            send_message(chat_id, get_text('ask_owner_passport_back_photo', chat_id), reply_markup=get_cancel_keyboard(chat_id))

        elif current_state == State.AWAITING_OWNER_PASSPORT_BACK_PHOTO:
            data['owner_passport_back_photo_id'] = file_id
            self._finalize_owner_registration(chat_id)

    def _finalize_client_registration(self, chat_id):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞, –¥–æ–±–∞–≤–ª—è—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è—è –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å."""
        new_client_data = self.user_data[chat_id]
        users = load_from_json(USERS_FILE)

        user_record = users.get(str(chat_id), {})

        user_record['username'] = new_client_data.get('username')
        user_record['first_name'] = new_client_data.get('first_name')
        user_record['last_name'] = new_client_data.get('last_name')

        if 'active_roles' not in user_record:
            user_record['active_roles'] = []
        if 'client' not in user_record['active_roles']:
            user_record['active_roles'].append('client')

        user_record.pop('role', None)

        user_record['client_profile'] = new_client_data
        user_record['status'] = 'pending' 

        users[str(chat_id)] = user_record
        save_to_json(users, USERS_FILE)

        self._notify_admins_new_user(chat_id, user_record)
        send_message(chat_id, get_text('registration_complete', chat_id), reply_markup=get_main_menu_keyboard(chat_id))

        self.user_states.pop(chat_id, None)
        self.user_data.pop(chat_id, None)

    def _finalize_owner_registration(self, chat_id):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –¥–æ–±–∞–≤–ª—è—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è—è –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å."""
        users = load_from_json(USERS_FILE)
        owner_reg_data = self.user_data[chat_id]

        user_record = users.get(str(chat_id), {})

        user_record['username'] = owner_reg_data.get('username')

        if 'active_roles' not in user_record:
            user_record['active_roles'] = []
        if 'owner' not in user_record['active_roles']:
            user_record['active_roles'].append('owner')

        user_record.pop('role', None)

        owner_profile_data = {k: v for k, v in owner_reg_data.items() if not k.startswith('car_')}
        car_data = {k: v for k, v in owner_reg_data.items() if k.startswith('car_')}
        
        if 'car_photo_ids' in owner_reg_data:
            car_data['car_photo_ids'] = owner_reg_data['car_photo_ids']
        if 'desired_price_day' in owner_reg_data:
            car_data['desired_price_day'] = owner_reg_data['desired_price_day']

        user_record['owner_profile'] = owner_profile_data
        user_record['status'] = 'pending'

        users[str(chat_id)] = user_record
        save_to_json(users, USERS_FILE)

        owner_cars = load_from_json(OWNER_CARS_FILE)
        owner_cars[str(chat_id)] = car_data
        save_to_json(owner_cars, OWNER_CARS_FILE)

        self._notify_admins_new_owner_car(chat_id, user_record)

        send_message(chat_id, get_text('registration_complete', chat_id), reply_markup=get_main_menu_keyboard(chat_id))

        self.user_states.pop(chat_id, None)
        self.user_data.pop(chat_id, None)
        
    def _handle_checklist_media(self, chat_id, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞."""
        session = self.user_data.get(chat_id)
        if not session or 'checklist_type' not in session:
            return

        template = self._get_checklist_template(session['checklist_type'])
        prev_step_index = session.get('step', 0) - 1

        if prev_step_index < 0 or prev_step_index >= len(template):
            return 

        prev_step_data = template[prev_step_index]
        expected_type = prev_step_data.get('type')

        if expected_type != 'media':
            send_message(chat_id, "‚ùóÔ∏è –ù–∞ —ç—Ç–æ–º —à–∞–≥–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
            return

        media_type = 'photo' if 'photo' in message else 'video'
        file_id = ""
        if media_type == 'photo':
            file_id = message['photo'][-1]['file_id']
        else:
            file_id = message['video']['file_id']

        session['answers'][prev_step_data['key']] = f"<{media_type.capitalize()} –ø–æ–ª—É—á–µ–Ω–æ>"

        if 'media_files' not in session:
            session['media_files'] = []
        
        session['media_files'].append({
            'type': media_type,
            'id': file_id,
            'caption': prev_step_data['key']
        })

        self._process_checklist_step(chat_id, message)
        
        
    def _handle_checklist_media(self, chat_id, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞."""
        session = self.user_data.get(chat_id)
        if not session or 'checklist_type' not in session:
            return 

        template = self._get_checklist_template(session['checklist_type'])
        prev_step_index = session.get('step', 0) - 1

        if prev_step_index < 0 or prev_step_index >= len(template):
            return 

        prev_step_data = template[prev_step_index]
        expected_type = prev_step_data.get('type')

        if expected_type != 'media':
            send_message(chat_id, "‚ùóÔ∏è –ù–∞ —ç—Ç–æ–º —à–∞–≥–µ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
            return

        media_type = 'photo' if 'photo' in message else 'video'
        file_id = ""
        if media_type == 'photo':
            file_id = message['photo'][-1]['file_id']
        else:
            file_id = message['video']['file_id']

        session['answers'][prev_step_data['key']] = f"<{media_type.capitalize()} –ø–æ–ª—É—á–µ–Ω–æ>"

        if 'media_files' not in session:
            session['media_files'] = []
        
        session['media_files'].append({
            'type': media_type,
            'id': file_id,
            'caption': prev_step_data['key']
        })

        self._process_checklist_step(chat_id, message)
    

    def _start_profile_edit(self, chat_id, role_to_edit):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–æ–ª–∏."""
        users = load_from_json(USERS_FILE)
        if chat_id not in users:
            send_message(chat_id, get_text('not_registered', chat_id))
            return

        buttons = []
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ ---
        self.user_data[chat_id] = {'role_to_edit': role_to_edit}

        if role_to_edit == 'owner':
            buttons.append([{'text': get_text('field_registrator_name', chat_id), 'callback_data': 'edit_field_registrator_name'}])
            buttons.append([{'text': get_text('field_owner_name', chat_id), 'callback_data': 'edit_field_owner_name'}])
            buttons.append([{'text': get_text('field_phone', chat_id), 'callback_data': 'edit_field_phone'}])

        elif role_to_edit == 'client':
            buttons.extend([
                [{'text': get_text('field_name', chat_id), 'callback_data': 'edit_field_name'}],
                [{'text': get_text('field_phone', chat_id), 'callback_data': 'edit_field_phone'}],
                [{'text': get_text('field_city', chat_id), 'callback_data': 'edit_field_city'}],
                [{'text': get_text('field_address', chat_id), 'callback_data': 'edit_field_address'}],
                [{'text': get_text('field_age', chat_id), 'callback_data': 'edit_field_age'}],
                [{'text': get_text('field_driving_experience', chat_id), 'callback_data': 'edit_field_driving_experience'}],
                [{'text': get_text('field_license', chat_id), 'callback_data': 'edit_field_license'}]
            ])

        keyboard = create_keyboard(buttons, inline=True)
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ ---
        response = send_message(chat_id, get_text('choose_field_to_edit', chat_id), reply_markup=keyboard)
        if response and response.get('ok'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
            self.user_data[chat_id]['edit_menu_message_id'] = response['result']['message_id']
        
        self.user_states[chat_id] = State.AWAITING_PROFILE_EDIT_CHOICE


    def _handle_stateful_message(self, message):
        chat_id = str(message['chat']['id'])
        text = message.get('text', '').strip()
        photo = message.get('photo')
        video = message.get('video')
        voice = message.get('voice')
        document = message.get('document') 
        animation = message.get('animation') 
        sticker = message.get('sticker') 
        
        state = self.user_states.get(chat_id)
        data = self.user_data.get(chat_id, {})

        cancel_btn_text = get_text('cancel_button', chat_id)
        back_btn_text = get_text('back_button', chat_id)

        if text == '/cancel' or text == cancel_btn_text:
            # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            edit_menu_message_id = data.get('edit_menu_message_id')

            # –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, —Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
            if state in [State.AWAITING_PROFILE_EDIT_CHOICE, State.AWAITING_PROFILE_EDIT_VALUE] and edit_menu_message_id:
                edit_message_text(
                    chat_id=chat_id,
                    message_id=edit_menu_message_id,
                    text=get_text('choose_field_to_edit', chat_id) + f"\n\n*{get_text('operation_cancelled', chat_id)}*",
                    reply_markup=None  # –ü–µ—Ä–µ–¥–∞—á–∞ None —É–±–∏—Ä–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
                # –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                send_message(chat_id, get_text('main_menu_prompt', chat_id), reply_markup=get_main_menu_keyboard(chat_id))
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                send_message(chat_id, get_text('operation_cancelled', chat_id), 
                           reply_markup=get_main_menu_keyboard(chat_id))

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            self.user_states.pop(chat_id, None)
            self.user_data.pop(chat_id, None)
            return
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        if text == back_btn_text:
            self._go_back(chat_id)
            return

        finish_btn_text = get_text('finish_photo_upload_btn', chat_id)
        if state == State.AWAITING_OWNER_CAR_PHOTOS and text == finish_btn_text:
            if not data.get('car_photo_ids'):
                send_message(chat_id, "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'.")
                return
            
            self._set_next_state(chat_id, State.AWAITING_OWNER_DESIRED_PRICE)
            send_message(chat_id, get_text('owner_ask_desired_price', chat_id), reply_markup={'remove_keyboard': True})
            return
        
        if (photo or video) and state == State.AWAITING_CHECKLIST_INPUT:
            self._handle_checklist_media(chat_id, message)
            return
        
        if photo: 
            file_id = photo[-1]['file_id'] 

            client_photo_states = [
                State.AWAITING_PASSPORT_PHOTO, State.AWAITING_PASSPORT_BACK_PHOTO,
                State.AWAITING_LICENSE_FRONT_PHOTO, State.AWAITING_LICENSE_BACK_PHOTO
            ]
            owner_doc_photo_states = [
                State.AWAITING_TECH_PASSPORT_PHOTO, State.AWAITING_TECH_PASSPORT_BACK_PHOTO,
                State.AWAITING_OWNER_PASSPORT_PHOTO, State.AWAITING_OWNER_PASSPORT_BACK_PHOTO
            ]

            if state in client_photo_states:
                self._handle_client_photo_step(chat_id, file_id, state)
                return 
            
            if state in owner_doc_photo_states:
                self._handle_owner_photo_step(chat_id, file_id, state)
                return

            if state == State.AWAITING_OWNER_CAR_PHOTOS:
                self._handle_owner_car_photo_upload(chat_id, file_id)
                return

            if state == State.AWAITING_NEW_CAR_PHOTO:
                self._handle_new_car_photo(chat_id, file_id)
                return
        
            if (photo or video) and state == State.AWAITING_CHECKLIST_INPUT:
                self._handle_checklist_media(chat_id, message)
                return
        
        state = self.user_states.get(chat_id)
        
        if state == State.IN_CHAT_WITH_MANAGER:
            if text == '/endchat' or text == get_text('end_chat_button', chat_id):
                admins = get_admins()
                if admins:
                    users = load_from_json(USERS_FILE)
                    user_info = users.get(chat_id, {})
                    user_name = self._get_user_display_name(user_info)
                    for admin_id in admins:
                        admin_lang_text = get_text('admin_user_ended_chat', admin_id, user_name=user_name, user_id=chat_id)
                        send_message(admin_id, admin_lang_text)
                
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                send_message(chat_id, get_text('exit_chat_mode', chat_id), reply_markup=get_main_menu_keyboard(chat_id))
                return

            admins = get_admins()
            if not admins:
                send_message(chat_id, get_text('no_admins_online', chat_id))
                return

            users = load_from_json(USERS_FILE)
            user_info = users.get(chat_id, {})
            user_name = self._get_user_display_name(user_info)
            username_mention = f" (@{user_info.get('username')})" if user_info.get('username') else ""
            
            caption = (f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –æ—Ç {user_name}{username_mention}*\n"
                       f"*ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞:* `{chat_id}`")

            reply_keyboard = create_keyboard(
                [[{'text': get_text('admin_btn_reply', chat_id), 'callback_data': f'admin_reply_{chat_id}'}]],
                inline=True
            )

            for admin_id in admins:
                if photo:
                    send_photo(admin_id, photo[-1]['file_id'], caption=caption, reply_markup=reply_keyboard)
                elif video:
                    send_video(admin_id, video['file_id'], caption=caption, reply_markup=reply_keyboard)
                elif voice:
                    send_voice(admin_id, voice['file_id'], caption=caption, reply_markup=reply_keyboard)
                elif document:
                    send_document(admin_id, document['file_id'], caption=caption, reply_markup=reply_keyboard)
                elif animation:
                    send_animation(admin_id, animation['file_id'], caption=caption, reply_markup=reply_keyboard)
                elif sticker:
                    send_message(admin_id, caption, reply_markup=reply_keyboard)
                    send_sticker(admin_id, sticker['file_id'])
                elif text:
                    send_message(admin_id, f"{caption}\n\n*{text}*", reply_markup=reply_keyboard)
            return
   
        elif state == State.ADMIN_IN_CHAT_WITH_USER:
            target_info = data
            target_user_name = target_info.get('target_user_name', '')
            end_chat_btn_text = get_text('admin_end_chat_button', chat_id, user_name=target_user_name)

            if text == end_chat_btn_text:
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                send_message(chat_id, get_text('admin_exit_chat_session', chat_id, user_name=target_user_name), reply_markup=get_main_menu_keyboard(chat_id))
                return

            target_user_id = target_info.get('target_user_id')
            if not target_user_id:
                send_message(chat_id, "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                return

            media_caption = message.get('caption', '')
            
            prefix = get_text('admin_reply_prefix', target_user_id, text='')
            full_caption = f"{prefix}\n{media_caption}"

            response = None 

            if photo:
                response = send_photo(target_user_id, photo[-1]['file_id'], caption=full_caption)
            elif video:
                response = send_video(target_user_id, video['file_id'], caption=full_caption)
            elif voice:
                response = send_voice(target_user_id, voice['file_id'], caption=full_caption)
            elif document:
                response = send_document(target_user_id, document['file_id'], caption=full_caption)
            elif animation:
                response = send_animation(target_user_id, animation['file_id'], caption=full_caption)
            elif sticker:
                response = send_sticker(target_user_id, sticker['file_id'])
            elif text:
                response = send_message(target_user_id, get_text('admin_reply_prefix', target_user_id, text=text))

            if response and not response.get('ok') and response.get('error_code') == 403:
                send_message(
                    chat_id, 
                    f"‚ùóÔ∏è*–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{target_user_name}* (ID: `{target_user_id}`) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
                )
                
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                send_message(
                    chat_id, 
                    get_text('admin_exit_chat_session', chat_id, user_name=target_user_name), 
                    reply_markup=get_main_menu_keyboard(chat_id)
                )

            return

        
        if state == State.AWAITING_CUSTOM_ERROR_MESSAGE:
            target_user_id = data.get('target_user_id')
            if not target_user_id:
                send_message(chat_id, "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                return

            custom_message_text = text
            escaped_custom_text = escape_markdown(custom_message_text)

            all_users = load_from_json(USERS_FILE)
            target_user_data = all_users.get(target_user_id, {})
            user_roles = target_user_data.get('active_roles', [])

            if 'owner' in user_roles:
                retry_instruction = get_text('registration_rejected_owner', target_user_id)
            else:
                retry_instruction = get_text('registration_rejected_client', target_user_id)
            
            escaped_retry_instruction = escape_markdown(retry_instruction)
            
            user_message_full = (f"{get_text('user_error_notification_prefix', target_user_id)}\n\n"
                                 f"{escaped_custom_text}\n\n"
                                 f"{escaped_retry_instruction}")
            
            send_message(target_user_id, user_message_full)

            if target_user_id in all_users:
                all_users[target_user_id]['status'] = 'rejected'
                save_to_json(all_users, USERS_FILE)

            send_message(chat_id, get_text('admin_custom_error_sent', chat_id, target_id=target_user_id))

            self.user_states.pop(chat_id, None)
            self.user_data.pop(chat_id, None)
            return
        
        if state == State.AWAITING_CHECKLIST_INPUT:
            session = data
            template = self._get_checklist_template(session['checklist_type'])
            prev_step_index = session.get('step', 0) - 1

            if prev_step_index < 0:
                return

            prev_step_data = template[prev_step_index]
            expected_type = prev_step_data.get('type')

            if expected_type == 'media':
                valid_skip_words = ['–æ–∫', 'ok', '–Ω–µ—Ç', 'no']
                if text.lower() in valid_skip_words:
                    session['answers'][prev_step_data['key']] = text
                    self._process_checklist_step(chat_id, {'text': text})
                else:
                    send_message(chat_id, "‚ùóÔ∏è*–û—à–∏–±–∫–∞:* –ù–∞ —ç—Ç–æ–º —à–∞–≥–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            elif expected_type == 'buttons':
                send_message(chat_id, "‚ùóÔ∏è*–û—à–∏–±–∫–∞:* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
                return

            elif expected_type == 'text':
                session['answers'][prev_step_data['key']] = text
                self._process_checklist_step(chat_id, {'text': text})
                return
    
        if state == State.AWAITING_NAME:
            data['name'] = text
            self._set_next_state(chat_id, State.AWAITING_PHONE)
            send_message(chat_id, get_text('ask_phone', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
        
        elif state == State.AWAITING_PHONE:
            if len(text) == 9 and text.isdigit():
                data['phone'] = f"+992{text}"
                self._set_next_state(chat_id, State.AWAITING_CITY)
                lang = get_user_lang(chat_id)
                buttons_in_row = 2
                keyboard_buttons = []
                for i in range(0, len(CITIES), buttons_in_row):
                    row = []
                    for j in range(i, min(i + buttons_in_row, len(CITIES))):
                         row.append({'text': CITIES[j][lang], 'callback_data': f"city_{CITIES[j]['key']}"})
                    keyboard_buttons.append(row)

                city_keyboard = create_keyboard(keyboard_buttons, inline=True)
                send_message(chat_id, get_text('ask_city', chat_id), reply_markup=city_keyboard)

            else:
                send_message(chat_id, get_text('invalid_phone', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))

        elif state == State.AWAITING_CITY:
            send_message(chat_id, get_text('select_city_from_list', chat_id))

        elif state == State.AWAITING_ADDRESS:
            data['address'] = text
            self._set_next_state(chat_id, State.AWAITING_AGE)
            send_message(chat_id, get_text('ask_age', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))

        elif state == State.AWAITING_AGE:
            try:
                user_dob = datetime.strptime(text, '%d.%m.%Y')
                today = datetime.now()
        
                age = today.year - user_dob.year - ((today.month, today.day) < (user_dob.month, user_dob.day))
        
                if 18 <= age <= 80:
                    data['dob'] = text 
                    data.pop('age', None)
            
                    self._set_next_state(chat_id, State.AWAITING_DRIVING_EXPERIENCE)
                    send_message(chat_id, get_text('ask_driving_experience', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
                else:
                    send_message(chat_id, get_text('invalid_age', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
            
            except ValueError:
                send_message(chat_id, get_text('invalid_age', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
    
        elif state == State.AWAITING_DRIVING_EXPERIENCE:
            if text.isdigit() and 0 <= int(text) <= 60:
                data['driving_experience'] = text
                self._set_next_state(chat_id, State.AWAITING_LICENSE)
                send_message(chat_id, get_text('ask_license', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
            else:
                send_message(chat_id, get_text('invalid_driving_experience', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
    
        elif state == State.AWAITING_LICENSE:
            if re.fullmatch(r'[A-Za-z]{2}\d{7}', text):
                data['license'] = text.upper()
                self._set_next_state(chat_id, State.AWAITING_LICENSE_CATEGORY)
                categories_keyboard = create_keyboard([[{'text': 'A', 'callback_data': 'cat_A'}, {'text': 'B', 'callback_data': 'cat_B'}, {'text': 'C', 'callback_data': 'cat_C'}, {'text': 'D', 'callback_data': 'cat_D'}],[{'text': 'BE', 'callback_data': 'cat_BE'}, {'text': 'CE', 'callback_data': 'cat_CE'}, {'text': 'DE', 'callback_data': 'cat_DE'}]], inline=True)
                send_message(chat_id, get_text('ask_license_category', chat_id) + get_text('cancel_hint', chat_id), reply_markup=categories_keyboard)
            else:
                send_message(chat_id, get_text('invalid_license', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))

        elif state == State.AWAITING_DRIVER_ID:
            data['driver_id'] = text
            self._set_next_state(chat_id, State.AWAITING_DEPOSIT)
            yes_no_keyboard = create_keyboard([[{'text': get_text('yes', chat_id), 'callback_data': 'reg_deposit_yes'},{'text': get_text('no', chat_id), 'callback_data': 'reg_deposit_no'}]], inline=True)
            send_message(chat_id, get_text('ask_deposit', chat_id) + get_text('cancel_hint', chat_id), reply_markup=yes_no_keyboard)

        elif state == State.AWAITING_OWNER_REGISTRATOR_NAME:
            data['registrator_name'] = text
            self._set_next_state(chat_id, State.AWAITING_OWNER_NAME)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π "–Ø –∏ –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫"
            i_am_owner_keyboard = create_keyboard([
                [get_text('i_am_the_owner_btn', chat_id)],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
                [get_text('back_button', chat_id), get_text('cancel_button', chat_id)] # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∞"
            ], one_time=False, inline=False)

            send_message(chat_id, get_text('owner_ask_owner_name', chat_id), reply_markup=i_am_owner_keyboard)
        
        elif state == State.AWAITING_OWNER_NAME:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–∞–∂–∞—Ç–∞ –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            if text == get_text('i_am_the_owner_btn', chat_id):
                # –ï—Å–ª–∏ –¥–∞, –∫–æ–ø–∏—Ä—É–µ–º –§–ò–û —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –§–ò–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
                data['owner_name'] = data.get('registrator_name')
            else:
                # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –§–ò–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
                data['owner_name'] = text
        
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            self._set_next_state(chat_id, State.AWAITING_OWNER_PHONE)
            send_message(chat_id, get_text('ask_phone', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
        
        elif state == State.AWAITING_OWNER_PHONE:
            if len(text) == 9 and text.isdigit():
                data['phone'] = f"+992{text}"
                self._set_next_state(chat_id, State.AWAITING_OWNER_CAR_BRAND)
                send_message(chat_id, get_text('owner_ask_car_brand', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
            else:
                send_message(chat_id, get_text('invalid_phone', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
            
        elif state == State.AWAITING_OWNER_CAR_BRAND:
            data['car_brand'] = text
            self._set_next_state(chat_id, State.AWAITING_OWNER_CAR_PLATE)
            send_message(chat_id, get_text('owner_ask_car_plate', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
        
        elif state == State.AWAITING_OWNER_CAR_PLATE:
            plate_number = text.upper()
            pattern = r'^\d{3,4}[A-Z]{2}\d{2}$'
            if re.fullmatch(pattern, plate_number):
                data['car_plate'] = plate_number
                self._set_next_state(chat_id, State.AWAITING_OWNER_CAR_VIN)
                send_message(chat_id, get_text('owner_ask_car_vin', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
            else:
                send_message(chat_id, get_text('invalid_plate_format_tj', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
        
        elif state == State.AWAITING_OWNER_CAR_VIN:
            vin_code = text.upper()

            if len(vin_code) == 17 and vin_code.isalnum() and all(char not in 'IOQ' for char in vin_code):
                data['car_vin'] = vin_code
                self._set_next_state(chat_id, State.AWAITING_OWNER_CAR_YEAR)
                send_message(chat_id, get_text('owner_ask_car_year', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
            else:
                send_message(chat_id, get_text('invalid_vin', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
        
        elif state == State.AWAITING_OWNER_CAR_YEAR:
            current_year = datetime.now().year
            if text.isdigit() and len(text) == 4 and 1950 <= int(text) <= current_year + 1:
                data['car_year'] = text
                self._set_next_state(chat_id, State.AWAITING_OWNER_CAR_MILEAGE)
                send_message(chat_id, get_text('owner_ask_car_mileage', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
            else:
                send_message(chat_id, get_text('invalid_year', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))
    
        elif state == State.AWAITING_OWNER_CAR_MILEAGE:
            if text.isdigit() and int(text) >= 0:
                data['car_mileage'] = text
                self._set_next_state(chat_id, State.AWAITING_OWNER_CAR_TRANSMISSION)
                transmission_keyboard = create_keyboard([[{'text': "–ê–≤—Ç–æ–º–∞—Ç", 'callback_data': 'owner_trans_auto'},{'text': "–ú–µ—Ö–∞–Ω–∏–∫–∞", 'callback_data': 'owner_trans_manual'}]], inline=True)
                send_message(chat_id, get_text('owner_ask_car_transmission', chat_id) + get_text('cancel_hint', chat_id), reply_markup=transmission_keyboard)
            else:
                send_message(chat_id, get_text('invalid_mileage', chat_id), reply_markup=self.get_back_cancel_keyboard(chat_id))

        elif state == State.AWAITING_OWNER_CAR_COLOR:
            data['car_color'] = text
            self._set_next_state(chat_id, State.AWAITING_OWNER_CAR_TYPE)
            car_type_keyboard = create_keyboard([[{'text': "–î–í–°", 'callback_data': 'owner_cartype_ice'},{'text': "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å", 'callback_data': 'owner_cartype_electric'},{'text': "–ì–∏–±—Ä–∏–¥", 'callback_data': 'owner_cartype_hybrid'}]], inline=True)
            send_message(chat_id, get_text('owner_ask_car_type', chat_id) + get_text('cancel_hint', chat_id), reply_markup=car_type_keyboard)
            
        elif state == State.AWAITING_OWNER_DESIRED_PRICE:
            if text.isdigit() and int(text) > 0:
                data['desired_price_day'] = int(text)
                self._set_next_state(chat_id, State.AWAITING_CONSENT)

                consent_keyboard = create_keyboard([
                    [{'text': get_text('consent_confirm_btn', chat_id), 'callback_data': 'consent_confirm_owner'}]
                ], inline=True)

                send_message(chat_id, get_text('ask_docs_after_price', chat_id))

                send_message(chat_id, get_text('consent_prompt', chat_id), reply_markup=consent_keyboard)
            else:
                send_message(chat_id, get_text('invalid_price', chat_id))

        elif state == State.AWAITING_PROFILE_EDIT_VALUE:
            edit_data = self.user_data.get(chat_id, {})
            field_to_edit = edit_data.get('edit_field')
            new_value = text
            is_valid = False
            error_message = None

            if not field_to_edit:
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                return

            if field_to_edit == 'phone':
                if len(new_value) == 9 and new_value.isdigit():
                    new_value = f"+992{new_value}"
                    is_valid = True
                else:
                    error_message = get_text('invalid_phone', chat_id)
            elif field_to_edit == 'age':
                try:
                    user_dob = datetime.strptime(new_value, '%d.%m.%Y')
                    today = datetime.now()
                    age = today.year - user_dob.year - ((today.month, today.day) < (user_dob.month, user_dob.day))
        
                    if 18 <= age <= 80:
                        is_valid = True
                        users[chat_id]['dob'] = new_value
                        users[chat_id].pop('age', None)
                    else:
                        error_message = get_text('invalid_age', chat_id)
                except ValueError:
                    error_message = get_text('invalid_age', chat_id)
                if is_valid:
                    save_to_json(users, USERS_FILE)
                    send_message(chat_id, get_text('profile_updated_successfully', chat_id))
                    self.user_states.pop(chat_id, None)
                    self.user_data.pop(chat_id, None)
                    self._handle_commands(chat_id, '/profile', {'from': {'id': chat_id}})
                else:
                    send_message(chat_id, error_message)
                return
            
            elif field_to_edit == 'driving_experience':
                if new_value.isdigit() and 0 <= int(new_value) <= 60:
                    is_valid = True
                else:
                    error_message = get_text('invalid_driving_experience', chat_id)
            elif field_to_edit == 'license':
                if re.fullmatch(r'[–ê-–Ø–∞-—è]{2}\d{7}', new_value):
                    new_value = new_value.upper()
                    is_valid = True
                else:
                    error_message = get_text('invalid_license', chat_id)

            elif field_to_edit == 'address':
                if new_value:
                    is_valid = True
                else:
                    error_message = get_text('invalid_value', chat_id)

            elif field_to_edit in ['name', 'city', 'registrator_name', 'owner_name']:
                if new_value:
                    is_valid = True
                else:
                    error_message = get_text('invalid_value', chat_id)

            if is_valid:
                users = load_from_json(USERS_FILE)
                if chat_id in users:
                    role_being_edited = self.user_data.get(chat_id, {}).get('role_to_edit')
                    if role_being_edited:
                        profile_key = f"{role_being_edited}_profile"
                        if profile_key in users[chat_id]:
                            users[chat_id][profile_key][field_to_edit] = new_value
                        else:
                            users[chat_id][profile_key] = {field_to_edit: new_value}
                    else:
                        users[chat_id][field_to_edit] = new_value
                    save_to_json(users, USERS_FILE)
                    
                    send_message(chat_id, get_text('profile_updated_successfully', chat_id))
                    
                    self.user_states.pop(chat_id, None)
                    self.user_data.pop(chat_id, None)
                    
                    self._handle_commands(chat_id, '/profile', {'from': {'id': chat_id}})
                else:
                    send_message(chat_id, get_text('not_registered', chat_id))
            else:
                if error_message:
                    send_message(chat_id, error_message)
                else:
                    send_message(chat_id, get_text('invalid_value', chat_id))
            
        elif state == State.AWAITING_SERVICE_REQUEST:
            request_text = text
            admins = get_admins()
            user_info = load_from_json(USERS_FILE).get(chat_id, {})
            car_info = load_from_json(OWNER_CARS_FILE).get(chat_id, {})
            
            admin_message = (f"‚öôÔ∏è *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¢–û –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞!*\n\n"
                             f"üë§ *–ò–º—è:* {user_info.get('name', 'N/A')}\n"
                             f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user_info.get('phone', 'N/A')}`\n"
                             f"üÜî *Chat ID:* `{chat_id}`\n\n"
                             f"üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª—å:* {car_info.get('car_brand', 'N/A')} ({car_info.get('car_plate', 'N/A')})\n\n"
                             f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n{request_text}")
            for admin_id in admins:
                send_message(admin_id, admin_message)
            
            send_message(chat_id, get_text('service_request_sent', chat_id))
            self.user_states.pop(chat_id, None)
            
        elif state == State.AWAITING_RENT_CAR:
            available_cars = get_available_cars()
            if text in available_cars:
                data['car'] = text
                self._set_next_state(chat_id, State.AWAITING_RENT_PERIOD)
                car_info = available_cars[text]

                short_caption = f"üöó *{text}*\n\nüìú *–û–ø–∏—Å–∞–Ω–∏–µ:* {car_info['description']}"
                if car_info.get('local_image_path') and os.path.exists(car_info['local_image_path']):
                    send_photo(chat_id, car_info['local_image_path'], caption=short_caption)
                else:
                    send_message(chat_id, short_caption)
                
                details_text = (f"*{get_text('car_details_price', chat_id)}*\n"
                                f"{get_text('price_day', chat_id, price=car_info['prices'][0])}\n"
                                f"{get_text('price_week', chat_id, price=car_info['prices'][1])}\n"
                                f"{get_text('price_month', chat_id, price=car_info['prices'][2])}\n\n"
                                f"*{get_text('car_specs', chat_id)}*\n"
                                f"{get_text('car_year', chat_id, year=car_info.get('year', 'N/A'))}\n"
                                f"{get_text('car_fuel', chat_id, fuel_type=car_info.get('fuel_type', 'N/A'))}\n"
                                f"{get_text('car_engine', chat_id, engine=car_info.get('engine', 'N/A'))}\n"
                                f"{get_text('car_transmission', chat_id, transmission=car_info.get('transmission', 'N/A'))}\n"
                                f"{get_text('car_seats', chat_id, seats=car_info.get('seats', 'N/A'))}")
                send_message(chat_id, details_text)
                time.sleep(0.3)

                periods_keyboard = create_keyboard([
                    [get_text('day', chat_id)], 
                    [get_text('week', chat_id)], 
                    [get_text('month', chat_id)]
                ], inline=True)
                send_message(chat_id, get_text('choose_rent_period', chat_id), reply_markup=periods_keyboard)
            else:
                send_message(chat_id, get_text('select_car_from_list', chat_id))
                
        elif state == State.AWAITING_BROADCAST_CONFIRMATION:
            if text.lower() in ['–¥–∞', 'yes']:
                broadcast_message = data['broadcast_message']
                users = load_from_json(USERS_FILE)
                active_users = [uid for uid, udata in users.items() if udata.get('status') == 'active']
                count = 0
                send_message(chat_id, get_text('admin_broadcast_start', chat_id, count=len(active_users)))
                for user_id in active_users:
                    user_lang_text = get_text('admin_reply_prefix', user_id, text=broadcast_message)
                    if send_message(user_id, user_lang_text): count += 1
                    time.sleep(0.1)
                send_message(chat_id, get_text('admin_broadcast_finish', chat_id, count=count))
            else:
                send_message(chat_id, get_text('admin_broadcast_cancelled', chat_id))
            self.user_states.pop(chat_id, None)
            self.user_data.pop(chat_id, None)
            
        elif state == State.AWAITING_NEW_CAR_NAME:
            car_name = text.strip()
            if car_name in get_available_cars():
                send_message(chat_id, "‚ùóÔ∏è–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–ª–∏ /cancel.")
                return
            data['car_name'] = car_name
            self._set_next_state(chat_id, State.AWAITING_NEW_CAR_DESCRIPTION)
            send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
            
        elif state == State.AWAITING_NEW_CAR_DESCRIPTION:
            data['description'] = text.strip()
            self._set_next_state(chat_id, State.AWAITING_NEW_CAR_PHOTO)
            send_message(chat_id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
            
        elif state == State.AWAITING_NEW_CAR_PRICES:
            try:
                prices = tuple(map(int, text.split()))
                if len(prices) == 3 and all(p > 0 for p in prices):
                    data['prices'] = prices
                    available_cars = get_available_cars()
                    available_cars[data['car_name']] = {
                        "description": data['description'],
                        "local_image_path": data['local_image_path'],
                        "prices": data['prices'],
                        "year": data.get('year', 2023),
                        "fuel_type": data.get('fuel_type', '–ë–µ–Ω–∑–∏–Ω'),
                        "engine": data.get('engine', 'N/A'),
                        "transmission": data.get('transmission', '–ê–≤—Ç–æ–º–∞—Ç'),
                        "seats": data.get('seats', 5)
                    }
                    save_to_json(available_cars, CARS_FILE)
                    send_message(chat_id, f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å *{data['car_name']}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
                    self.user_states.pop(chat_id, None)
                    self.user_data.pop(chat_id, None)
                else:
                    raise ValueError()
            except ValueError:
                send_message(chat_id, "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 3 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 360 2160 7200).")
                
        elif state == State.AWAITING_EDIT_CAR_SELECT:
            selected_car_name = text.strip()
            if selected_car_name in get_available_cars():
                self.user_data[chat_id]['selected_car'] = selected_car_name
                self._set_next_state(chat_id, State.AWAITING_EDIT_CAR_FIELD)
                keyboard = create_keyboard([['–û–ø–∏—Å–∞–Ω–∏–µ', '–§–æ—Ç–æ'], ['–¶–µ–Ω—ã', '–û—Ç–º–µ–Ω–∞']], one_time=True)
                send_message(chat_id, f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è *{selected_car_name}*?", reply_markup=keyboard)
            else:
                send_message(chat_id, "‚ùóÔ∏è–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ /cancel.")
                
        elif state == State.AWAITING_EDIT_CAR_FIELD:
            field = text.strip().lower()
            if field == '–æ—Ç–º–µ–Ω–∞':
                send_message(chat_id, "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup={'remove_keyboard': True})
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                return
                
            if field in ['–æ–ø–∏—Å–∞–Ω–∏–µ', '—Ñ–æ—Ç–æ', '—Ü–µ–Ω—ã']:
                self.user_data[chat_id]['edit_field'] = field
                if field == '—Ñ–æ—Ç–æ':
                    self._set_next_state(chat_id, State.AWAITING_NEW_CAR_PHOTO)
                    send_message(chat_id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")
                elif field == '—Ü–µ–Ω—ã':
                    self._set_next_state(chat_id, State.AWAITING_EDIT_CAR_VALUE)
                    send_message(chat_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã (3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
                elif field == '–æ–ø–∏—Å–∞–Ω–∏–µ':
                    self._set_next_state(chat_id, State.AWAITING_EDIT_CAR_VALUE)
                    send_message(chat_id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
            else:
                send_message(chat_id, "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ. –í—ã–±–µ—Ä–∏—Ç–µ '–û–ø–∏—Å–∞–Ω–∏–µ', '–§–æ—Ç–æ' –∏–ª–∏ '–¶–µ–Ω—ã'.")
                
        elif state == State.AWAITING_EDIT_CAR_VALUE:
            selected_car = self.user_data[chat_id]['selected_car']
            edit_field = self.user_data[chat_id]['edit_field']
            available_cars = get_available_cars()
            
            if selected_car not in available_cars:
                send_message(chat_id, "‚ùóÔ∏è–û—à–∏–±–∫–∞: –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. /cancel.")
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                return
                
            car_data = available_cars[selected_car]
            
            if edit_field == '–æ–ø–∏—Å–∞–Ω–∏–µ':
                car_data['description'] = text.strip()
                save_to_json(available_cars, CARS_FILE)
                send_message(chat_id, f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è *{selected_car}* –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                
            elif edit_field == '—Ü–µ–Ω—ã':
                try:
                    prices = tuple(map(int, text.split()))
                    if len(prices) == 3 and all(p >= 0 for p in prices):
                        car_data['prices'] = prices
                        save_to_json(available_cars, CARS_FILE)
                        send_message(chat_id, f"‚úÖ –¶–µ–Ω—ã –¥–ª—è *{selected_car}* –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                    else:
                        send_message(chat_id, "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 3 –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
                        return
                except ValueError:
                    send_message(chat_id, "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ 3 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
                    return
                    
            self.user_states.pop(chat_id, None)
            self.user_data.pop(chat_id, None)

    def _get_checklist_template(self, checklist_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —á–µ–∫-–ª–∏—Å—Ç–∞."""
        templates = {
            'dailycheck': [
                {'q': '–ü—Ä–æ–±–µ–≥ (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)', 'type': 'text', 'key': '–ü—Ä–æ–±–µ–≥'},
                {'q': 'üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞', 'type': 'media', 'key': '–§–æ—Ç–æ —Å–ø–∏–¥–æ–º–µ—Ç—Ä–∞'},
                {'q': '–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ (%)', 'type': 'buttons', 'options': ['25', '50', '75', '100'], 'key': '–£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞'},
                {'q': '–î–∞–≤–ª–µ–Ω–∏–µ –≤ —à–∏–Ω–∞—Ö', 'type': 'buttons', 'options': ['–ù–æ—Ä–º–∞', '–¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–∞—á–∫–∏'], 'key': '–î–∞–≤–ª–µ–Ω–∏–µ –≤ —à–∏–Ω–∞—Ö'},
                {'q': '–°–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã (—Ñ–∞—Ä—ã, —Å—Ç–æ–ø-—Å–∏–≥–Ω–∞–ª—ã)', 'type': 'buttons', 'options': ['–í –ø–æ—Ä—è–¥–∫–µ', '–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å'], 'key': '–°–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã'},
                {'q': 'üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∞–≤—Ç–æ. –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è, –ø–æ–∫–∞–∂–∏—Ç–µ –∏—Ö. –ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ "–æ–∫".', 'type': 'media', 'key': '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥'},
                {'q': '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–ª–æ–Ω–∞', 'type': 'buttons', 'options': ['–ß–∏—Å—Ç–æ', '–¢—Ä–µ–±—É–µ—Ç—Å—è —É–±–æ—Ä–∫–∞'], 'key': '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–ª–æ–Ω–∞'},
                {'q': '–ù–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç, —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)', 'type': 'buttons', 'options': ['–ö–æ–º–ø–ª–µ–∫—Ç', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'], 'key': '–ù–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'}
            ],
            'acceptfromowner': [
                {'q': '–ü—Ä–æ–±–µ–≥ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)', 'type': 'text', 'key': '–ü—Ä–æ–±–µ–≥ –ø—Ä–∏ –ø—Ä–∏–µ–º–∫–µ'},
                {'q': '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–∑–æ–≤–∞', 'type': 'buttons', 'options': ['–ë–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π', '–ï—Å—Ç—å —Ü–∞—Ä–∞–ø–∏–Ω—ã', '–ï—Å—Ç—å –≤–º—è—Ç–∏–Ω—ã'], 'key': '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–∑–æ–≤–∞'},
                {'q': 'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –ª—é–±—ã—Ö –∏–º–µ—é—â–∏—Ö—Å—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç".', 'type': 'media', 'key': '–§–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π'},
                {'q': '–°–æ—Å—Ç–æ—è–Ω–∏–µ —à–∏–Ω', 'type': 'buttons', 'options': ['–ù–æ–≤—ã–µ', '–ò–∑–Ω–æ—Å < 50%', '–ò–∑–Ω–æ—Å > 50%'], 'key': '–°–æ—Å—Ç–æ—è–Ω–∏–µ —à–∏–Ω'},
                {'q': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –æ–ø–∏—à–∏—Ç–µ –∏—Ö)', 'type': 'text', 'key': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}
            ],
            'givetodriver': [
                {'q': 'ID –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è', 'type': 'text', 'key': 'driver_id'},
                {'q': '–ü—Ä–æ–±–µ–≥ –ø—Ä–∏ –≤—ã–¥–∞—á–µ (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)', 'type': 'text', 'key': 'mileage_handover'},
                {'q': 'üì∏ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π', 'type': 'media', 'key': '–§–æ—Ç–æ –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π'},
                {'q': '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π', 'type': 'buttons', 'options': ['–ß–∏—Å—Ç–æ–µ, –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π', '–¢—Ä–µ–±—É–µ—Ç –º–æ–π–∫–∏', '–ï—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è'], 'key': 'condition_handover'},
                {'q': '–í–æ–¥–∏—Ç–µ–ª—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω?', 'type': 'buttons', 'options': ['–î–∞, –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω', '–ù–µ—Ç'], 'key': 'driver_agreed'}
            ]
        }
        return templates.get(checklist_type, [])

    def _process_checklist_step(self, chat_id, message, is_callback=False, callback_data=None):
        """–ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ–≥–æ."""
        session = self.user_data.get(chat_id)
        if not session: return

        template = self._get_checklist_template(session['checklist_type'])
        current_step_index = session.get('step', 0)

        if current_step_index >= len(template):
            if is_callback:
                delete_message(chat_id, message['message_id'])

            answers_text = "\n".join([f" - *{key}*: {val}" for key, val in session.get('answers', {}).items()])
            final_report = (f"‚úÖ *–ß–µ–∫-–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
                            f"*–¢–∏–ø:* `{session['checklist_type']}`\n"
                            f"*–ê–≤—Ç–æ–º–æ–±–∏–ª—å:* `{session.get('car_plate', '–ù–µ –≤—ã–±—Ä–∞–Ω')}`\n"
                            f"*–ú–µ—Ö–∞–Ω–∏–∫ ID:* `{chat_id}`\n"
                            f"*–î–∞—Ç–∞:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                            f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n{answers_text}")
            send_message(chat_id, final_report)

            if session.get('media_files'):
                send_message(chat_id, "üóÇÔ∏è *–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –æ—Ç—á–µ—Ç–∞...*")
                for media in session['media_files']:
                    caption = f"–û—Ç—á–µ—Ç: `{session['checklist_type']}` | –ê–≤—Ç–æ: `{session.get('car_plate')}`\n–ü—É–Ω–∫—Ç: `{media['caption']}`"
                    if media['type'] == 'photo':
                        send_photo(chat_id, media['id'], caption=caption)
                    elif media['type'] == 'video':
                        send_video(chat_id, media['id'], caption=caption)
                    time.sleep(0.5)

            self.user_states.pop(chat_id, None)
            self.user_data.pop(chat_id, None)
            return

        step_data = template[current_step_index]
        prompt_text = f"*{step_data['q']}* ({current_step_index + 1}/{len(template)})"

        keyboard = None
        if step_data['type'] == 'buttons':
            buttons = [[{'text': opt, 'callback_data': f"checklist_answer_{opt}"}] for opt in step_data['options']]
            keyboard = create_keyboard(buttons, inline=True)

        if is_callback:
            edit_message_text(chat_id, message['message_id'], prompt_text, reply_markup=keyboard)
        else:
            send_message(chat_id, prompt_text, reply_markup=keyboard)

        session['step'] += 1

            
    def _handle_rent_type_selection(self, chat_id, data, message, query_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–∂–¥—É –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –∞—Ä–µ–Ω–¥–æ–π."""
        send_request('answerCallbackQuery', {'callback_query_id': query_id})

        if data == 'rent_type_short':
            self.user_states[chat_id] = State.AWAITING_RENT_PERIOD
            day_picker_keyboard = self.create_day_picker_keyboard()
            edit_message_text(chat_id, message['message_id'],
                              get_text('choose_number_of_days', chat_id),
                              reply_markup=day_picker_keyboard)

        elif data == 'rent_type_long':
            self.user_states[chat_id] = State.AWAITING_RENT_PERIOD
            periods_keyboard = create_keyboard([
                [{'text': get_text('from_6_months', chat_id), 'callback_data': 'long_from_6_months'}],
                [{'text': get_text('up_to_1_year', chat_id), 'callback_data': 'long_up_to_1_year'}],
                [{'text': "–û—Ç 1 –≥–æ–¥–∞ –∏ –±–æ–ª–µ–µ", 'callback_data': 'long_over_1_year'}], 
                [{'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': 'days_cancel'}]
            ], inline=True)
            
            edit_message_text(chat_id, message['message_id'], get_text('choose_rent_period', chat_id), reply_markup=periods_keyboard)
    
    def create_day_picker_keyboard(self, page=0, max_days=30):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        keyboard = []
        days_per_page = 10
        start_day = page * days_per_page + 1
        end_day = start_day + days_per_page

        days = list(range(start_day, min(end_day, max_days + 1)))
        for i in range(0, len(days), 5):
            row_days = days[i:i+5]
            if not row_days: continue
            keyboard.append([{'text': str(d), 'callback_data': f'days_select_{d}'} for d in row_days])

        nav_row = []
        if page > 0:
            nav_row.append({'text': '‚¨ÖÔ∏è', 'callback_data': f'days_nav_{page - 1}'})
        else:
            nav_row.append({'text': ' ', 'callback_data': 'ignore'})

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ —Ü–µ–Ω—Ç—Ä–µ
        nav_row.append({'text': '‚ùå', 'callback_data': 'days_cancel'})

        # –°—Ç—Ä–µ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ
        if end_day <= max_days:
            nav_row.append({'text': '‚û°Ô∏è', 'callback_data': f'days_nav_{page + 1}'})
        else:
            nav_row.append({'text': ' ', 'callback_data': 'ignore'})

        keyboard.append(nav_row)
        return {'inline_keyboard': keyboard}

    def _handle_day_picker_callback(self, chat_id, data, message, query_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π."""
        send_request('answerCallbackQuery', {'callback_query_id': query_id})

        if data.startswith('days_nav_'):
            page = int(data.split('_')[-1]) 
            day_picker_keyboard = self.create_day_picker_keyboard(page=page)
            edit_message_text(chat_id, message['message_id'],
                              text=get_text('choose_number_of_days', chat_id),
                              reply_markup=day_picker_keyboard)
            return

        if data == 'days_cancel':
            delete_message(chat_id, message['message_id'])
            send_message(chat_id, get_text('operation_cancelled', chat_id),
                       reply_markup=get_main_menu_keyboard(chat_id))
            self.user_states.pop(chat_id, None)
            self.user_data.pop(chat_id, None)
            return

        if data.startswith('days_select_'):
            num_days = int(data.split('_')[-1])
            user_session_data = self.user_data.get(chat_id, {})
            car_name = user_session_data.get('car')
            car_info = get_available_cars().get(car_name, {})
            
            if not car_info or not car_info.get('prices'):
                send_message(chat_id, "‚ùóÔ∏è–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /rent")
                delete_message(chat_id, message['message_id'])
                return
            
            price_per_day = car_info['prices'][0]
            total_price = price_per_day * num_days
            
            period_text = f"{num_days} –¥–Ω."
            price_text = f"{total_price} —Å–æ–º–æ–Ω–∏"
            
            final_user_message = (f"*{get_text('choose_number_of_days', chat_id)}*\n\n"
                                  f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: *{period_text}*\n"
                                  f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: *{price_text}*")
            edit_message_text(chat_id, message['message_id'], final_user_message, reply_markup=None)
            
            self._finalize_rental_request(chat_id, period_text, price_text)
            return

    def _finalize_rental_request(self, chat_id, period_text, price_text):
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—Ä–µ–Ω–¥—ã.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–æ–≤, –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        """
        user_session_data = self.user_data.get(chat_id, {})
        car_name = user_session_data.get('car')

        if not car_name:
            send_message(chat_id, "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∑–∞–Ω–æ–≤–æ: /rent")
            return

        all_users = load_from_json(USERS_FILE)
        user_info = all_users.get(chat_id, {})
        client_profile = user_info.get('client_profile', {})
        
        user_session_data['client_name'] = client_profile.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')
        user_session_data['client_phone'] = client_profile.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        user_session_data['client_license'] = client_profile.get('license', '–ù–µ —É–∫–∞–∑–∞–Ω')

        user_session_data['period'] = period_text
        user_session_data['price'] = price_text
        user_session_data['status'] = 'pending'
        user_session_data['timestamp'] = datetime.now().isoformat()

        rentals = load_from_json(RENTALS_FILE)
        rental_id = str(int(time.time()))
        rentals[rental_id] = user_session_data
        save_to_json(rentals, RENTALS_FILE)

        send_message(chat_id, get_text('rental_request_accepted', chat_id, id=rental_id),
                     reply_markup=get_main_menu_keyboard(chat_id))
        self._notify_admins_new_rental(rental_id, user_session_data)

        self.user_states.pop(chat_id, None)
        self.user_data.pop(chat_id, None)
    
    
    def _process_callback_query(self, callback_query):
        query_id, from_user, data, message = callback_query['id'], callback_query['from'], callback_query['data'], callback_query['message']
        chat_id = str(from_user['id'])
        state = self.user_states.get(chat_id)
        
        if data == 'show_main_menu':
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏
            delete_message(chat_id, message['message_id'])
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            send_message(chat_id, get_text('welcome', chat_id, name=from_user.get('first_name', get_text('guest', chat_id))), reply_markup=get_main_menu_keyboard(chat_id))
            return
        
        if data.startswith('admin_reply_'):
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            
            target_user_id = data.split('_')[-1]
            users = load_from_json(USERS_FILE)
            target_user_info = users.get(target_user_id, {})
            target_user_name = self._get_user_display_name(target_user_info)

            self.user_states[chat_id] = State.ADMIN_IN_CHAT_WITH_USER
            self.user_data[chat_id] = {
                'target_user_id': target_user_id,
                'target_user_name': target_user_name
            }

            end_chat_btn_text = get_text('admin_end_chat_button', chat_id, user_name=target_user_name)
            end_chat_keyboard = create_keyboard([[end_chat_btn_text]], one_time=False)

            original_text = message.get('caption', message.get('text', ''))

            edit_message_text(chat_id, message['message_id'], original_text, reply_markup=None)
            send_message(chat_id, get_text('admin_enter_chat_session', chat_id, user_name=target_user_name), reply_markup=end_chat_keyboard)
            return

        if data.startswith('user_error_'):
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            target_id = data.split('_')[-1]

            self.user_states[chat_id] = State.AWAITING_CUSTOM_ERROR_MESSAGE
            self.user_data[chat_id] = {'target_user_id': target_id}

            prompt_text = get_text('admin_prompt_custom_error', chat_id, target_id=target_id)
            edit_message_text(chat_id, message['message_id'], prompt_text, reply_markup=None)
            return 
        
        if data.startswith('checklist_') and state == State.AWAITING_CHECKLIST_INPUT:
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            session = self.user_data.get(chat_id)
            
            if data.startswith('checklist_car_'):
                session['car_plate'] = data.replace('checklist_car_', '')
                self._process_checklist_step(chat_id, message, is_callback=True)
            elif data.startswith('checklist_answer_'):
                self._process_checklist_step(chat_id, message, is_callback=True, callback_data=data)
            return

        if (chat_id in get_admins() or self._is_staff(chat_id)) and '_' in data:
            parts = data.split('_', 2)
            if len(parts) > 1:
                action_type = parts[0]
                if action_type in ['rental', 'user', 'car']:
                    if action_type == 'rental':
                        self._handle_rental_callback(chat_id, message, parts[1], parts[2], query_id)
                    elif action_type == 'user':
                        self._handle_user_approval_callback(chat_id, message, parts[1], parts[2], query_id)
                    elif action_type == 'car':
                        self._handle_car_management_callback(chat_id, message, parts[1], parts[2], query_id)
                    return 
                
        if data.startswith('rent_type_'):
            self._handle_rent_type_selection(chat_id, data, message, query_id)
            return
        if data.startswith('days_'):
            self._handle_day_picker_callback(chat_id, data, message, query_id)
            return
        
        elif data.startswith('long_') and state == State.AWAITING_RENT_PERIOD:
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            
            period_text = ""
            if data == 'long_from_6_months':
                period_text = get_text('from_6_months', chat_id)
            elif data == 'long_up_to_1_year':
                period_text = get_text('up_to_1_year', chat_id)
            # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
            elif data == 'long_over_1_year':
                period_text = "–û—Ç 1 –≥–æ–¥–∞ –∏ –±–æ–ª–µ–µ" # –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
            
            price_text = "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"

            edit_message_text(chat_id, message['message_id'], f"{get_text('choose_rent_period', chat_id)}\n\n‚úÖ –í—ã–±—Ä–∞–Ω–æ: *{period_text}*", reply_markup=None)
            
            self._finalize_rental_request(chat_id, period_text, price_text)
            return


        if data == 'start_as_client':
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            role_name = get_text('role_client', chat_id)
            edit_message_text(chat_id, message['message_id'], f"{message.get('text', '')}\n\n{get_text('role_selection_made', chat_id, role_name=role_name)}")
            self.user_states[chat_id] = State.AWAITING_NAME
            self.user_data[chat_id] = {
                'username': from_user.get('username'),
                'first_name': from_user.get('first_name'),
                'last_name': from_user.get('last_name')
            }
            send_message(chat_id, get_text('start_registration', chat_id), reply_markup=get_cancel_keyboard(chat_id))
            return

        elif data == 'start_as_owner':
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            role_name = get_text('role_owner', chat_id)
            edit_message_text(chat_id, message['message_id'], f"{message.get('text', '')}\n\n{get_text('role_selection_made', chat_id, role_name=role_name)}")
            self.user_states[chat_id] = State.AWAITING_OWNER_REGISTRATOR_NAME
            self.user_data[chat_id] = {'username': from_user.get('username')}
            send_message(chat_id, get_text('owner_start_registration', chat_id), reply_markup=get_cancel_keyboard(chat_id))
            return

        elif data == 'profile_edit_as_client':
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            users = load_from_json(USERS_FILE)
            user_info = users.get(chat_id, {})

            if 'client' in user_info.get('active_roles', []):
                delete_message(chat_id, message['message_id'])
                self._start_profile_edit(chat_id, 'client') 
            else:
                edit_message_text(chat_id, message['message_id'], message['text'])
                send_message(chat_id, get_text('not_a_client_error', chat_id))
            return

        elif data == 'profile_edit_as_owner':
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            users = load_from_json(USERS_FILE)
            user_info = users.get(chat_id, {})

            if 'owner' in user_info.get('active_roles', []):
                delete_message(chat_id, message['message_id'])
                self._start_profile_edit(chat_id, 'owner')
            else:
                edit_message_text(chat_id, message['message_id'], message['text'])
                send_message(chat_id, get_text('not_a_owner_error', chat_id))
            return

        elif data.startswith('edit_field_') and state == State.AWAITING_PROFILE_EDIT_CHOICE:
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            field_key = data.replace('edit_field_', '')
            
            if field_key == 'city':
                return

            field_name_text_key = f'field_{field_key}'
            user_friendly_field_name = get_text(field_name_text_key, chat_id, default_key=field_key)
            self.user_data[chat_id]['edit_field'] = field_key
            self.user_states[chat_id] = State.AWAITING_PROFILE_EDIT_VALUE
            edit_message_text(chat_id, message['message_id'], get_text('prompt_new_value', chat_id, field_name=user_friendly_field_name))
            return
            
        elif data.startswith('city_edit_') and state == State.AWAITING_PROFILE_EDIT_CITY:
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            new_city = data.replace('city_edit_', '')
            users = load_from_json(USERS_FILE)
            if chat_id in users:
                users[chat_id]['city'] = new_city
                save_to_json(users, USERS_FILE)
                delete_message(chat_id, message['message_id'])
                send_message(chat_id, get_text('profile_updated_successfully', chat_id))
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                self._handle_commands(chat_id, '/profile', {'from': {'id': chat_id}})
            return

        elif data.startswith('city_') and state == State.AWAITING_CITY:
            selected_city_key = data.replace('city_', '')
            lang = get_user_lang(chat_id)
            selected_city_name = "N/A"
            for city in CITIES:
                if city['key'] == selected_city_key:
                    selected_city_name = city[lang]
                    break

            self.user_data[chat_id]['city'] = selected_city_name
            self.user_states[chat_id] = State.AWAITING_ADDRESS
            send_request('answerCallbackQuery', {'callback_query_id': query_id})

            confirmation_text = get_text('city_selected', chat_id, city_name=selected_city_name)
            edit_message_text(chat_id, message['message_id'], confirmation_text, reply_markup=None)

            send_message(chat_id, get_text('ask_address', chat_id, city=selected_city_name), reply_markup=get_cancel_keyboard(chat_id))
            return

        elif data.startswith('cat_') and state == State.AWAITING_LICENSE_CATEGORY:
            category = data.split('_')[1]
            self.user_data[chat_id]['license_category'] = category
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            edit_message_text(chat_id, message['message_id'], f"{message.get('text', '').splitlines()[0]}\n\n{get_text('category_selected', chat_id, category=category)}")
            self.user_states[chat_id] = State.AWAITING_PREFERRED_CAR_TYPE
            keyboard = create_keyboard([[{'text': get_text('ice_car', chat_id), 'callback_data': 'reg_car_type_ice'},{'text': get_text('electric_car', chat_id), 'callback_data': 'reg_car_type_electric'}]], inline=True)
            send_message(chat_id, get_text('ask_preferred_car_type', chat_id), reply_markup=keyboard)
            return
        
        if data.startswith('reg_'):
            current_message_text = message.get('text', '').splitlines()[0]
            edit_message_text(chat_id, message['message_id'], f"{current_message_text}\n\n{get_text('choice_selected', chat_id)}")
            
            if state == State.AWAITING_PREFERRED_CAR_TYPE:
                self.user_data[chat_id]['preferred_car_type'] = get_text('ice_car', chat_id) if data == 'reg_car_type_ice' else get_text('electric_car', chat_id)
                self.user_states[chat_id] = State.AWAITING_TAXI_EXPERIENCE
                yes_no_keyboard = create_keyboard([[{'text': get_text('yes', chat_id), 'callback_data': 'reg_experience_yes'},{'text': get_text('no', chat_id), 'callback_data': 'reg_experience_no'}]], inline=True)
                send_message(chat_id, get_text('ask_taxi_experience', chat_id), reply_markup=yes_no_keyboard)
            
            elif state == State.AWAITING_TAXI_EXPERIENCE:
                has_experience = data == 'reg_experience_yes'
                self.user_data[chat_id]['taxi_experience'] = get_text('yes', chat_id) if has_experience else get_text('no', chat_id)
                if has_experience:
                    self.user_states[chat_id] = State.AWAITING_DRIVER_ID
                    send_message(chat_id, get_text('ask_driver_id', chat_id), reply_markup=get_cancel_keyboard(chat_id))
                else: 
                    self.user_data[chat_id]['driver_id'] = '–Ω–µ—Ç'
                    self.user_states[chat_id] = State.AWAITING_DEPOSIT
                    yes_no_keyboard = create_keyboard([[{'text': get_text('yes', chat_id), 'callback_data': 'reg_deposit_yes'},{'text': get_text('no', chat_id), 'callback_data': 'reg_deposit_no'}]], inline=True)
                    send_message(chat_id, get_text('ask_deposit', chat_id), reply_markup=yes_no_keyboard)

            elif state == State.AWAITING_DEPOSIT:
                self.user_data[chat_id]['deposit'] = get_text('yes', chat_id) if data == 'reg_deposit_yes' else get_text('no', chat_id)
                self.user_states[chat_id] = State.AWAITING_CONSENT 
                consent_keyboard = create_keyboard([
                    [{'text': get_text('consent_confirm_btn', chat_id), 'callback_data': 'consent_confirm_client'}]
                ], inline=True)
                send_message(chat_id, get_text('consent_prompt', chat_id), reply_markup=consent_keyboard)

            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            return
            
        elif data.startswith('setlang_'):
            lang_code = data.split('_')[1]
            users = load_from_json(USERS_FILE)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å
            user_info = users.get(chat_id, {})
            user_info['lang'] = lang_code
            users[chat_id] = user_info
            save_to_json(users, USERS_FILE)

            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∑–∞–≥—Ä—É–∑–∫—É" —Å –∫–Ω–æ–ø–∫–∏
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            edit_message_text(chat_id, message['message_id'], get_text('language_set', chat_id))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_registered = user_info.get('status') or user_info.get('active_roles')
            is_admin = chat_id in get_admins()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if is_registered or is_admin:
                send_message(chat_id, get_text('main_menu_prompt', chat_id), 
                               reply_markup=get_main_menu_keyboard(chat_id))
                if is_admin:
                    send_message(chat_id, "üëë *–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /adminhelp –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏
            else:
                user_name = from_user.get('first_name') or from_user.get('username') or get_text('guest', chat_id)
                welcome_text = get_text('welcome', chat_id, name=user_name)
                prompt_text = get_text('choose_your_role', chat_id)

                role_selection_keyboard = create_keyboard([
                    [
                        {'text': get_text('start_btn_client', chat_id), 'callback_data': 'start_as_client'},
                        {'text': get_text('start_btn_owner', chat_id), 'callback_data': 'start_as_owner'}
                    ],
                    [
                        {'text': get_text('go_to_main_menu', chat_id), 'callback_data': 'show_main_menu'}
                    ]
                ], inline=True)
                
                send_message(chat_id, f"{welcome_text}\n\n{prompt_text}", reply_markup=role_selection_keyboard)
            
            return
        
        elif data.startswith('owner_trans_') and state == State.AWAITING_OWNER_CAR_TRANSMISSION:
            choice_key = 'transmission_auto' if data == 'owner_trans_auto' else 'transmission_manual'
            choice_text = get_text(choice_key, chat_id)

            self.user_data[chat_id]['car_transmission'] = choice_text
            send_request('answerCallbackQuery', {'callback_query_id': query_id})

            confirmation_msg = get_text('transmission_selected', chat_id, choice_text=choice_text)
            edit_message_text(chat_id, message['message_id'], f"{message.get('text').splitlines()[0]}\n\n{confirmation_msg}")

            self.user_states[chat_id] = State.AWAITING_OWNER_CAR_INSURANCE
            yes_no_keyboard = create_keyboard([
                [{'text': get_text('yes', chat_id), 'callback_data': 'owner_ins_yes'},
                 {'text': get_text('no', chat_id), 'callback_data': 'owner_ins_no'}]
            ], inline=True)
            send_message(chat_id, get_text('owner_ask_car_insurance', chat_id), reply_markup=yes_no_keyboard)
            return

        elif data.startswith('owner_cartype_') and state == State.AWAITING_OWNER_CAR_TYPE:
            type_map = {'owner_cartype_ice': '–î–í–°','owner_cartype_electric': '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å','owner_cartype_hybrid': '–ì–∏–±—Ä–∏–¥'}
            choice_text = type_map.get(data, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
            self.user_data[chat_id]['car_type'] = choice_text
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            edit_message_text(chat_id, message['message_id'], f"{message.get('text').splitlines()[0]}\n\n‚úÖ *–í—ã–±—Ä–∞–Ω–æ: {choice_text}*")

            self.user_states[chat_id] = State.AWAITING_OWNER_CAR_PHOTOS
            finish_photo_keyboard = create_keyboard([[get_text('finish_photo_upload_btn', chat_id)]], one_time=False)
            send_message(chat_id, get_text('owner_ask_car_photos', chat_id), reply_markup=finish_photo_keyboard)
            return
        
        elif data.startswith('consent_confirm_') and state == State.AWAITING_CONSENT:
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            delete_message(chat_id, message['message_id'])

            if data == 'consent_confirm_client':
                self.user_states[chat_id] = State.AWAITING_PASSPORT_PHOTO
                send_message(chat_id, get_text('ask_passport_photo', chat_id), reply_markup=get_cancel_keyboard(chat_id))
            elif data == 'consent_confirm_owner':
                self.user_states[chat_id] = State.AWAITING_TECH_PASSPORT_PHOTO
                send_message(chat_id, get_text('ask_tech_passport_photo', chat_id), reply_markup=get_cancel_keyboard(chat_id))
            return

        elif data.startswith('owner_ins_') and state == State.AWAITING_OWNER_CAR_INSURANCE:
            choice = (data == 'owner_ins_yes')
            self.user_data[chat_id]['car_insurance'] = get_text('yes', chat_id) if choice else get_text('no', chat_id)
            
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            edit_message_text(chat_id, message['message_id'], f"{message.get('text').splitlines()[0]}\n\n{get_text('choice_selected', chat_id)}")

            self.user_states[chat_id] = State.AWAITING_OWNER_GPS_CAMERA
            yes_no_keyboard = create_keyboard([
                [{'text': get_text('yes', chat_id), 'callback_data': 'owner_gps_yes'},
                 {'text': get_text('no', chat_id), 'callback_data': 'owner_gps_no'}]
            ], inline=True)
            send_message(chat_id, get_text('owner_ask_gps_camera', chat_id), reply_markup=yes_no_keyboard)
            return

        elif data.startswith('owner_gps_') and state == State.AWAITING_OWNER_GPS_CAMERA:
            choice = (data == 'owner_gps_yes')
            self.user_data[chat_id]['gps_camera_ready'] = get_text('yes', chat_id) if choice else get_text('no', chat_id)

            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            edit_message_text(chat_id, message['message_id'], f"{message.get('text').splitlines()[0]}\n\n{get_text('choice_selected', chat_id)}")

            self.user_states[chat_id] = State.AWAITING_OWNER_CAR_COLOR
            send_message(chat_id, get_text('owner_ask_car_color', chat_id), reply_markup=get_cancel_keyboard(chat_id))
            return
                

        elif data.startswith('user_error_'):
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            target_id = data.split('_')[-1]

            self.user_states[chat_id] = State.AWAITING_CUSTOM_ERROR_MESSAGE
            self.user_data[chat_id] = {'target_user_id': target_id}

            prompt_text = get_text('admin_prompt_custom_error', chat_id, target_id=target_id)
            edit_message_text(chat_id, message['message_id'], prompt_text, reply_markup=None)
            return

        elif data.startswith('user_'):
            try:
                action_type, action, target_id = data.split('_', 2)
                if action_type == 'user':
                    self._handle_user_approval_callback(chat_id, message, action, target_id, query_id)
            except ValueError:
                send_request('answerCallbackQuery', {'callback_query_id': query_id, 'text': '‚ùóÔ∏è–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'})
            return
        
            
        if data.startswith('listcars_brand_'):
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            
            brand_name = data.split('_')[-1]
            edit_message_text(chat_id, message['message_id'], f"‚úÖ *–í—ã–±—Ä–∞–Ω–∞ –º–∞—Ä–∫–∞:* {brand_name}", reply_markup=None)

            selected_brand = data.replace('listcars_brand_', '')
            available_cars = get_available_cars()

            cars_of_brand = {
                name: details for name, details in available_cars.items()
                if name.lower().startswith(selected_brand.lower())
            }

            if not cars_of_brand:
                send_message(chat_id, f"‚ùóÔ∏è–ú–∞—à–∏–Ω—ã –º–∞—Ä–∫–∏ *{selected_brand}* –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            send_message(chat_id, get_text('loading_car_list', chat_id))
            
            for name, details in cars_of_brand.items():
                caption = (f"*{name}*\n"
                           f"{details.get('description', '')}\n\n"
                           f"üí∞ *–ü—Ä–∞–π—Å-–ª–∏—Å—Ç:*\n"
                           f"‚Ä¢ –î–µ–Ω—å: *{details['prices'][0]} —Å–æ–º–æ–Ω–∏*\n"
                           f"‚Ä¢ –ù–µ–¥–µ–ª—è: *{details['prices'][1]} —Å–æ–º–æ–Ω–∏*\n"
                           f"‚Ä¢ –ú–µ—Å—è—Ü: *{details['prices'][2]} —Å–æ–º–æ–Ω–∏*\n\n"
                           f"üîß *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
                           f"‚Ä¢ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {details.get('year', 'N/A')}\n"
                           f"‚Ä¢ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞: {details.get('fuel_type', 'N/A')}\n"
                           f"‚Ä¢ –î–≤–∏–≥–∞—Ç–µ–ª—å: {details.get('engine', 'N/A')}\n"
                           f"‚Ä¢ –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á: {details.get('transmission', 'N/A')}\n"
                           f"‚Ä¢ –ú–µ—Å—Ç–∞: {details.get('seats', 'N/A')}")

                image_paths = details.get('local_image_paths', [])
                
                if image_paths:
                    send_media_group(chat_id, image_paths, caption=caption)
                else:
                    send_message(chat_id, caption)
                    
                time.sleep(0.8) # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–æ–≤
                
            send_message(chat_id, get_text('full_car_list_end', chat_id))
            return 
            
        elif chat_id in get_admins() or self._is_staff(chat_id):
             
            if data.startswith('listcars_brand_'):
                send_request('answerCallbackQuery', {'callback_query_id': query_id})
            
            edit_message_text(chat_id, message['message_id'], f"‚úÖ *–í—ã–±—Ä–∞–Ω–∞ –º–∞—Ä–∫–∞:* {data.split('_')[-1]}", reply_markup=None)

            selected_brand = data.replace('listcars_brand_', '')
            available_cars = get_available_cars()

            cars_of_brand = {
                name: details for name, details in available_cars.items()
                if name.lower().startswith(selected_brand.lower())
            }

            if not cars_of_brand:
                send_message(chat_id, f"‚ùóÔ∏è–ú–∞—à–∏–Ω—ã –º–∞—Ä–∫–∏ *{selected_brand}* –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            send_message(chat_id, get_text('loading_car_list', chat_id))
            
            for name, details in cars_of_brand.items():
                caption = (f"*{name}*\n_{details['description']}_\n\n"
                           f"*{get_text('car_details_price', chat_id)}*\n"
                           f"{get_text('price_day', chat_id, price=details['prices'][0])}\n"
                           f"{get_text('price_week', chat_id, price=details['prices'][1])}\n"
                           f"{get_text('price_month', chat_id, price=details['prices'][2])}\n\n"
                           f"*{get_text('car_specs', chat_id)}*\n"
                           f"{get_text('car_year', chat_id, year=details.get('year', 'N/A'))}\n"
                           f"{get_text('car_fuel', chat_id, fuel_type=details.get('fuel_type', 'N/A'))}\n"
                           f"{get_text('car_engine', chat_id, engine=details.get('engine', 'N/A'))}\n"
                           f"{get_text('car_transmission', chat_id, transmission=details.get('transmission', 'N/A'))}\n"
                           f"{get_text('car_seats', chat_id, seats=details.get('seats', 'N/A'))}")
                           
                if details.get('local_image_path') and os.path.exists(details['local_image_path']):
                    send_photo(chat_id, details['local_image_path'], caption=caption)
                else:
                    send_message(chat_id, caption)
                    
                time.sleep(0.5)
                
            send_message(chat_id, get_text('full_car_list_end', chat_id))
            return 
             
            try:
                action_type, action, target_id = data.split('_', 2)
            except ValueError:
                send_request('answerCallbackQuery', {'callback_query_id': query_id, 'text': '‚ùóÔ∏è–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'})
                return
                
            if action_type == 'rental':
                self._handle_rental_callback(chat_id, message, action, target_id, query_id)
            elif action_type == 'car':
                self._handle_car_management_callback(chat_id, message, action, target_id, query_id)
                
        else:
            send_request('answerCallbackQuery', {'callback_query_id': query_id})

    def _is_staff(self, chat_id):
        staff = get_staff()
        return str(chat_id) in staff

    def _handle_rental_callback(self, admin_id, message, action, rental_id, query_id):
        rentals = load_from_json(RENTALS_FILE)
        if rental_id not in rentals:
            edit_message_text(admin_id, message['message_id'], 
                            f"{message.get('caption', message.get('text', ''))}\n\n*‚ùóÔ∏è –ó–∞—è–≤–∫–∞ ‚Ññ{rental_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*")
            return
            
        rental_info = rentals[rental_id]
        if rental_info['status'] != 'pending':
            send_request('answerCallbackQuery', {'callback_query_id': query_id, 
                                               'text': f'–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: {rental_info["status"]}'})
            return
            
        new_status = 'approved' if action == 'approve' else 'rejected'
        rentals[rental_id]['status'] = new_status
        save_to_json(rentals, RENTALS_FILE)
        
        status_emoji = '‚úÖ' if new_status == 'approved' else '‚ùå'
        admin_name = message['from'].get('first_name', '–ê–¥–º–∏–Ω')
        original_caption = message.get('caption', message.get('text', ''))
        edit_message_text(admin_id, message['message_id'], 
                         f"{original_caption}\n\n*{status_emoji} –°—Ç–∞—Ç—É—Å '{new_status}' –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º {admin_name}.*", 
                         reply_markup=None)
        
        user_id = rental_info['chat_id']
        user_message = get_text('rental_status_changed', user_id, id=rental_id, car=rental_info['car'], 
                              emoji=status_emoji, status=new_status.capitalize())
        user_message += get_text('status_approved_details', user_id) if new_status == 'approved' else get_text('status_rejected_details', user_id)
        send_message(user_id, user_message)

        if new_status == 'approved':
            owner_cars = load_from_json(OWNER_CARS_FILE)
            users = load_from_json(USERS_FILE)
            driver_info = users.get(user_id)
            
            owner_id_found = None
            car_info_found = None
            for owner_id, owner_car_data in owner_cars.items():
                if owner_car_data.get('car_brand') == rental_info['car']:
                    owner_id_found = owner_id
                    car_info_found = owner_car_data
                    owner_cars[owner_id]['current_driver_id'] = user_id
                    save_to_json(owner_cars, OWNER_CARS_FILE)
                    break
            
            if owner_id_found and driver_info and car_info_found:
                self.notifications.notify_owner_of_driver_assignment(owner_id_found, driver_info, car_info_found)
        
        elif new_status == 'rejected':
            car_info = get_available_cars().get(rental_info['car'], {})
            if car_info:
                self.notifications.notify_all_drivers_about_free_car(car_info)

    def _handle_car_management_callback(self, admin_id, message, action, car_name_encoded, query_id):
        car_name = car_name_encoded.replace('%20', ' ')
        cars = get_available_cars()
        
        if car_name not in cars and action != 'cancel':
            edit_message_text(admin_id, message['message_id'], 
                            f"{message['text']}\n\n*‚ùóÔ∏è–ú–∞—à–∏–Ω–∞ '{car_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*", 
                            reply_markup=None)
            return
            
        if action == 'delete':
            keyboard = {
                'inline_keyboard': [
                    [
                        {'text': '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'callback_data': f'car_confirmdelete_{car_name_encoded}'},
                        {'text': '‚ùå –û—Ç–º–µ–Ω–∞', 'callback_data': f'car_cancel_0'}
                    ]
                ]
            }
            edit_message_text(admin_id, message['message_id'], 
                            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å *{car_name}*?", 
                            reply_markup=keyboard)
        elif action == 'confirmdelete':
            if car_name in cars:
                del cars[car_name]
                save_to_json(cars, CARS_FILE)
                edit_message_text(admin_id, message['message_id'], 
                                f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å *{car_name}* —É–¥–∞–ª–µ–Ω.", 
                                reply_markup=None)
            else:
                edit_message_text(admin_id, message['message_id'], 
                                f"‚ùóÔ∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å *{car_name}* —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.", 
                                reply_markup=None)
        elif action == 'cancel':
            edit_message_text(admin_id, message['message_id'], "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)

    def _handle_user_approval_callback(self, admin_id, message, action, target_id, query_id):
        users = load_from_json(USERS_FILE)
        
        if target_id not in users:
            edit_message_text(admin_id, message['message_id'],
                              f"{message.get('caption', message.get('text', ''))}\n\n*‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*")
            send_request('answerCallbackQuery', {'callback_query_id': query_id})
            return

        user_data = users[target_id]
        if user_data.get('status') != 'pending':
            send_request('answerCallbackQuery', {'callback_query_id': query_id,
                                               'text': get_text('user_already_processed', admin_id), 'show_alert': True})
            return

        new_status = 'active' if action == 'approve' else 'rejected'
        users[target_id]['status'] = new_status
        save_to_json(users, USERS_FILE)

        admin_user_info = load_from_json(USERS_FILE).get(admin_id, {})
        admin_name = admin_user_info.get('name', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')

        if new_status == 'active':
            send_message(target_id, get_text('registration_approved', target_id))
            new_admin_text = get_text('user_approved_by_admin', admin_id, admin_name=admin_name)
        else:
            user_roles = user_data.get('active_roles', [])
            if 'owner' in user_roles:
                rejection_key = 'registration_rejected_owner'
            else:
                rejection_key = 'registration_rejected_client'

            send_message(target_id, get_text(rejection_key, target_id), parse_mode=None)

            new_admin_text = get_text('user_rejected_by_admin', admin_id, admin_name=admin_name)

        original_caption = message.get('caption', message.get('text', ''))
        edit_message_text(admin_id, message['message_id'],
                         f"{original_caption}\n\n*--- –û–ë–†–ê–ë–û–¢–ê–ù–û ---\n{new_admin_text}*",
                         reply_markup=None)

        send_request('answerCallbackQuery', {'callback_query_id': query_id})       

    def _handle_new_car_photo(self, chat_id, file_id):
        data = self.user_data.get(chat_id, {})
        file_info_response = requests.get(f'{BASE_URL}/getFile?file_id={file_id}').json()
        
        if not file_info_response or not file_info_response['ok']:
            send_message(chat_id, "‚ùóÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        file_path = file_info_response['result']['file_path']
        download_url = f'https://api.telegram.org/file/bot{TOKEN}/{file_path}'
        
        is_editing = self.user_data.get(chat_id, {}).get('edit_field') == '—Ñ–æ—Ç–æ'
        car_name_for_file = data.get('selected_car') if is_editing else data.get('car_name', 'new_car')
        unique_filename = f"images/{car_name_for_file.replace(' ', '_').lower()}_{int(time.time())}.jpg"
        
        try:
            image_response = requests.get(download_url, stream=True)
            image_response.raise_for_status()
            
            with open(unique_filename, 'wb') as f:
                for chunk in image_response.iter_content(chunk_size=8192):
                    f.write(chunk)
                    
            data['local_image_path'] = unique_filename
            
            if is_editing:
                available_cars = get_available_cars()
                selected_car = data['selected_car']
                if selected_car in available_cars:
                    available_cars[selected_car]['local_image_path'] = unique_filename
                    save_to_json(available_cars, CARS_FILE)
                    send_message(chat_id, f"‚úÖ –§–æ—Ç–æ –¥–ª—è *{selected_car}* –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                    self.user_states.pop(chat_id, None)
                    self.user_data.pop(chat_id, None)
            else:
                self.user_states[chat_id] = State.AWAITING_NEW_CAR_PRICES
                send_message(chat_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã (–¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: `360 2160 7200`):")
                
        except requests.exceptions.RequestException as e:
            send_message(chat_id, f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except IOError as e:
            send_message(chat_id, f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def _notify_admins_new_user(self, user_id, user_data):
        admins = get_admins()
        if not admins: return

        client_profile = user_data.get('client_profile', {})
        if not client_profile:
            print(f"–û–®–ò–ë–ö–ê: client_profile –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∞–º.")
            return

        user_name = escape_markdown(client_profile.get('name', 'N/A'))
        username_str = f"(@{escape_markdown(user_data.get('username'))})" if user_data.get('username') else ""
        phone = escape_markdown(client_profile.get('phone', 'N/A'))
        city = escape_markdown(client_profile.get('city', 'N/A'))
        address = escape_markdown(client_profile.get('address', 'N/A'))
        dob_str = client_profile.get('dob', 'N/A')
        age_display = dob_str
        if dob_str != 'N/A':
            try:
                user_dob = datetime.strptime(dob_str, '%d.%m.%Y')
                today = datetime.now()
                calculated_age = today.year - user_dob.year - ((today.month, today.day) < (user_dob.month, user_dob.day))
                age_display = f"{dob_str} ({calculated_age} –ª–µ—Ç)"
            except ValueError:
                age_display = dob_str
        age_display = escape_markdown(age_display)
        experience = escape_markdown(client_profile.get('driving_experience', 'N/A'))
        license_num = escape_markdown(client_profile.get('license', 'N/A'))
        license_cat = escape_markdown(client_profile.get('license_category', 'N/A'))
        pref_car = escape_markdown(client_profile.get('preferred_car_type', 'N/A'))
        taxi_exp = escape_markdown(client_profile.get('taxi_experience', 'N/A'))
        driver_id = escape_markdown(client_profile.get('driver_id', 'N/A'))
        deposit = escape_markdown(client_profile.get('deposit', 'N/A'))

        message_text = (f"‚úÖ *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ö–õ–ò–ï–ù–¢! (–û–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è)*\n\n"
                        f"üë§ *–§–ò–û:* {user_name} {username_str}\n"
                        f"üÜî *Chat ID:* `{user_id}`\n\n"
                        f"--- *–ê–ù–ö–ï–¢–ê* ---\n"
                        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{phone}`\n"
                        f"üìç *–ì–æ—Ä–æ–¥:* {city}\n"
                        f"üè† *–ê–¥—Ä–µ—Å:* {address}\n"
                        f"üéÇ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–≤–æ–∑—Ä–∞—Å—Ç):* {age_display}\n"
                        f"Ïß¨ *–°—Ç–∞–∂ –≤–æ–∂–¥–µ–Ω–∏—è:* {experience} –ª–µ—Ç\n"
                        f"üí≥ *–ù–æ–º–µ—Ä –í/–£:* `{license_num}`\n"
                        f"üìã *–ö–∞—Ç–µ–≥–æ—Ä–∏—è –í/–£:* {license_cat}\n\n"
                        f"--- *–ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø* ---\n"
                        f"üöó *–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –∞–≤—Ç–æ:* {pref_car}\n"
                        f"üöï *–û–ø—ã—Ç –≤ —Ç–∞–∫—Å–∏:* {taxi_exp}\n"
                        f"üÜî *ID –í–æ–¥–∏—Ç–µ–ª—è:* {driver_id}\n"
                        f"üí∞ *–ì–æ—Ç–æ–≤ –∫ –∑–∞–ª–æ–≥—É:* {deposit}")

        keyboard = {
            'inline_keyboard': [
                [
                    {'text': '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', 'callback_data': f'user_approve_{user_id}'},
                    {'text': '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'callback_data': f'user_reject_{user_id}'}
                ],
                [
                    {'text': get_text('admin_btn_report_error', user_id), 'callback_data': f'user_error_{user_id}'}
                ]
            ]
        }

        for admin_id in admins:
            send_message(admin_id, message_text)

            if client_profile.get('passport_photo_id'):
                send_photo(admin_id, client_profile['passport_photo_id'], caption=f"üìÑ –ü–∞—Å–ø–æ—Ä—Ç, –ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (ID: {user_id})")

            if client_profile.get('passport_back_photo_id'):
                send_photo(admin_id, client_profile['passport_back_photo_id'], caption=f"üìÑ –ü–∞—Å–ø–æ—Ä—Ç, –æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (ID: {user_id})")

            if client_profile.get('license_front_photo_id'):
                send_photo(admin_id, client_profile['license_front_photo_id'], caption=f"üí≥ –í/–£, –ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (ID: {user_id})")
            if client_profile.get('license_back_photo_id'):
                send_photo(admin_id, client_profile['license_back_photo_id'], caption=f"üí≥ –í/–£, –æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (ID: {user_id})")

            send_message(admin_id, f"–ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name} (ID: `{user_id}`)?", reply_markup=keyboard)

    def _notify_admins_new_owner_car(self, chat_id, user_data):
        admins = get_admins()
        if not admins: return

        owner_profile = user_data.get('owner_profile', {})
        car_info = load_from_json(OWNER_CARS_FILE).get(chat_id, {})
        if not owner_profile:
            print(f"–û–®–ò–ë–ö–ê: owner_profile –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω–∞–º.")
            return

        registrator_name = escape_markdown(owner_profile.get('registrator_name', 'N/A'))
        owner_name = escape_markdown(owner_profile.get('owner_name', 'N/A'))
        username_str = f"(@{escape_markdown(user_data.get('username'))})" if user_data.get('username') else ""
        phone = escape_markdown(owner_profile.get('phone', 'N/A'))
        car_brand = escape_markdown(car_info.get('car_brand', 'N/A'))
        car_plate = escape_markdown(car_info.get('car_plate', 'N/A'))
        car_color = escape_markdown(car_info.get('car_color', 'N/A'))
        car_year = escape_markdown(car_info.get('car_year', 'N/A'))
        car_mileage = escape_markdown(car_info.get('car_mileage', 'N/A'))
        car_transmission = escape_markdown(car_info.get('car_transmission', 'N/A'))
        car_type = escape_markdown(car_info.get('car_type', 'N/A'))
        car_vin = escape_markdown(car_info.get('car_vin', 'N/A'))
        car_insurance = escape_markdown(owner_profile.get('car_insurance', 'N/A'))
        gps_camera_ready = escape_markdown(owner_profile.get('gps_camera_ready', 'N/A'))

        desired_price_text = f"üí∞ *–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞ (–¥–µ–Ω—å):* {car_info.get('desired_price_day', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Å–æ–º–æ–Ω–∏\n\n"
        message_text = (f"üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –°–û–ë–°–¢–í–ï–ù–ù–ò–ö–ê –∞–≤—Ç–æ!*\n\n"             
                        f"üë§ *–§–ò–û –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:* {registrator_name}{username_str}\n"
                        f"üë§ *–§–ò–û –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:* {owner_name}\n"
                        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{phone}`\n"
                        f"üÜî *Chat ID:* `{chat_id}`\n\n"
                        f"--- *–î–∞–Ω–Ω—ã–µ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é* ---\n"
                        f"üöó *–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å:* {car_brand}\n"
                        f"üî¢ *–ì–æ—Å. –Ω–æ–º–µ—Ä:* `{car_plate}`\n"
                        f"üé® *–¶–≤–µ—Ç:* {car_color}\n"
                        f"üìÖ *–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:* {car_year}\n"
                        f"üõ£Ô∏è *–ü—Ä–æ–±–µ–≥:* {car_mileage} –∫–º\n"
                        f"‚öôÔ∏è *–ö–æ—Ä–æ–±–∫–∞:* {car_transmission}\n"
                        f"‚õΩ *–¢–∏–ø:* {car_type}\n"
                        f"üîç *VIN:* `{car_info.get('car_vin', 'N/A')}`\n\n"
                        f"{desired_price_text}"
                        f"üõ°Ô∏è *–°—Ç—Ä–∞—Ö–æ–≤–∫–∞:* {car_insurance}\n"
                        f"üõ∞Ô∏è *–ì–æ—Ç–æ–≤ –∫ GPS/–ö–∞–º–µ—Ä–µ:* {gps_camera_ready}\n\n"
                        f"–ó–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
        

        keyboard = {
            'inline_keyboard': [
                [
                    {'text': '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', 'callback_data': f'user_approve_{chat_id}'},
                    {'text': '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'callback_data': f'user_reject_{chat_id}'}
                ],
                [
                    {'text': get_text('admin_btn_report_error', chat_id), 'callback_data': f'user_error_{chat_id}'}
                ]
            ]
        }

        for admin_id in admins:
            send_message(admin_id, message_text)
            time.sleep(0.5)

            car_photo_ids = car_info.get('car_photo_ids', [])
            if car_photo_ids:
                send_media_group_mixed(admin_id, car_photo_ids, caption=f"üì∏ –§–æ—Ç–æ –∞–≤—Ç–æ (–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ ID: {chat_id})")
                time.sleep(1)

            if owner_profile.get('tech_passport_photo_id'):
                send_photo(admin_id, owner_profile['tech_passport_photo_id'], caption=f"üöó –¢–µ—Ö. –ø–∞—Å–ø–æ—Ä—Ç, –ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (ID: {chat_id})")
                time.sleep(0.5)
            
            if owner_profile.get('tech_passport_back_photo_id'):
                send_photo(admin_id, owner_profile['tech_passport_back_photo_id'], caption=f"üöó –¢–µ—Ö. –ø–∞—Å–ø–æ—Ä—Ç, –æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (ID: {chat_id})")
                time.sleep(0.5)

            if owner_profile.get('owner_passport_photo_id'):
                send_photo(admin_id, owner_profile['owner_passport_photo_id'], caption=f"üë§ –ü–∞—Å–ø–æ—Ä—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –ª–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (ID: {chat_id})")
                time.sleep(0.5)
            
            if owner_profile.get('owner_passport_back_photo_id'):
                send_photo(admin_id, owner_profile['owner_passport_back_photo_id'], caption=f"üë§ –ü–∞—Å–ø–æ—Ä—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, –æ–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ (ID: {chat_id})")
                time.sleep(0.5)

            send_message(admin_id, f"–ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É {registrator_name} (ID: `{chat_id}`)?", reply_markup=keyboard)


    def _notify_admins_new_rental(self, rental_id, rental_data):
        admins = get_admins()
        if not admins: return

        users = load_from_json(USERS_FILE)
        user_info = users.get(rental_data['chat_id'], {})
        if not user_info:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {rental_data['chat_id']} –¥–ª—è –∑–∞—è–≤–∫–∏ {rental_id}")
            return

        username_str = f" (@{user_info.get('username')})" if user_info.get('username') else ""
    
        main_caption = (f"üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É ‚Ññ{rental_id}*\n\n"
                        f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {rental_data.get('client_name', '–ù–µ —É–∫–∞–∑–∞–Ω')}{username_str}\n"
                        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{rental_data.get('client_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}`\n"
                        f"üí≥ *–í–æ–¥. —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ:* `{rental_data.get('client_license', '–ù–µ —É–∫–∞–∑–∞–Ω')}`\n\n"
                        f"üöó *–ê–≤—Ç–æ:* {rental_data.get('car', 'N/A')}\n"
                        f"‚è≥ *–ü–µ—Ä–∏–æ–¥:* {rental_data.get('period', 'N/A')}\n" 
                        f"üí∞ *–¶–µ–Ω–∞:* {rental_data.get('price', 'N/A')}\n\n"
                        f"*(–î–∞—Ç–∞: {datetime.fromisoformat(rental_data['timestamp']).strftime('%d.%m.%Y %H:%M')})*")

        car_info = get_available_cars().get(rental_data.get('car', ''), {})
        car_photo_paths = car_info.get('local_image_paths', [])

        client_profile = user_info.get('client_profile', {})
        document_photo_ids = []
        if client_profile.get('passport_photo_id'):
            document_photo_ids.append(client_profile['passport_photo_id'])
        if client_profile.get('passport_back_photo_id'):
            document_photo_ids.append(client_profile['passport_back_photo_id'])
        if client_profile.get('license_front_photo_id'):
            document_photo_ids.append(client_profile['license_front_photo_id'])
        if client_profile.get('license_back_photo_id'):
            document_photo_ids.append(client_profile['license_back_photo_id'])
        
        keyboard = {
            'inline_keyboard': [[
                {'text': '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', 'callback_data': f'rental_approve_{rental_id}'},
                {'text': '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 'callback_data': f'rental_reject_{rental_id}'}
            ]]
        }

        for admin_id in admins:
            if car_photo_paths:
                send_media_group_mixed(admin_id, car_photo_paths, caption=main_caption)
            else:
                send_message(admin_id, main_caption)
        
            time.sleep(0.5)

            if document_photo_ids:
                user_id_for_caption = rental_data['chat_id']
                docs_caption = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ (ID: {user_id_for_caption})"
                send_media_group_mixed(admin_id, document_photo_ids, caption=docs_caption)
        
            time.sleep(0.5)

            send_message(admin_id, f"–ü—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{rental_id}?", reply_markup=keyboard)

    def _handle_commands(self, chat_id, text, user):
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        command_map = {
            get_text('menu_rent', chat_id): '/rent',
            get_text('menu_list_cars', chat_id): '/listcars',
            get_text('menu_my_rentals', chat_id): '/myrentals',
            get_text('menu_profile', chat_id): '/profile',
            get_text('menu_contact', chat_id): '/contact',
            get_text('menu_help', chat_id): '/help',
            get_text('menu_register_client', chat_id): '/register',
            get_text('menu_register_owner', chat_id): '/owner_register',
            get_text('menu_chat_manager', chat_id): '/chat',
            get_text('end_chat_button', chat_id): '/endchat',
            get_text('menu_language', chat_id): '/language' # <--- –î–û–ë–ê–í–õ–ï–ù–ê –≠–¢–ê –°–¢–†–û–ö–ê
        }

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —ç—Ç–æ –æ–¥–Ω–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫, –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
        command_text = command_map.get(text, text)

        parts = command_text.split(maxsplit=1)
        command = parts[0]
        args = parts[1] if len(parts) > 1 else ""

        is_admin = chat_id in get_admins()
        is_staff = self._is_staff(chat_id)
        users = load_from_json(USERS_FILE)
        user_info = users.get(chat_id, {})
        user_role = user_info.get('role')

        if self.user_states.get(chat_id) == State.ADMIN_IN_CHAT_WITH_USER:
            target_info = self.user_data.get(chat_id, {})
            target_user_name = target_info.get('target_user_name', '')
            end_chat_btn_text = get_text('admin_end_chat_button', chat_id, user_name=target_user_name)
            if text == end_chat_btn_text:
                command = '/endchat'

        if command == '/start':
            self.user_states.pop(chat_id, None)
            self.user_data.pop(chat_id, None)
            user_name = user.get('first_name') or user.get('username') or get_text('guest', chat_id)

            if is_admin:
                send_message(chat_id, get_text('welcome', chat_id, name=user_name), 
                               reply_markup=get_main_menu_keyboard(chat_id))
                send_message(chat_id, "üëë *–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /adminhelp –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
                return

            if 'lang' not in user_info:
                keyboard = {
                    'inline_keyboard': [
                        [
                            {'text': '–†—É—Å—Å–∫–∏–π üá∑üá∫', 'callback_data': 'setlang_ru'},
                            {'text': '–¢–æ“∑–∏–∫”£ üáπüáØ', 'callback_data': 'setlang_tj'}
                        ]
                    ]
                }
                send_message(chat_id, get_text('choose_language', chat_id), reply_markup=keyboard)
            
            elif user_info.get('role') in ['client', 'owner']:
                 send_message(chat_id, get_text('welcome', chat_id, name=user_name), 
                               reply_markup=get_main_menu_keyboard(chat_id))
            
            else:
                role_selection_keyboard = create_keyboard([
                    [
                        {'text': get_text('start_btn_client', chat_id), 'callback_data': 'start_as_client'},
                        {'text': get_text('start_btn_owner', chat_id), 'callback_data': 'start_as_owner'}
                    ],
                    [
                        {'text': get_text('go_to_main_menu', chat_id), 'callback_data': 'show_main_menu'}
                    ]
                ], inline=True)

                welcome_text = get_text('welcome', chat_id, name=user_name)
                prompt_text = get_text('choose_your_role', chat_id)
                
                send_message(chat_id, f"{welcome_text}\n\n{prompt_text}", reply_markup=role_selection_keyboard)
                
        elif command == '/chat':
            self.user_states[chat_id] = State.IN_CHAT_WITH_MANAGER
            chat_keyboard = create_keyboard([[get_text('end_chat_button', chat_id)]], one_time=False)
            send_message(chat_id, get_text('enter_chat_mode', chat_id), reply_markup=chat_keyboard)
            return

        elif command == '/endchat':
            current_state = self.user_states.get(chat_id)
            
            if current_state == State.IN_CHAT_WITH_MANAGER:
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                send_message(chat_id, get_text('exit_chat_mode', chat_id), reply_markup=get_main_menu_keyboard(chat_id))
            
            elif current_state == State.ADMIN_IN_CHAT_WITH_USER:
                target_info = self.user_data.get(chat_id, {})
                target_user_name = target_info.get('target_user_name', '')
                
                self.user_states.pop(chat_id, None)
                self.user_data.pop(chat_id, None)
                send_message(chat_id, get_text('admin_exit_chat_session', chat_id, user_name=target_user_name), reply_markup=get_main_menu_keyboard(chat_id))
            
            return
        
        elif command == '/help':
            help_text_parts = [
                get_text('help_intro', chat_id),
                get_text('register_cmd', chat_id),
                get_text('owner_register_cmd', chat_id),
                "\n" + get_text('rent_cmd', chat_id),
                get_text('listcars_cmd', chat_id),
                get_text('myrentals_cmd', chat_id),
                get_text('profile_cmd', chat_id),
                get_text('edit_profile_cmd', chat_id),
                get_text('message_cmd', chat_id),
                get_text('contact_cmd', chat_id),
                get_text('faq_cmd', chat_id),
                get_text('lang_cmd', chat_id)
            ]
            
            if 'owner' in user_info.get('active_roles', []):
                help_text_parts.extend([
                    get_text('owner_help_intro', chat_id),
                    get_text('owner_payouts_cmd', chat_id),
                    get_text('owner_drivers_cmd', chat_id),
                    get_text('owner_service_cmd', chat_id),
                    get_text('owner_calendar_cmd', chat_id),
                    get_text('owner_contract_cmd', chat_id)
                ])

            if is_admin:
                help_text_parts.append(get_text('admin_help_cmd', chat_id))
            elif is_staff:
                staff_role = get_staff().get(str(chat_id), {}).get('role')
                if staff_role == 'manager':
                    help_text_parts.append(get_text('staff_help_manager', chat_id))
                elif staff_role == 'mechanic':
                    help_text_parts.append(get_text('staff_help_mechanic', chat_id))
                elif staff_role == 'accountant':
                    help_text_parts.append(get_text('staff_help_accountant', chat_id))
                
            send_message(chat_id, "\n".join(help_text_parts))

        elif command == '/register':
            user_info = users.get(chat_id, {})

            if 'client' in user_info.get('active_roles', []):
                send_message(chat_id, get_text('already_registered_as_driver', chat_id))
                return
            
            if user_info.get('status') == 'pending':
                send_message(chat_id, get_text('registration_pending', chat_id))
                return
                
            self.user_data[chat_id] = {
                'username': user.get('username'),
                'first_name': user.get('first_name'),
                'last_name': user.get('last_name'),
                'state_history': []
            }
            self._set_next_state(chat_id, State.AWAITING_NAME)
            send_message(chat_id, get_text('start_registration', chat_id), reply_markup=get_cancel_keyboard(chat_id))

        elif command == '/owner_register':
            user_info = users.get(chat_id, {})

            if 'owner' in user_info.get('active_roles', []):
                send_message(chat_id, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫.")
                return
            
            if user_info.get('status') == 'pending':
                send_message(chat_id, get_text('registration_pending', chat_id))
                return
                
            self.user_data[chat_id] = {
                'username': user.get('username'),
                'state_history': []
            }
            self._set_next_state(chat_id, State.AWAITING_OWNER_REGISTRATOR_NAME)
            send_message(chat_id, get_text('owner_start_registration', chat_id), reply_markup=get_cancel_keyboard(chat_id))
        
        elif command == '/payouts':
            if 'owner' not in user_info.get('active_roles', []):
                send_message(chat_id, get_text('must_be_owner', chat_id))
                return
            send_message(chat_id, get_text('payouts_info', chat_id))
        
        elif command == '/drivers':
            if 'owner' not in user_info.get('active_roles', []):
                send_message(chat_id, get_text('must_be_owner', chat_id))
                return
                
            owner_car = load_from_json(OWNER_CARS_FILE).get(chat_id, {})
            if not owner_car:
                send_message(chat_id, "‚ùóÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–≤—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
                
            if int(chat_id) % 2 == 0:
                send_message(chat_id, get_text('drivers_info_assigned', chat_id, 
                                             car_brand=owner_car.get('car_brand'), 
                                             car_plate=owner_car.get('car_plate')))
            else:
                send_message(chat_id, get_text('drivers_info_free', chat_id, 
                                             car_brand=owner_car.get('car_brand'), 
                                             car_plate=owner_car.get('car_plate')))

        elif command == '/service':
            if 'owner' not in user_info.get('active_roles', []):
                send_message(chat_id, get_text('must_be_owner', chat_id))
                return
                
            self.user_states[chat_id] = State.AWAITING_SERVICE_REQUEST
            send_message(chat_id, get_text('service_request_prompt', chat_id), reply_markup={'remove_keyboard': True})

        elif command == '/calendar':
            if 'owner' not in user_info.get('active_roles', []):
                send_message(chat_id, get_text('must_be_owner', chat_id))
                return
            send_message(chat_id, get_text('calendar_info', chat_id))

        elif command == '/contract':
            if 'owner' not in user_info.get('active_roles', []):
                send_message(chat_id, get_text('must_be_owner', chat_id))
                return
            send_message(chat_id, get_text('contract_info', chat_id))

        elif command == '/editprofile':
            users = load_from_json(USERS_FILE)
            user_info = users.get(chat_id)

            if not user_info:
                send_message(chat_id, get_text('not_registered', chat_id))
                return

            active_roles = user_info.get('active_roles', [])
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–µ —Ä–æ–ª–∏, –¥–∞–µ–º –µ–º—É –≤—ã–±–æ—Ä
            if 'client' in active_roles and 'owner' in active_roles:
                edit_keyboard = create_keyboard([
                    [{'text': get_text('edit_as_client_btn', chat_id), 'callback_data': 'profile_edit_as_client'}],
                    [{'text': get_text('edit_as_owner_btn', chat_id), 'callback_data': 'profile_edit_as_owner'}]
                ], inline=True)
                # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
                response = send_message(chat_id, get_text('choose_field_to_edit', chat_id), reply_markup=edit_keyboard)
                if response and response.get('ok'):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    if chat_id not in self.user_data:
                        self.user_data[chat_id] = {}
                    self.user_data[chat_id]['edit_menu_message_id'] = response['result']['message_id']
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
            
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ä–æ–ª—å –∫–ª–∏–µ–Ω—Ç–∞, —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            elif 'client' in active_roles:
                self._start_profile_edit(chat_id, 'client')
                
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ä–æ–ª—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞, —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
            elif 'owner' in active_roles:
                self._start_profile_edit(chat_id, 'owner')
                
            # –ï—Å–ª–∏ —Ä–æ–ª–µ–π –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            else:
                send_message(chat_id, get_text('not_registered', chat_id))

        elif command == '/rent':
            if chat_id not in users:
                send_message(chat_id, get_text('must_register_first', chat_id))
                return

            status = users[chat_id].get('status')
            
            if status == 'pending':
                send_message(chat_id, get_text('cant_rent_pending', chat_id))
                return
            
            if status == 'blocked':
                send_message(chat_id, get_text('you_are_blocked', chat_id))
                return

            available_cars = get_available_cars()
            if not available_cars:
                send_message(chat_id, get_text('no_cars_available', chat_id))
                return
            
            user_info_for_rent = users.get(chat_id, {})
            self.user_data[chat_id] = {
                'chat_id': chat_id, 
                'user_name': self._get_user_display_name(user_info_for_rent), 
                'username': user.get('username')
            }

            search_button = {
                'text': get_text('menu_search', chat_id),
                'switch_inline_query_current_chat': '' 
            }
            
            keyboard = {
                'inline_keyboard': [
                    [search_button]
                ]
            }
            
            send_message(
                chat_id, 
                get_text('choose_car_for_rent', chat_id) + "\n\n" + "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.",
                reply_markup=keyboard
            )
        
        elif command == '/listcars':
            available_cars = get_available_cars()
            if not available_cars:
                send_message(chat_id, get_text('no_cars_available', chat_id))
                return

            brands = sorted(list(set([name.split(' ')[0] for name in available_cars.keys()])))
            
            if not brands:
                send_message(chat_id, get_text('no_cars_available', chat_id))
                return

            buttons = [
                {'text': brand, 'callback_data': f'listcars_brand_{brand}'}
                for brand in brands
            ]

            keyboard = create_keyboard([buttons[i:i + 3] for i in range(0, len(buttons), 3)], inline=True)

            send_message(chat_id, "üóÇÔ∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:*", reply_markup=keyboard)
            
        elif command == '/profile':
            if chat_id in users:
                u = users[chat_id]
                profile_text_parts = [get_text('profile_title', chat_id)]
                
                active_roles = u.get('active_roles', [])
                
                if 'client' in active_roles and 'client_profile' in u:
                    cp = u['client_profile']
                    profile_text_parts.append("\n*--- –ü—Ä–æ—Ñ–∏–ª—å –í–æ–¥–∏—Ç–µ–ª—è ---*")
                    client_details = [
                        get_text('profile_name', chat_id, name=cp.get('name', 'N/A')),
                        get_text('profile_phone', chat_id, phone=cp.get('phone', 'N/A')),
                        get_text('profile_city', chat_id, city=cp.get('city', 'N/A')),
                        get_text('profile_address', chat_id, address=cp.get('address', 'N/A')),
                        get_text('profile_age', chat_id, dob=cp.get('dob', 'N/A')),
                        get_text('profile_driving_experience', chat_id, experience=cp.get('driving_experience', 'N/A')),
                        get_text('profile_license', chat_id, license=cp.get('license', 'N/A'))
                    ]
                    profile_text_parts.extend(client_details)

                if 'owner' in active_roles and 'owner_profile' in u:
                    op = u['owner_profile']
                    car_info = load_from_json(OWNER_CARS_FILE).get(chat_id, {})
                    profile_text_parts.append("\n*--- –ü—Ä–æ—Ñ–∏–ª—å –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ ---*")
                    
                    owner_details = []

                    if op.get('registrator_name'):
                        owner_details.append(f"‚ñ™Ô∏è *{get_text('field_registrator_name', chat_id)}:* {op['registrator_name']}")
                    
                    if op.get('owner_name'):
                        owner_details.append(f"‚ñ™Ô∏è *{get_text('field_owner_name', chat_id)}:* {op['owner_name']}")

                    owner_details.extend([
                        get_text('profile_phone', chat_id, phone=op.get('phone', 'N/A')),
                        f"‚ñ™Ô∏è *–ê–≤—Ç–æ–º–æ–±–∏–ª—å:* {car_info.get('car_brand', 'N/A')}",
                        f"‚ñ™Ô∏è *–ì–æ—Å. –Ω–æ–º–µ—Ä:* `{car_info.get('car_plate', 'N/A')}`"
                    ])

                    profile_text_parts.extend(owner_details)

                profile_text_parts.append(f"\n*–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:* {u.get('status', 'N/A')}")
                
                edit_keyboard = create_keyboard([
                    [{'text': get_text('edit_as_client_btn', chat_id), 'callback_data': 'profile_edit_as_client'}],
                    [{'text': get_text('edit_as_owner_btn', chat_id), 'callback_data': 'profile_edit_as_owner'}]
                ], inline=True)

                send_message(chat_id, "\n".join(profile_text_parts), reply_markup=edit_keyboard)

            else:
                send_message(chat_id, get_text('not_registered', chat_id))  
        
        elif command == '/myrentals':
            rentals = load_from_json(RENTALS_FILE)
            user_rentals = [
                get_text('rental_list_item', chat_id, 
                         id=rid, car=r['car'], status=r['status'], 
                         date=datetime.fromisoformat(r['timestamp']).strftime('%d.%m.%Y'))
                for rid, r in rentals.items() 
                if r.get('chat_id') == chat_id
            ]
            
            send_message(chat_id, f"{get_text('your_rentals_title', chat_id)}\n\n" + 
                       ("\n".join(user_rentals) if user_rentals else get_text('no_rentals_yet', chat_id)))
        
        elif command == '/message':
            if not args:
                send_message(chat_id, get_text('message_to_admin_usage', chat_id))
                return
                
            admins = get_admins()
            if not admins:
                send_message(chat_id, get_text('no_admins_online', chat_id))
                return
                
            user_name = users.get(chat_id, {}).get('name', user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))
            user_phone = users.get(chat_id, {}).get('phone', 'N/A')
            username_mention = f" (@{user['username']})" if user.get('username') else ""
            
            admin_message = (f"üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}{username_mention}*\n"
                            f"*ID:* `{chat_id}`\n*–¢–µ–ª:* `{user_phone}`\n\n"
                            f"*–¢–µ–∫—Å—Ç:*\n{args}")
                            
            for admin_id in admins:
                send_message(admin_id, admin_message)
                
            send_message(chat_id, get_text('message_sent_to_admin', chat_id))
        
        elif command == '/contact':
            send_message(chat_id, f"{get_text('contact_info_title', chat_id)}\n\n{get_text('contact_info_details', chat_id)}", disable_web_page_preview=True)
            
            send_request('sendLocation', {
                'chat_id': chat_id,
                'latitude': 40.264263,
                'longitude': 69.655816
            })
        
        elif command == '/faq':
            send_message(chat_id, f"{get_text('faq_title', chat_id)}\n\n{get_text('faq_content', chat_id)}")
        
        elif command == '/language':
            keyboard = {
                'inline_keyboard': [
                    [
                        {'text': '–†—É—Å—Å–∫–∏–π üá∑üá∫', 'callback_data': 'setlang_ru'},
                        {'text': '–¢–æ“∑–∏–∫”£ üáπüáØ', 'callback_data': 'setlang_tj'}
                    ]
                ]
            }
            send_message(chat_id, get_text('choose_language', chat_id), reply_markup=keyboard)

        elif command == '/selectcar':
            car_name = args
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—à–∏–Ω—ã –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ
            available_cars = get_available_cars()

            if car_name in available_cars:
                if chat_id not in users or users[chat_id].get('status') != 'active':
                    send_message(chat_id, get_text('must_register_first', chat_id))
                    return

                # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É
                send_message(chat_id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ...")

                self.user_data[chat_id] = {
                    'chat_id': chat_id, 'user_name': self._get_user_display_name(user_info),
                    'username': user.get('username'), 'car': car_name
                }
                car_info = available_cars[car_name]
                full_caption = (
                    f"üìú *–û–ø–∏—Å–∞–Ω–∏–µ:* {car_info.get('description', 'N/A')}\n\n"
                    f"*{get_text('car_details_price', chat_id)}*\n"
                    f"{get_text('price_day', chat_id, price=car_info['prices'][0])}\n"
                    f"{get_text('price_week', chat_id, price=car_info['prices'][1])}\n"
                    f"{get_text('price_month', chat_id, price=car_info['prices'][2])}\n\n"
                    f"*{get_text('car_specs', chat_id)}*\n"
                    f"{get_text('car_year', chat_id, year=car_info.get('year', 'N/A'))}\n"
                    f"{get_text('car_fuel', chat_id, fuel_type=car_info.get('fuel_type', 'N/A'))}\n"
                    f"{get_text('car_engine', chat_id, engine=car_info.get('engine', 'N/A'))}\n"
                    f"{get_text('car_transmission', chat_id, transmission=car_info.get('transmission', 'N/A'))}\n"
                    f"{get_text('car_seats', chat_id, seats=car_info.get('seats', 'N/A'))}"
                )
                
                # --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ---
                
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ file_id
                existing_file_ids = car_info.get('telegram_file_ids', [])
                
                # 2. –í—ã–±–∏—Ä–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å: file_id (–±—ã—Å—Ç—Ä–æ) –∏–ª–∏ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (–º–µ–¥–ª–µ–Ω–Ω–æ)
                media_to_send = existing_file_ids or car_info.get('local_image_paths', [])
                
                if not media_to_send:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ñ–æ—Ç–æ, –Ω–∏ file_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    send_message(chat_id, full_caption)
                else:
                    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –≤ –æ—Ç–≤–µ—Ç –Ω–æ–≤—ã–µ file_id
                    new_file_ids = send_media_group_mixed(chat_id, media_to_send, caption=full_caption)
                    
                    # 4. –ï—Å–ª–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ñ–∞–π–ª—ã (–∞ –Ω–µ id) –∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–µ id, –°–û–•–†–ê–ù–Ø–ï–ú –∏—Ö
                    if not existing_file_ids and new_file_ids:
                        print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ file_id –¥–ª—è '{car_name}': {new_file_ids}")
                        available_cars[car_name]['telegram_file_ids'] = new_file_ids
                        save_to_json(available_cars, CARS_FILE)

                # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø ---
                
                time.sleep(0.3)
                self.user_states[chat_id] = State.AWAITING_RENT_TYPE
                rent_type_keyboard = create_keyboard([
                    [{'text': get_text('short_term', chat_id), 'callback_data': 'rent_type_short'},
                     {'text': get_text('long_term', chat_id), 'callback_data': 'rent_type_long'}]
                ], inline=True)
                send_message(chat_id, get_text('choose_rent_type', chat_id), reply_markup=rent_type_keyboard)
            
            else:
                send_message(chat_id, "‚ùóÔ∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–π –º–∞—à–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        
        elif is_admin or is_staff:
            self._handle_admin_commands(chat_id, command, args, user)
        
        elif command.startswith('/'):
            send_message(chat_id, get_text('unknown_command', chat_id))

    def _handle_admin_commands(self, chat_id, command, args, user):
        main_admin_id = load_from_json(ADMIN_FILE).get('main_admin')
        is_admin = chat_id in get_admins()
        is_staff = self._is_staff(chat_id)
        staff_role = get_staff().get(str(chat_id), {}).get('role') if is_staff else None
        users = load_from_json(USERS_FILE)
        
        if command == '/adminhelp' and is_admin:
            help_text = ("üëë *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
                         "*/listusers* - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                         "*/userinfo <ID|@user>* - –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n"
                         "*/block <ID|@user>* - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                         "*/unblock <ID|@user>* - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n"
                         "*/deleteuser <ID|@user>* - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                         "*/broadcast <—Ç–µ–∫—Å—Ç>* - –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º.\n"
                         "*/reply <ID|@user> <—Ç–µ–∫—Å—Ç>* - –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                         "*/listallrentals* - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É.\n\n"
                         "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –¥–ª—è –∞—Ä–µ–Ω–¥—ã:*\n"
                         "*/addcar* | */editcar* | */deletecar*\n\n"
                         "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º:*\n"
                         "*/addstaff <ID> <role>* - –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (manager, mechanic, accountant)\n"
                         "*/removestaff <ID>* - –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
                         "*/liststaff* - –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n"
                         "*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤—ã–ø–ª–∞—Ç—ã:*\n"
                         "*/payout <ID> <—Å—É–º–º–∞>* - –£–≤–µ–¥–æ–º–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –æ –≤—ã–ø–ª–∞—Ç–µ.\n"
                         "*/servicedone <ID>* - –£–≤–µ–¥–æ–º–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¢–û.")
                         
            if str(chat_id) == main_admin_id:
                help_text += "\n\n*–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω:*\n*/listadmins* | */addadmin <ID>* | */removeadmin <ID>*"
                
            send_message(chat_id, help_text)
            
        elif command == '/listusers' and (is_admin or (is_staff and staff_role == 'manager')):
            users = load_from_json(USERS_FILE)
            if not users:
                send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
                
            users_list = ["*ID* | *–†–æ–ª—å* | *–ò–º—è* | *–°—Ç–∞—Ç—É—Å* | *Username* | *–Ø–∑—ã–∫*"]
            role_map = {
                'client': 'Client',
                'owner': 'Owner',
                'admin': 'Admin'
            }
            
            for uid, udata in users.items():
                username = f"@{udata.get('username')}" if udata.get('username') else "N/A"
                lang = udata.get('lang', 'N/A').upper()
                role = role_map.get(udata.get('role', 'client'), 'N/A')
                users_list.append(f"`{uid}` | {role} | {udata.get('name', 'N/A')} | {udata.get('status', 'N/A')} | {username} | {lang}")
                
            message_parts = []
            current_part = ""
            
            for line in users_list:
                if len(current_part) + len(line) + 1 > 4096:
                    message_parts.append(current_part)
                    current_part = ""
                current_part += line + "\n"
                
            if current_part:
                message_parts.append(current_part)
                
            for part in message_parts:
                if part.strip():
                    send_message(chat_id, part)
                    time.sleep(0.3)
                    
        elif command in ['/userinfo', '/block', '/unblock', '/deleteuser'] and (is_admin or (is_staff and staff_role == 'manager')):
            if not args:
                send_message(chat_id, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `{command} <ID –∏–ª–∏ @username>`")
                return
                
            user_id, u_data = find_user_by_identifier(args)
            if not u_data:
                send_message(chat_id, get_text('admin_user_not_found', chat_id, user=args))
                return
                
            if command == '/userinfo':
                roles = u_data.get('active_roles', [])
                roles_text = ", ".join([r.capitalize() for r in roles]) if roles else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"

                info_text = (f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}*\n\n"
                             f"‚ñ™Ô∏è *Username:* @{u_data.get('username', 'N/A')}\n"
                             f"‚ñ™Ô∏è *–†–æ–ª–∏:* {roles_text}\n"
                             f"‚ñ™Ô∏è *–°—Ç–∞—Ç—É—Å:* {u_data.get('status', 'N/A')}\n"
                             f"‚ñ™Ô∏è *–Ø–∑—ã–∫:* {u_data.get('lang', 'N/A').upper()}\n")

                if 'client_profile' in u_data:
                    cp = u_data['client_profile']
                    info_text += (f"\n*--- –ü—Ä–æ—Ñ–∏–ª—å –í–æ–¥–∏—Ç–µ–ª—è ---*\n"
                                  f"‚ñ™Ô∏è *–§–ò–û:* {cp.get('name', 'N/A')}\n"
                                  f"‚ñ™Ô∏è *–¢–µ–ª–µ—Ñ–æ–Ω:* `{cp.get('phone', 'N/A')}`\n"
                                  f"‚ñ™Ô∏è *–ì–æ—Ä–æ–¥:* {cp.get('city', 'N/A')}\n"
                                  f"‚ñ™Ô∏è *–ê–¥—Ä–µ—Å:* {cp.get('address', 'N/A')}\n"
                                  f"‚ñ™Ô∏è *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* {cp.get('dob', 'N/A')}\n"
                                  f"‚ñ™Ô∏è *–°—Ç–∞–∂:* {cp.get('driving_experience', 'N/A')} –ª–µ—Ç\n"
                                  f"‚ñ™Ô∏è *–í/–£:* `{cp.get('license', 'N/A')}`\n"
                                  f"‚ñ™Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {cp.get('license_category', 'N/A')}\n"
                                  f"‚ñ™Ô∏è *–ü—Ä–µ–¥–ø. –∞–≤—Ç–æ:* {cp.get('preferred_car_type', 'N/A')}\n"
                                  f"‚ñ™Ô∏è *–û–ø—ã—Ç –≤ —Ç–∞–∫—Å–∏:* {cp.get('taxi_experience', 'N/A')}\n"
                                  f"‚ñ™Ô∏è *ID –í–æ–¥–∏—Ç–µ–ª—è:* {cp.get('driver_id', 'N/A')}\n"
                                  f"‚ñ™Ô∏è *–ó–∞–ª–æ–≥:* {cp.get('deposit', 'N/A')}\n")

                if 'owner_profile' in u_data:
                    op = u_data['owner_profile']
                    owner_car_data = load_from_json(OWNER_CARS_FILE).get(user_id, {})
                    info_text += (f"\n*--- –ü—Ä–æ—Ñ–∏–ª—å –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ ---*\n"
                                  f"‚ñ™Ô∏è *–§–ò–û –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:* {op.get('registrator_name', 'N/A')}\n"
                                  f"‚ñ™Ô∏è *–§–ò–û –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞:* {op.get('owner_name', 'N/A')}\n"
                                  f"‚ñ™Ô∏è *–¢–µ–ª–µ—Ñ–æ–Ω:* `{op.get('phone', 'N/A')}`\n")
                    if owner_car_data:
                        info_text += (f"‚ñ™Ô∏è *–ê–≤—Ç–æ:* {owner_car_data.get('car_brand', 'N/A')}\n"
                                      f"‚ñ™Ô∏è *–ì–æ—Å. –Ω–æ–º–µ—Ä:* `{owner_car_data.get('car_plate', 'N/A')}`")

                send_message(chat_id, info_text)

            elif command == '/deleteuser':
                if user_id == str(MAIN_ADMIN_CHAT_ID):
                    send_message(chat_id, "‚ùóÔ∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    return
                    
                users = load_from_json(USERS_FILE)
                if user_id in users:
                    if users[user_id].get('role') == 'owner':
                        owner_cars = load_from_json(OWNER_CARS_FILE)
                        if user_id in owner_cars:
                            del owner_cars[user_id]
                            save_to_json(owner_cars, OWNER_CARS_FILE)
                            
                    del users[user_id]
                    save_to_json(users, USERS_FILE)
                    send_message(chat_id, get_text('admin_user_deleted', chat_id, name=u_data.get('name'), id=user_id))
                    send_message(user_id, get_text('admin_user_profile_deleted_notification', user_id))
                    
            else:
                new_status = 'blocked' if command == '/block' else 'active'
                users = load_from_json(USERS_FILE)
                users[user_id]['status'] = new_status
                save_to_json(users, USERS_FILE)
                
                send_message(chat_id, get_text('admin_status_changed_notification', chat_id, 
                                             name=u_data.get('name'), id=user_id, status=new_status))
                send_message(user_id, get_text('admin_user_status_changed_notification', user_id, status=new_status))
                
        elif command == '/broadcast' and (is_admin or (is_staff and staff_role == 'manager')):
            if not args:
                send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/broadcast <—Ç–µ–∫—Å—Ç>`")
                return
                
            users = load_from_json(USERS_FILE)
            active_users_count = sum(1 for u in users.values() if u.get('status') == 'active')
            
            if active_users_count == 0:
                send_message(chat_id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ—Ç.")
                return
                
            self.user_states[chat_id] = State.AWAITING_BROADCAST_CONFIRMATION
            self.user_data[chat_id] = {'broadcast_message': args}
            
            send_message(chat_id, get_text('admin_broadcast_confirm', chat_id, 
                                         count=active_users_count, text=args))
                                         
        elif command == '/reply' and (is_admin or is_staff):
            try:
                target_identifier, reply_text = args.split(' ', 1)
            except ValueError:
                send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/reply <ID|@user> <—Ç–µ–∫—Å—Ç>`")
                return
                
            target_id, target_data = find_user_by_identifier(target_identifier)
            if not target_id:
                send_message(chat_id, get_text('admin_user_not_found', chat_id, user=target_identifier))
                return
                
            user_lang_text = get_text('admin_reply_prefix', target_id, text=reply_text)
            
            if send_message(target_id, user_lang_text):
                send_message(chat_id, get_text('admin_reply_sent', chat_id, 
                                             name=target_data.get('name', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'), id=target_id))
            else:
                send_message(chat_id, get_text('admin_reply_failed', chat_id))
                
        elif command == '/listallrentals' and (is_admin or (is_staff and staff_role == 'manager')):
            rentals = load_from_json(RENTALS_FILE)
            if not rentals:
                send_message(chat_id, "–ó–∞—è–≤–æ–∫ –Ω–∞ –∞—Ä–µ–Ω–¥—É –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
                
            rental_list = ["*–í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É:*\n`ID|–°—Ç–∞—Ç—É—Å|–ö–ª–∏–µ–Ω—Ç|–¢–µ–ª–µ—Ñ–æ–Ω|–ú–∞—à–∏–Ω–∞|–î–∞—Ç–∞`\n"]
            sorted_rentals = sorted(rentals.items(), key=lambda item: item[1]['timestamp'], reverse=True)
            
            for rid, r in sorted_rentals:
                user_info = users.get(r.get('chat_id'), {})
                username = f" (@{user_info.get('username')})" if user_info.get('username') else ""
                date_str = datetime.fromisoformat(r['timestamp']).strftime('%d.%m.%y')
                rental_list.append(f"`{rid}`|*{r.get('status')}*|{r.get('user_name')}{username}|`{user_info.get('phone', 'N/A')}`|{r.get('car')}|{date_str}")
                
            message_parts = []
            current_part = ""
            
            for line in rental_list:
                if len(current_part) + len(line) + 1 > 4096:
                    message_parts.append(current_part)
                    current_part = ""
                current_part += line + "\n"
                
            if current_part:
                message_parts.append(current_part)
                
            for part in message_parts:
                if part.strip():
                    send_message(chat_id, part)
                    time.sleep(0.3)
                    
        elif command == '/addcar' and (is_admin or (is_staff and staff_role == 'manager')):
            self.user_states[chat_id] = State.AWAITING_NEW_CAR_NAME
            self.user_data[chat_id] = {}
            send_message(chat_id, "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Kia K5):")
            
        elif command == '/editcar' and (is_admin or (is_staff and staff_role == 'manager')):
            cars = get_available_cars()
            if not cars:
                send_message(chat_id, "‚ùóÔ∏è–ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
                
            car_names = list(cars.keys())
            self.user_states[chat_id] = State.AWAITING_EDIT_CAR_SELECT
            self.user_data[chat_id] = {}
            
            send_message(chat_id, "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", 
                       reply_markup=create_keyboard([car_names[i:i + 2] for i in range(0, len(car_names), 2)], one_time=True))
                       
        elif command == '/deletecar' and (is_admin or (is_staff and staff_role == 'manager')):
            cars = get_available_cars()
            if not cars:
                send_message(chat_id, "‚ùóÔ∏è–ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return
                
            buttons = [
                [{'text': f'‚ùå {name}', 'callback_data': f'car_delete_{name.replace(" ", "%20")}'}]
                for name in cars.keys()
            ]
            
            send_message(chat_id, "üóëÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", 
                       reply_markup={'inline_keyboard': buttons})
        
        elif command == '/payout' and (is_admin or (is_staff and (staff_role == 'accountant' or staff_role == 'manager'))):
            try:
                owner_id, amount = args.split(' ', 1)
                if not owner_id.isdigit() or not amount.isdigit():
                    raise ValueError()
                amount = int(amount)
            except ValueError:
                send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/payout <ID —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞> <—Å—É–º–º–∞>`")
                return
                
            owner_cars = load_from_json(OWNER_CARS_FILE)
            if owner_id in owner_cars:
                car_info = owner_cars[owner_id]
                self.notifications.notify_owner_of_payout(owner_id, car_info, amount)
                send_message(chat_id, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ {amount} —Å–æ–º–æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É {owner_id}.")
            else:
                send_message(chat_id, f"‚ùóÔ∏è–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ —Å ID {owner_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ.")

        elif command == '/servicedone' and (is_admin or (is_staff and (staff_role == 'mechanic' or staff_role == 'manager'))):
            owner_id = args
            if not owner_id.isdigit():
                send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/servicedone <ID —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞>`")
                return

            owner_cars = load_from_json(OWNER_CARS_FILE)
            if owner_id in owner_cars:
                car_info = owner_cars[owner_id]
                self.notifications.notify_owner_of_maintenance_completion(owner_id, car_info)
                send_message(chat_id, f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¢–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É {owner_id}.")
            else:
                send_message(chat_id, f"‚ùóÔ∏è–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ —Å ID {owner_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        elif command == '/addstaff' and (is_admin or (is_staff and staff_role == 'manager')):
            try:
                staff_id, role = args.split(' ', 1)
                if role not in ['manager', 'mechanic', 'accountant']:
                    raise ValueError()
            except ValueError:
                send_message(chat_id, get_text('admin_add_staff_usage', chat_id))
                return
                
            staff = get_staff()
            user_id, user_data = find_user_by_identifier(staff_id)
            
            if not user_id:
                send_message(chat_id, get_text('admin_user_not_found', chat_id, user=staff_id))
                return
                
            if user_id in staff:
                send_message(chat_id, get_text('admin_staff_exists', chat_id, role=staff[user_id]['role']))
                return
                
            staff[user_id] = {'role': role, 'name': user_data.get('name', 'N/A')}
            save_to_json(staff, STAFF_FILE)
            
            send_message(chat_id, get_text('admin_staff_added', chat_id, name=user_data.get('name'), id=user_id, role=role))
            send_message(user_id, f"üéâ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å *{role}* –≤ —Å–∏—Å—Ç–µ–º–µ –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
            
        elif command == '/removestaff' and (is_admin or (is_staff and staff_role == 'manager')):
            if not args:
                send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/removestaff <ID>`")
                return
                
            staff = get_staff()
            user_id, user_data = find_user_by_identifier(args)
            
            if not user_id or user_id not in staff:
                send_message(chat_id, get_text('admin_staff_not_found', chat_id))
                return
                
            del staff[user_id]
            save_to_json(staff, STAFF_FILE)
            
            send_message(chat_id, get_text('admin_staff_removed', chat_id, name=user_data.get('name'), id=user_id))
            send_message(user_id, "‚ö†Ô∏è –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∞—Ä–µ–Ω–¥—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
            
        elif command == '/liststaff' and (is_admin or (is_staff and staff_role == 'manager')):
            staff = get_staff()
            if not staff:
                send_message(chat_id, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
                
            staff_list = ["*–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:*\n`ID` | *–†–æ–ª—å* | *–ò–º—è*"]
            for staff_id, staff_data in staff.items():
                staff_list.append(f"`{staff_id}` | *{staff_data['role']}* | {staff_data.get('name', 'N/A')}")
                
            send_message(chat_id, "\n".join(staff_list))
            
        elif command == '/approverental' and (is_admin or (is_staff and staff_role == 'manager')):
            if not args:
                send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/approverental <ID –∑–∞—è–≤–∫–∏>`")
                return
                
            rentals = load_from_json(RENTALS_FILE)
            if args not in rentals:
                send_message(chat_id, "‚ùóÔ∏è–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
                
            rentals[args]['status'] = 'approved'
            save_to_json(rentals, RENTALS_FILE)
            
            user_id = rentals[args]['chat_id']
            send_message(chat_id, f"‚úÖ –ó–∞—è–≤–∫–∞ {args} –æ–¥–æ–±—Ä–µ–Ω–∞.")
            send_message(user_id, get_text('rental_status_changed', user_id, 
                                         id=args, car=rentals[args]['car'], 
                                         emoji='‚úÖ', status='Approved') + 
                        get_text('status_approved_details', user_id))
                        
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
            owner_cars = load_from_json(OWNER_CARS_FILE)
            for owner_id, car_data in owner_cars.items():
                if car_data.get('car_brand') == rentals[args]['car']:
                    driver_info = users.get(user_id, {})
                    self.notifications.notify_owner_of_driver_assignment(owner_id, driver_info, car_data)
                    break
            
        elif command == '/rejectrental' and (is_admin or (is_staff and staff_role == 'manager')):
            if not args:
                send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/rejectrental <ID –∑–∞—è–≤–∫–∏>`")
                return
                
            rentals = load_from_json(RENTALS_FILE)
            if args not in rentals:
                send_message(chat_id, "‚ùóÔ∏è–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
                
            rentals[args]['status'] = 'rejected'
            save_to_json(rentals, RENTALS_FILE)
            
            user_id = rentals[args]['chat_id']
            send_message(chat_id, f"‚ùå –ó–∞—è–≤–∫–∞ {args} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            send_message(user_id, get_text('rental_status_changed', user_id, 
                                         id=args, car=rentals[args]['car'], 
                                         emoji='‚ùå', status='Rejected') + 
                        get_text('status_rejected_details', user_id))
                        
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ —Å–≤–æ–±–æ–¥–Ω–æ–π –º–∞—à–∏–Ω–µ
            car_info = get_available_cars().get(rentals[args]['car'], {})
            if car_info:
                self.notifications.notify_all_drivers_about_free_car(car_info)
                
        elif command == '/listpending' and (is_admin or (is_staff and staff_role == 'manager')):
            rentals = load_from_json(RENTALS_FILE)
            pending_rentals = [r for r in rentals.values() if r.get('status') == 'pending']
            
            if not pending_rentals:
                send_message(chat_id, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –∞—Ä–µ–Ω–¥—É.")
                return
                
            rentals_list = ["*–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É:*\n`ID` | *–ö–ª–∏–µ–Ω—Ç* | *–ú–∞—à–∏–Ω–∞* | *–î–∞—Ç–∞*"]
            for rid, r in rentals.items():
                if r.get('status') == 'pending':
                    user_info = users.get(r.get('chat_id'), {})
                    username = f" (@{user_info.get('username')})" if user_info.get('username') else ""
                    date_str = datetime.fromisoformat(r['timestamp']).strftime('%d.%m.%y')
                    rentals_list.append(f"`{rid}` | {r.get('user_name')}{username} | {r.get('car')} | {date_str}")
                    
            send_message(chat_id, "\n".join(rentals_list))
            
        elif command == '/listmaintenance' and (is_admin or (is_staff and staff_role == 'mechanic')):
            owner_cars = load_from_json(OWNER_CARS_FILE)
            if not owner_cars:
                send_message(chat_id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
                return
                
            cars_list = ["*–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:*\n`ID` | *–ú–∞—Ä–∫–∞* | *–ì–æ—Å. –Ω–æ–º–µ—Ä* | *–ü—Ä–æ–±–µ–≥*"]
            for owner_id, car_data in owner_cars.items():
                owner_info = users.get(owner_id, {})
                cars_list.append(f"`{owner_id}` | {car_data.get('car_brand', 'N/A')} | `{car_data.get('car_plate', 'N/A')}` | {car_data.get('car_mileage', 'N/A')} –∫–º")
                
            send_message(chat_id, "\n".join(cars_list))
            
        elif command in ['/dailycheck', '/acceptfromowner', '/givetodriver'] and (is_admin or (is_staff and staff_role == 'mechanic')):
            cars = load_from_json(OWNER_CARS_FILE)
            if not cars:
                send_message(chat_id, "‚ùóÔ∏è –ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏, –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫.")
                return

            checklist_type = command.replace('/', '') 

            self.user_data[chat_id] = {
                'checklist_type': checklist_type,
                'step': 0, 
                'answers': {}
            }
            self.user_states[chat_id] = State.AWAITING_CHECKLIST_INPUT

            buttons = [
                [{'text': f"{data.get('car_brand', 'N/A')} ({data.get('car_plate', 'N/A')})", 'callback_data': f"checklist_car_{data.get('car_plate')}"}]
                for plate, data in cars.items()
            ]
            keyboard = create_keyboard(buttons, inline=True)
            send_message(chat_id, f"Ô∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è‚úàÔ∏è *{get_text(f'mechanic_{checklist_type}_cmd', chat_id)}*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞:", reply_markup=keyboard)

        elif command == '/edithandover' and (is_admin or (is_staff and staff_role == 'mechanic')):
            send_message(chat_id, "‚öôÔ∏è *–§—É–Ω–∫—Ü–∏—è '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–∫–∏/–≤—ã–¥–∞—á–∏' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.*\n\n–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –º–µ—Ö–∞–Ω–∏–∫—É —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —á–µ–∫-–ª–∏—Å—Ç–∞—Ö.")
            
        elif str(chat_id) == main_admin_id:
            if command == '/listadmins':
                admins = load_from_json(ADMIN_FILE)
                admin_list = [
                    f"- `{aid}` ({'–ì–ª–∞–≤–Ω—ã–π' if key == 'main_admin' else '–ê–¥–º–∏–Ω'})"
                    for key, aid in admins.items()
                ]
                send_message(chat_id, "*–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n" + "\n".join(admin_list))
                
            elif command == '/addadmin':
                if not args or not args.isdigit():
                    send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/addadmin <ID>`")
                    return
                    
                admins = load_from_json(ADMIN_FILE)
                if args in admins.values():
                    send_message(chat_id, f"‚ùóÔ∏è `{args}` —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
                    return
                    
                admins[f'admin_{len(admins)}'] = args
                save_to_json(admins, ADMIN_FILE)
                send_message(chat_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä `{args}` –¥–æ–±–∞–≤–ª–µ–Ω.")
                send_message(args, "üéâ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!")
                
            elif command == '/removeadmin':
                if not args or not args.isdigit():
                    send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/removeadmin <ID>`")
                    return
                    
                if args == main_admin_id:
                    send_message(chat_id, "‚ùóÔ∏è–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    return
                    
                admins = load_from_json(ADMIN_FILE)
                key_to_remove = None
                
                for key, admin_id_val in admins.items():
                    if admin_id_val == args:
                        key_to_remove = key
                        break
                        
                if key_to_remove:
                    del admins[key_to_remove]
                    save_to_json(admins, ADMIN_FILE)
                    send_message(chat_id, f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä `{args}` —É–¥–∞–ª–µ–Ω.")
                    send_message(args, "‚ùå –í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                else:
                    send_message(chat_id, f"‚ùóÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä `{args}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    
        else:
            send_message(chat_id, "ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ú–µ–Ω—é' –≤ Telegram –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤."""
    
    commands_ru = [
        {'command': 'start', 'description': 'üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'},
        {'command': 'rent', 'description': 'üöô –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å'},
        {'command': 'listcars', 'description': 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ'},
        {'command': 'myrentals', 'description': 'üìÑ –ú–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É'},
        {'command': 'profile', 'description': 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'},
        {'command': 'help', 'description': '‚ÑπÔ∏è –ü–æ–º–æ—â—å'},
        {'command': 'contact', 'description': 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'},
        {'command': 'language', 'description': 'üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'},
    ]
    
    commands_tj = [
        {'command': 'start', 'description': 'üöÄ –ë–æ–∑—Å–æ–∑–∏–∏ –±–æ—Ç'},
        {'command': 'rent', 'description': 'üöô –ò“∑–æ—Ä–∞–∏ –º–æ—à–∏–Ω'},
        {'command': 'listcars', 'description': 'üìã –†”Ø–π—Ö–∞—Ç–∏ –º–æ—à–∏–Ω“≥–æ'},
        {'command': 'myrentals', 'description': 'üìÑ –î–∞—Ä—Ö–æ—Å—Ç“≥–æ–∏ –º–∞–Ω'},
        {'command': 'profile', 'description': 'üë§ –ü—Ä–æ—Ñ–∏–ª–∏ –º–∞–Ω'},
        {'command': 'help', 'description': '‚ÑπÔ∏è –Å—Ä”£'},
        {'command': 'contact', 'description': 'üìû –¢–∞–º–æ—Å'},
        {'command': 'language', 'description': 'üåê –ò–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω–∏ –∑–∞–±–æ–Ω'},
    ]
    
    payloads = [
        {'commands': commands_ru, 'language_code': 'ru'},
        {'commands': commands_tj, 'language_code': 'tg'}
    ]

    for payload in payloads:
        send_request('setMyCommands', payload)
    
    default_payload = {'commands': commands_ru}
    send_request('setMyCommands', default_payload)
    print("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤.")


def main():
    bot = CarRentalBot()
    
    set_bot_commands()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    offset = 0
    last_scheduled_check = datetime.now() - timedelta(days=1)

    while True:
        try:
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            if datetime.now() - last_scheduled_check >= timedelta(hours=24):
                daily_scheduler_check()
                last_scheduled_check = datetime.now()

            response = send_request('getUpdates', {'offset': offset, 'timeout': 60})
            if response and response.get('ok'):
                for update in response['result']:
                    offset = update['update_id'] + 1
                    try:
                        bot.process_update(update)
                    except Exception as e:
                        print(f"--- –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò UPDATE ---\nUpdate: {update}")
                        traceback.print_exc()
                        
        except KeyboardInterrupt:
            print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            break
            
        except requests.exceptions.ReadTimeout:
            print("–¢–∞–π–º–∞—É—Ç —Å–µ—Ç–∏, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å...")
            time.sleep(1)
            continue
            
        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            traceback.print_exc()
            time.sleep(10)

if __name__ == '__main__':
    main() 